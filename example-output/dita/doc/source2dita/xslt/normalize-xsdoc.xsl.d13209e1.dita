<reference id="d13209e1">
   <title>xsl:stylesheet</title>
   <abstract>
      <shortdesc/>
   </abstract>
   <prolog>
      <metadata>
         <audience type="programmer" job="programming" experiencelevel="expert"/>
         <othermeta name="programming-language" content="XSLT"/>
         <othermeta name="xslt-version" content="2.0"/>
         <othermeta name="xpath-version" content="2.0"/>
      </metadata>
   </prolog>
   <refbody>
      <section>
         <apiname>xsl:stylesheet</apiname>
      </section>
      <section outputclass="parameters xslt-outputs">
         <title outputclass="io-header">Outputs (xsl:output)</title>
         <parml outputclass="xslt-outputs">
            <pt/>
            <pt/>
            <pt/>
            <pt/>
            <pt/>
            <pt>yes</pt>
            <pt/>
            <pt/>
            <pt>no</pt>
            <pt>omit</pt>
            <pt/>
            <pd/>
         </parml>
      </section>
   </refbody>
   <section outputclass="sourcecode">
      <title outputclass="sourcecode-header">Source Code</title>
      <codeblock>&lt;xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:xd="http://pipeline.daisy.org/ns/sample/doc" version="2.0"&gt;

    &lt;codeblock&gt;&lt;xsl:stylesheet version="2.0"&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Identity template.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template match="@*|node()"&gt;
        &lt;xsl:copy&gt;
            &lt;xsl:apply-templates select="@*|node()"/&gt;
        &lt;/xsl:copy&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Matches each xd:doc element.&lt;/xd:short&gt;&lt;xd:detail&gt;
        
        Determines what code is being documented and calls appropriate templates for: &lt;xd:ul&gt;
                &lt;xd:li&gt;short description (xd:short)&lt;/xd:li&gt;
                &lt;xd:li&gt;detailed description (xd:detail)&lt;/xd:li&gt;
                &lt;xd:li&gt;authors (xd:author)&lt;/xd:li&gt;
                &lt;xd:li&gt;contributors (xd:contributor)&lt;/xd:li&gt;
                &lt;xd:li&gt;maintainers (xd:maintainer)&lt;/xd:li&gt;
                &lt;xd:li&gt;copyright (xd:copyright)&lt;/xd:li&gt;
                &lt;xd:li&gt;version (xd:version)&lt;/xd:li&gt;
                &lt;xd:li&gt;code existed since version (xd:since)&lt;/xd:li&gt;
                &lt;xd:li&gt;see also (xd:see)&lt;/xd:li&gt;
                &lt;xd:li&gt;deprecated since version (xd:deprecated)&lt;/xd:li&gt;
                &lt;xd:li&gt;import statements (xd:import and xsl:import)&lt;/xd:li&gt;
                &lt;xd:li&gt;include statements (xd:include and xsl:include)&lt;/xd:li&gt;
                &lt;xd:li&gt;parameters (xd:param and xsl:param)&lt;/xd:li&gt;
                &lt;xd:li&gt;return values / output (xd:return)&lt;/xd:li&gt;
            &lt;/xd:ul&gt;
        
        
    &lt;/xd:detail&gt;&lt;xd:return&gt;The normalized xd:doc.&lt;/xd:return&gt;&lt;/xd:doc&gt;
    &lt;xsl:template match="xd:doc"&gt;
        &lt;xsl:copy&gt;
            &lt;xsl:variable name="target"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="@target"&gt;
                        &lt;xsl:value-of select="@target"/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="count(preceding-sibling::*)=0"&gt;
                        &lt;xsl:value-of select="'parent'"/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:value-of select="'following'"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:variable&gt;
            &lt;xsl:variable name="code" select="if ($target='parent') then parent::* else following-sibling::*[1]"/&gt;

            &lt;xsl:attribute name="target" select="$target"/&gt;

            &lt;xsl:call-template name="short"/&gt;
            &lt;xsl:call-template name="detail"/&gt;
            &lt;xsl:call-template name="authors"/&gt;
            &lt;xsl:call-template name="contributors"/&gt;
            &lt;xsl:call-template name="maintainers"/&gt;
            &lt;xsl:call-template name="copyright"/&gt;
            &lt;xsl:call-template name="version"/&gt;
            &lt;xsl:call-template name="since"/&gt;
            &lt;xsl:call-template name="see"/&gt;
            &lt;xsl:call-template name="deprecated"/&gt;
            &lt;xsl:call-template name="import"&gt;
                &lt;xsl:with-param name="code" select="$code"/&gt;
            &lt;/xsl:call-template&gt;
            &lt;xsl:call-template name="include"&gt;
                &lt;xsl:with-param name="code" select="$code"/&gt;
            &lt;/xsl:call-template&gt;
            &lt;xsl:call-template name="param"&gt;
                &lt;xsl:with-param name="code" select="$code"/&gt;
            &lt;/xsl:call-template&gt;
            &lt;xsl:call-template name="return"/&gt;
        &lt;/xsl:copy&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Determines the short description.&lt;/xd:short&gt;&lt;xd:detail&gt;
        
        
            &lt;xd:ul&gt;
                &lt;xd:li&gt;If there is no &amp;lt;xd:short/&amp;gt;-element present, but plain text is present as a
                    child of the &amp;lt;xd:doc/&amp;gt;element, then the first sentence from that text (up
                    until the first period (".") will be used as a short description.&lt;/xd:li&gt;
                &lt;xd:li&gt;Else; if there are multiple &amp;lt;xd:short/&amp;gt;-elements, each one of their
                    contents will be wrapped in separate &amp;lt;section/&amp;gt;s.&lt;/xd:li&gt;
                &lt;xd:li&gt;Else; use the one &amp;lt;xd:short/&amp;gt;-element that is present for the short
                    description.&lt;/xd:li&gt;
            &lt;/xd:ul&gt;
        
    &lt;/xd:detail&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="short"&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="count(child::*[local-name()='short'])&amp;gt;1"&gt;
                &lt;xd:short&gt;
                    &lt;xsl:for-each select="child::*[local-name()='short']"&gt;
                        &lt;xd:section&gt;
                            &lt;xsl:apply-templates mode="section"/&gt;
                        &lt;/xd:section&gt;
                    &lt;/xsl:for-each&gt;
                &lt;/xd:short&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="count(child::*[local-name()='short'])=1"&gt;
                &lt;xd:short&gt;
                    &lt;xsl:apply-templates select="child::*[local-name()='short']/node()" mode="section"/&gt;
                &lt;/xd:short&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="child::text()[string-length(normalize-space())&amp;gt;0]"&gt;
                &lt;xsl:variable name="short" select="replace(normalize-space(child::text()[1]),'^([^\.]+\.?)\s?.*$','$1')"/&gt;
                &lt;xd:short&gt;
                    &lt;xsl:value-of select="$short"/&gt;
                &lt;/xd:short&gt;
            &lt;/xsl:when&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Determines the detailed description.&lt;/xd:short&gt;&lt;xd:detail&gt;
        
        The detailed description will be put together based on any number of
            &amp;lt;xd:detail/&amp;gt;-elements, as well as any number of text nodes that are direct
            children of the &amp;lt;xd:doc/&amp;gt;-element. If the xd:short was extracted from the first
            text node, then the first sentence from that text node will be ignored. If there are
            multiple &amp;lt;xd:detail/&amp;gt; and text nodes, then each of them will be wrapped in
            &amp;lt;xd:section/&amp;gt;s.
    &lt;/xd:detail&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="detail"&gt;
        &lt;xsl:variable name="shortInFirstText" select="count(./*[local-name()='short'])=0"/&gt;
        &lt;xsl:variable name="detailCount" select="(if (matches(normalize-space(./text()[1]),'\.[^\.].')) then 1 else 0) + count(*[local-name()='detail' and (descendant-or-self::node()[self::text() and string-length(normalize-space())&amp;gt;0 or local-name()='pre' and not(ancestor::*[local-name()='pre'])])]) + count(./text()[not(position()=1) and string-length(normalize-space())&amp;gt;0])"/&gt;
        &lt;xsl:if test="$detailCount&amp;gt;0"&gt;
            &lt;xd:detail&gt;
                &lt;xsl:for-each select="*|text()"&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="self::text() and count(preceding-sibling::text()[string-length(normalize-space())&amp;gt;0])=0"&gt;
                            &lt;!-- first text --&gt;
                            &lt;xsl:choose&gt;
                                &lt;xsl:when test="$shortInFirstText"&gt;
                                    &lt;xsl:variable name="detail" select="replace(normalize-space(),'^[^\.]+.?\s?(.*)$','$1')"/&gt;
                                    &lt;xsl:choose&gt;
                                        &lt;xsl:when test="$detailCount&amp;gt;1"&gt;
                                            &lt;xd:section&gt;
                                                &lt;xsl:value-of select="$detail"/&gt;
                                            &lt;/xd:section&gt;
                                        &lt;/xsl:when&gt;
                                        &lt;xsl:otherwise&gt;
                                            &lt;xsl:value-of select="$detail"/&gt;
                                        &lt;/xsl:otherwise&gt;
                                    &lt;/xsl:choose&gt;
                                &lt;/xsl:when&gt;
                                &lt;xsl:otherwise&gt;
                                    &lt;xsl:choose&gt;
                                        &lt;xsl:when test="$detailCount&amp;gt;1"&gt;
                                            &lt;xd:section&gt;
                                                &lt;xsl:value-of select="."/&gt;
                                            &lt;/xd:section&gt;
                                        &lt;/xsl:when&gt;
                                        &lt;xsl:otherwise&gt;
                                            &lt;xsl:value-of select="."/&gt;
                                        &lt;/xsl:otherwise&gt;
                                    &lt;/xsl:choose&gt;
                                &lt;/xsl:otherwise&gt;
                            &lt;/xsl:choose&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="self::text()"&gt;
                            &lt;!-- non-first text --&gt;
                            &lt;xsl:choose&gt;
                                &lt;xsl:when test="$detailCount&amp;gt;1"&gt;
                                    &lt;xd:section&gt;
                                        &lt;xsl:value-of select="."/&gt;
                                    &lt;/xd:section&gt;
                                &lt;/xsl:when&gt;
                                &lt;xsl:otherwise&gt;
                                    &lt;xsl:value-of select="."/&gt;
                                &lt;/xsl:otherwise&gt;
                            &lt;/xsl:choose&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="local-name()='detail'"&gt;
                            &lt;!-- detail element --&gt;
                            &lt;xsl:choose&gt;
                                &lt;xsl:when test="$detailCount&amp;gt;1"&gt;
                                    &lt;xd:section&gt;
                                        &lt;xsl:apply-templates select="child::node()" mode="section"/&gt;
                                    &lt;/xd:section&gt;
                                &lt;/xsl:when&gt;
                                &lt;xsl:otherwise&gt;
                                    &lt;xsl:apply-templates select="child::node()" mode="section"/&gt;
                                &lt;/xsl:otherwise&gt;
                            &lt;/xsl:choose&gt;
                        &lt;/xsl:when&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xsl:for-each&gt;
            &lt;/xd:detail&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes the xd:author-elements.&lt;/xd:short&gt;&lt;xd:detail&gt;&amp;gt;xd:author/&amp;lt;s with no text are removed. &amp;lt;xd:author/&amp;gt;s with no child elements will have their text content wrapped in a &amp;lt;xd:name/&amp;gt; element. Children other than xd:name, xd:mailto and xd:organization are ignored.&lt;/xd:detail&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="authors" xml:id="authors"&gt;
        &lt;xsl:for-each select="*[local-name()='author']"&gt;
            &lt;xsl:variable name="is-empty" select="count(descendant-or-self::text()[string-length(normalize-space())&amp;gt;0])=0"/&gt;
            &lt;xsl:if test="not($is-empty)"&gt;
                &lt;xd:author&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="count(child::*)=0"&gt;
                            &lt;xd:name&gt;
                                &lt;xsl:value-of select="."/&gt;
                            &lt;/xd:name&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:if test="child::*[local-name()='name']"&gt;
                                &lt;xd:name&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='name']"/&gt;
                                &lt;/xd:name&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='mailto']"&gt;
                                &lt;xd:mailto&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='mailto']"/&gt;
                                &lt;/xd:mailto&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='organization']"&gt;
                                &lt;xd:organization&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='organization']"/&gt;
                                &lt;/xd:organization&gt;
                            &lt;/xsl:if&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xd:author&gt;
            &lt;/xsl:if&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;&amp;lt;xd:contributor/&amp;gt;s are normalized in the same way as &amp;lt;xd:author/&amp;gt;s&lt;/xd:short&gt;&lt;xd:see&gt;#authors&lt;/xd:see&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="contributors"&gt;
        &lt;xsl:for-each select="*[local-name()='contributor']"&gt;
            &lt;xsl:variable name="is-empty" select="count(descendant-or-self::text()[string-length(normalize-space())&amp;gt;0])=0"/&gt;
            &lt;xsl:if test="not($is-empty)"&gt;
                &lt;xd:contributor&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="count(child::*)=0"&gt;
                            &lt;xd:name&gt;
                                &lt;xsl:value-of select="."/&gt;
                            &lt;/xd:name&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:if test="child::*[local-name()='name']"&gt;
                                &lt;xd:name&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='name']"/&gt;
                                &lt;/xd:name&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='mailto']"&gt;
                                &lt;xd:mailto&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='mailto']"/&gt;
                                &lt;/xd:mailto&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='organization']"&gt;
                                &lt;xd:organization&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='organization']"/&gt;
                                &lt;/xd:organization&gt;
                            &lt;/xsl:if&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xd:contributor&gt;
            &lt;/xsl:if&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;&amp;lt;xd:maintainer/&amp;gt;s are normalized in the same way as &amp;lt;xd:author/&amp;gt;s&lt;/xd:short&gt;&lt;xd:see&gt;#authors&lt;/xd:see&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="maintainers"&gt;
        &lt;xsl:for-each select="*[local-name()='maintainer']"&gt;
            &lt;xsl:variable name="is-empty" select="count(descendant-or-self::text()[string-length(normalize-space())&amp;gt;0])=0"/&gt;
            &lt;xsl:if test="not($is-empty)"&gt;
                &lt;xd:maintainer&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="count(child::*)=0"&gt;
                            &lt;xd:name&gt;
                                &lt;xsl:value-of select="."/&gt;
                            &lt;/xd:name&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:if test="child::*[local-name()='name']"&gt;
                                &lt;xd:name&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='name']"/&gt;
                                &lt;/xd:name&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='mailto']"&gt;
                                &lt;xd:mailto&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='mailto']"/&gt;
                                &lt;/xd:mailto&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='organization']"&gt;
                                &lt;xd:organization&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='organization']"/&gt;
                                &lt;/xd:organization&gt;
                            &lt;/xsl:if&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xd:maintainer&gt;
            &lt;/xsl:if&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes the xd:copyright-element.&lt;/xd:short&gt;&lt;xd:detail&gt;&amp;gt;xd:copyright/&amp;lt;s with no text are removed. &amp;lt;xd:copyright/&amp;gt;s with no child elements will have their text content wrapped in a &amp;lt;xd:name/&amp;gt; element. Children other than xd:year, xd:name, xd:mailto and xd:organization are ignored.&lt;/xd:detail&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="copyright"&gt;
        &lt;xsl:for-each select="*[local-name()='copyright']"&gt;
            &lt;xsl:variable name="is-empty" select="count(descendant-or-self::text()[string-length(normalize-space())&amp;gt;0])=0"/&gt;
            &lt;xsl:if test="not($is-empty)"&gt;
                &lt;xd:copyright&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="count(child::*)=0"&gt;
                            &lt;xd:name&gt;
                                &lt;xsl:value-of select="."/&gt;
                            &lt;/xd:name&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:if test="child::*[local-name()='year']"&gt;
                                &lt;xd:year&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='year']"/&gt;
                                &lt;/xd:year&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='name']"&gt;
                                &lt;xd:name&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='name']"/&gt;
                                &lt;/xd:name&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='mailto']"&gt;
                                &lt;xd:mailto&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='mailto']"/&gt;
                                &lt;/xd:mailto&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='organization']"&gt;
                                &lt;xd:organization&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='organization']"/&gt;
                                &lt;/xd:organization&gt;
                            &lt;/xsl:if&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xd:copyright&gt;
            &lt;/xsl:if&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:version elements.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="version"&gt;
        &lt;xsl:if test="child::*[local-name()='version' and string-length(normalize-space(./text()))&amp;gt;0]"&gt;
            &lt;xd:version&gt;
                &lt;xsl:value-of select="child::*[local-name()='version' and string-length(normalize-space(./text()))&amp;gt;0]"/&gt;
            &lt;/xd:version&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:since elements.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="since"&gt;
        &lt;xsl:if test="child::*[local-name()='since' and string-length(normalize-space(./text()))&amp;gt;0]"&gt;
            &lt;xd:since&gt;
                &lt;xsl:value-of select="child::*[local-name()='since' and string-length(normalize-space(./text()))&amp;gt;0]"/&gt;
            &lt;/xd:since&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:see elements.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="see"&gt;
        &lt;xsl:if test="child::*[local-name()='see' and string-length(normalize-space(./text()))&amp;gt;0]"&gt;
            &lt;xd:see&gt;
                &lt;xsl:value-of select="child::*[local-name()='see' and string-length(normalize-space(./text()))&amp;gt;0]"/&gt;
            &lt;/xd:see&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:deprecated elements.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="deprecated"&gt;
        &lt;xsl:if test="child::*[local-name()='deprecated' and string-length(normalize-space(./text()))&amp;gt;0]"&gt;
            &lt;xd:deprecated&gt;
                &lt;xsl:value-of select="child::*[local-name()='deprecated' and string-length(normalize-space(./text()))&amp;gt;0]"/&gt;
            &lt;/xd:deprecated&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:import elements.&lt;/xd:short&gt;&lt;xd:detail&gt;Will create empty documentation for imports that are not documented, and removes documentation of imports that does not exist in the code.&lt;/xd:detail&gt;&lt;xd:param name="code"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="import"&gt;
        &lt;xsl:param name="code" required="yes"/&gt;
        &lt;xsl:variable name="doc" select="."/&gt;
        &lt;xsl:for-each select="$code/xsl:import"&gt;
            &lt;xsl:variable name="href" select="@href"/&gt;
            &lt;xd:import href="{@href}"&gt;
                &lt;xsl:if test="$doc/*[local-name()='import' and @href=$href]"&gt;
                    &lt;xsl:value-of select="$doc/*[local-name()='import' and @href=$href]"/&gt;
                &lt;/xsl:if&gt;
            &lt;/xd:import&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:include elements.&lt;/xd:short&gt;&lt;xd:detail&gt;Will create empty documentation for includes that are not documented, and removes documentation of includes that does not exist in the code.&lt;/xd:detail&gt;&lt;xd:param name="code"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="include"&gt;
        &lt;xsl:param name="code" required="yes"/&gt;
        &lt;xsl:variable name="doc" select="."/&gt;
        &lt;xsl:for-each select="$code/xsl:include"&gt;
            &lt;xsl:variable name="href" select="@href"/&gt;
            &lt;xd:include href="{@href}"&gt;
                &lt;xsl:if test="$doc/*[local-name()='include' and @href=$href]"&gt;
                    &lt;xsl:value-of select="$doc/*[local-name()='include' and @href=$href]"/&gt;
                &lt;/xsl:if&gt;
            &lt;/xd:include&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:import elements.&lt;/xd:short&gt;&lt;xd:detail&gt;Will create empty documentation for imports that are not documented, and removes documentation of imports that does not exist in the code.&lt;/xd:detail&gt;&lt;xd:param name="code"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="param"&gt;
        &lt;xsl:param name="code" required="yes"/&gt;
        &lt;xsl:variable name="doc" select="."/&gt;
        &lt;xsl:for-each select="*[local-name()='param']"&gt;
            &lt;xd:param&gt;
                &lt;xsl:apply-templates select="@*"/&gt;
                &lt;xsl:apply-templates mode="section" select="node()"/&gt;
            &lt;/xd:param&gt;
        &lt;/xsl:for-each&gt;
        &lt;xsl:for-each select="$code/xsl:param"&gt;
            &lt;xsl:variable name="name" select="@name"/&gt;
            &lt;xsl:if test="not($doc/*[local-name()='param' and @name=$name])"&gt;
                &lt;xd:param name="{@name}"/&gt;
            &lt;/xsl:if&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Describes the result of the code.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="return"&gt;
        &lt;xsl:variable name="is-empty" select="count(*[local-name()='return']/descendant-or-self::node()[self::text() and string-length(normalize-space())&amp;gt;0 or local-name()='pre'])=0"/&gt;
        &lt;xsl:if test="not($is-empty)"&gt;
            &lt;xd:return&gt;
                &lt;xsl:apply-templates mode="section" select="*[local-name()='return']/node()"/&gt;
            &lt;/xd:return&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Matches all elements when in "section"-mode.&lt;/xd:short&gt;&lt;xd:detail&gt;
        
        Checks all child elements and their descendants and wraps and handles as is
            appropriate. If a child or descendant is placed in a problematic position, then one of
            the unwrap*-templates are called to solve the problem. Otherwise, just make sure that
            the element is in the correct namespace and copy it.
    &lt;/xd:detail&gt;&lt;xd:param name="wrapin-p"/&gt;&lt;xd:param name="wrapin-ul"/&gt;&lt;xd:param name="wrapin-li"/&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template mode="section" match="@*|node()"&gt;
        &lt;xsl:param name="wrapin-p" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-ul" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-li" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:variable name="is-empty" select="count(descendant-or-self::node()[self::text() and string-length(normalize-space())&amp;gt;0 or local-name()='pre'])=0"/&gt;
        &lt;xsl:variable name="contains-section" select="count(descendant::*[local-name()='section'])&amp;gt;0"/&gt;
        &lt;xsl:variable name="contains-block" select="count(descendant::*[local-name()='ul' or local-name()='li' or local-name()='pre' or local-name()='p'])&amp;gt;0"/&gt;
        &lt;xsl:variable name="contains-block-non-li" select="count(descendant::*[local-name()='ul' or local-name()='pre' or local-name()='p'])&amp;gt;0"/&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="local-name()='section'"&gt;
                &lt;xd:section&gt;
                    &lt;xsl:apply-templates mode="section" select="@*|node()"/&gt;
                &lt;/xd:section&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='p'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$contains-section or $contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-p" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:p&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:p&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='pre'"&gt;
                &lt;xd:pre&gt;
                    &lt;xsl:copy-of select="@*|node()"/&gt;
                &lt;/xd:pre&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='ul'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-section"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$contains-block-non-li"&gt;
                        &lt;xd:section&gt;
                            &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                                &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                            &lt;/xsl:call-template&gt;
                        &lt;/xd:section&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="count(descendant::*[local-name()='li'])=0"&gt;
                        &lt;xsl:choose&gt;
                            &lt;xsl:when test="count(child::node()[self::* or self::text() and string-length(normalize-space())&amp;gt;0])&amp;gt;1"&gt;
                                &lt;xd:section&gt;
                                    &lt;xsl:apply-templates mode="section" select="@*|node()"&gt;
                                        &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                                        &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                                    &lt;/xsl:apply-templates&gt;
                                &lt;/xd:section&gt;
                            &lt;/xsl:when&gt;
                            &lt;xsl:otherwise&gt;
                                &lt;xsl:apply-templates mode="section" select="@*|node()"&gt;
                                    &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                                &lt;/xsl:apply-templates&gt;
                            &lt;/xsl:otherwise&gt;
                        &lt;/xsl:choose&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:ul&gt;
                            &lt;xsl:apply-templates mode="list" select="@*|node()"&gt;
                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:ul&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='li'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-section"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:ul&gt;
                            &lt;xd:li&gt;
                                &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                            &lt;/xd:li&gt;
                        &lt;/xd:ul&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='b'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-section"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-b" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-b" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:b&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:b&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='i'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-section"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-i" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-i" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:i&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:i&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='a'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-section"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-a" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-a-elem" select="." tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-a" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-a-elem" select="." tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:a&gt;
                            &lt;xsl:apply-templates select="@*"/&gt;
                            &lt;xsl:apply-templates mode="phrase" select="node()"/&gt;
                        &lt;/xd:a&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="self::*"&gt;
                        &lt;xsl:choose&gt;
                            &lt;xsl:when test="not(preceding-sibling::*) and not(following-sibling::*)"&gt;
                                &lt;xsl:apply-templates mode="section" select="@*|node()"/&gt;
                            &lt;/xsl:when&gt;
                            &lt;xsl:otherwise&gt;
                                &lt;xd:section&gt;
                                    &lt;xsl:apply-templates mode="section" select="@*|node()"/&gt;
                                &lt;/xd:section&gt;
                            &lt;/xsl:otherwise&gt;
                        &lt;/xsl:choose&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="self::text()"&gt;
                        &lt;xsl:copy/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="section" select="@*|node()"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Handles non-problematic lists.&lt;/xd:short&gt;&lt;xd:param name="wrapin-p"/&gt;&lt;xd:param name="wrapin-ul"/&gt;&lt;xd:param name="wrapin-li"/&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template mode="list" match="@*|node()"&gt;
        &lt;xsl:param name="wrapin-p" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-ul" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-li" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:variable name="is-empty" select="count(descendant-or-self::node()[self::text() and string-length(normalize-space())&amp;gt;0 or local-name()='pre'])=0"/&gt;
        &lt;xsl:variable name="contains-block" select="count(descendant::*[local-name()='ul' or local-name()='li' or local-name()='pre' or local-name()='p'])&amp;gt;0"/&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="local-name()='li'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$wrapin-ul"&gt;
                        &lt;xd:ul&gt;
                            &lt;xd:li&gt;
                                &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                            &lt;/xd:li&gt;
                        &lt;/xd:ul&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:li&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:li&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="self::text()"&gt;
                        &lt;xsl:copy/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="list" select="@*|node()"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Handles all elements when in "block" mode and applies fixes where needed.&lt;/xd:short&gt;&lt;xd:param name="wrapin-p"/&gt;&lt;xd:param name="wrapin-ul"/&gt;&lt;xd:param name="wrapin-li"/&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template mode="block" match="@*|node()"&gt;
        &lt;xsl:param name="wrapin-p" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-ul" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-li" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:variable name="element" select="."/&gt;
        &lt;xsl:variable name="is-empty" select="count(descendant-or-self::node()[self::* or self::text() and string-length(normalize-space())&amp;gt;0])=0"/&gt;
        &lt;xsl:variable name="contains-block" select="count(descendant::*[local-name()='ul' or local-name()='li' or local-name()='pre' or local-name()='p'])&amp;gt;0"/&gt;
        &lt;xsl:variable name="contains-block-non-li" select="count(descendant::*[local-name()='ul' or local-name()='pre' or local-name()='p'])&amp;gt;0"/&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="local-name()='p'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:p&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:p&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='pre'"&gt;
                &lt;xd:pre&gt;
                    &lt;xsl:copy-of select="@*|node()"/&gt;
                &lt;/xd:pre&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='ul'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block-non-li"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="count(descendant::*[local-name()='li' and string-length(normalize-space(descendant-or-self::text()))&amp;gt;0])=0"&gt;
                        &lt;xsl:apply-templates mode="block" select="@*|node()"/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:ul&gt;
                            &lt;xsl:apply-templates mode="list" select="@*|node()"&gt;
                                &lt;xsl:with-param name="wrapin-ul" select="false()"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:ul&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='li'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:ul&gt;
                            &lt;xd:li&gt;
                                &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                                    &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                &lt;/xsl:apply-templates&gt;
                            &lt;/xd:li&gt;
                        &lt;/xd:ul&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="not($contains-block) and $wrapin-p"&gt;
                &lt;xd:p&gt;
                    &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                        &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                        &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                        &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                    &lt;/xsl:apply-templates&gt;
                &lt;/xd:p&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="not($contains-block) and $wrapin-li"&gt;
                &lt;xd:ul&gt;
                    &lt;xd:li&gt;
                        &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                            &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xd:li&gt;
                &lt;/xd:ul&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='b'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-b" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:b&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:b&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='i'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-i" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:i&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:i&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='a'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-a" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-a-elem" select="$element" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:a&gt;
                            &lt;xsl:apply-templates mode="phrase" select="$element/@*"/&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:a&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="self::text()"&gt;
                        &lt;xsl:copy/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="block" select="@*|node()"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Phrases are matched with this template (mode="phrase") and handled appropriately.&lt;/xd:short&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template mode="phrase" match="@*|node()"&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="local-name()='b'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='b'])"&gt;
                        &lt;xd:b&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:b&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="$wrapin-b"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='b'])"&gt;
                        &lt;xd:b&gt;
                            &lt;xsl:apply-templates mode="phrase" select="."&gt;
                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:b&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="."&gt;
                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='i'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='i'])"&gt;
                        &lt;xd:i&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:i&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="$wrapin-i"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='i'])"&gt;
                        &lt;xd:i&gt;
                            &lt;xsl:apply-templates mode="phrase" select="."&gt;
                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:i&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="."&gt;
                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='a'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='a'])"&gt;
                        &lt;xd:a&gt;
                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                            &lt;xsl:apply-templates mode="phrase" select="node()"&gt;
                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:a&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="$wrapin-a"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='a'])"&gt;
                        &lt;xd:a&gt;
                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                            &lt;xsl:apply-templates mode="phrase" select="."&gt;
                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:a&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="."&gt;
                            &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="self::text()"&gt;
                        &lt;xsl:copy/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;This template unwraps problematic elements into sections.&lt;/xd:short&gt;&lt;xd:param name="wasWrapped"/&gt;&lt;xd:param name="wrapin-p"/&gt;&lt;xd:param name="wrapin-ul"/&gt;&lt;xd:param name="wrapin-li"/&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="unwrap-to-sections"&gt;
        &lt;xsl:param name="wasWrapped" select="false()"/&gt;
        &lt;xsl:param name="wrapin-p" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-ul" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-li" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:variable name="element" select="."/&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="not($wasWrapped) and count(child::node()[self::* or self::text() and string-length(normalize-space())&amp;gt;0])&amp;gt;1"&gt;
                &lt;xd:section&gt;
                    &lt;xsl:call-template name="unwrap-to-sections"&gt;
                        &lt;xsl:with-param name="wasWrapped" select="true()"/&gt;
                    &lt;/xsl:call-template&gt;
                &lt;/xd:section&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
                &lt;xsl:for-each-group select="child::node()[self::* or self::text() and string-length(normalize-space())&amp;gt;0]" group-adjacent="self::* and not(ancestor::*[local-name()='pre']) and (local-name()='section' or local-name()='ul' or local-name()='li' or local-name()='pre' or local-name()='p')"&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="current-grouping-key()"&gt;
                            &lt;xsl:choose&gt;
                                &lt;xsl:when test="count(current-group())&amp;gt;1 and last()&amp;gt;1"&gt;
                                    &lt;xd:section&gt;
                                        &lt;xsl:apply-templates mode="section" select="current-group()"&gt;
                                            &lt;xsl:with-param name="wrapin-p" tunnel="yes" select="if ($wrapin-p or local-name($element)='p') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-ul" tunnel="yes" select="if ($wrapin-ul or local-name($element)='ul') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-li" tunnel="yes" select="if ($wrapin-li or local-name($element)='li') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-b" tunnel="yes" select="if ($wrapin-b or local-name($element)='b') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-i" tunnel="yes" select="if ($wrapin-i or local-name($element)='i') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-a" tunnel="yes" select="if ($wrapin-a or local-name($element)='a') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-a-elem" tunnel="yes" select="if (not($wrapin-a) and local-name($element)='a') then $element else false()"/&gt;
                                        &lt;/xsl:apply-templates&gt;
                                    &lt;/xd:section&gt;
                                &lt;/xsl:when&gt;
                                &lt;xsl:otherwise&gt;
                                    &lt;xsl:apply-templates mode="section" select="current-group()"&gt;
                                        &lt;xsl:with-param name="wrapin-p" tunnel="yes" select="if ($wrapin-p or local-name($element)='p') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-ul" tunnel="yes" select="if ($wrapin-ul or local-name($element)='ul') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-li" tunnel="yes" select="if ($wrapin-li or local-name($element)='li') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-b" tunnel="yes" select="if ($wrapin-b or local-name($element)='b') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-i" tunnel="yes" select="if ($wrapin-i or local-name($element)='i') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-a" tunnel="yes" select="if ($wrapin-a or local-name($element)='a') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-a-elem" tunnel="yes" select="if (not($wrapin-a) and local-name($element)='a') then $element else false()"/&gt;
                                    &lt;/xsl:apply-templates&gt;
                                &lt;/xsl:otherwise&gt;
                            &lt;/xsl:choose&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:element name="xd:{local-name($element)}"&gt;
                                &lt;xsl:for-each select="$element/@*"&gt;
                                    &lt;xsl:attribute name="xd:{local-name()}" select="."/&gt;
                                &lt;/xsl:for-each&gt;
                                &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                    &lt;xsl:with-param name="wrapin-p" tunnel="yes" select="if ($wrapin-p or local-name($element)='p') then false() else $wrapin-p"/&gt;
                                    &lt;xsl:with-param name="wrapin-ul" tunnel="yes" select="if ($wrapin-ul or local-name($element)='ul') then false() else $wrapin-ul"/&gt;
                                    &lt;xsl:with-param name="wrapin-li" tunnel="yes" select="if ($wrapin-li or local-name($element)='li') then false() else $wrapin-li"/&gt;
                                    &lt;xsl:with-param name="wrapin-b" tunnel="yes" select="if ($wrapin-b or local-name($element)='b') then false() else $wrapin-b"/&gt;
                                    &lt;xsl:with-param name="wrapin-i" tunnel="yes" select="if ($wrapin-i or local-name($element)='i') then false() else $wrapin-i"/&gt;
                                    &lt;xsl:with-param name="wrapin-a" tunnel="yes" select="if ($wrapin-a or local-name($element)='a') then false() else $wrapin-a"/&gt;
                                &lt;/xsl:apply-templates&gt;
                            &lt;/xsl:element&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xsl:for-each-group&gt;
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;This template unwraps problematic elements into blocks.&lt;/xd:short&gt;&lt;xd:param name="wrapin-p"/&gt;&lt;xd:param name="wrapin-ul"/&gt;&lt;xd:param name="wrapin-li"/&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="unwrap-to-blocks"&gt;
        &lt;xsl:param name="wrapin-p" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-ul" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-li" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:variable name="element" select="."/&gt;
        &lt;xsl:for-each-group select="child::node()[self::* or self::text() and string-length(normalize-space())&amp;gt;0]" group-adjacent="count(descendant-or-self::*[local-name()='ul' or local-name()='li' or local-name()='pre' or local-name()='p'])&amp;gt;0"&gt;
            &lt;xsl:choose&gt;
                &lt;xsl:when test="current-grouping-key()"&gt;
                    &lt;xsl:for-each select="current-group()"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-p" select="$wrapin-p or local-name()='p' or local-name($element)='p'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="$wrapin-ul or local-name()='ul' or local-name($element)='ul'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="$wrapin-li or local-name()='li' or local-name($element)='li'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-b" select="$wrapin-b or local-name()='b' or local-name($element)='b'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-i" select="$wrapin-i or local-name()='i' or local-name($element)='i'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-a" select="$wrapin-a or local-name()='a' or local-name($element)='a'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-a-elem" select="if (local-name()='a') then . else (if (local-name($element)='a') then $element else $wrapin-a-elem)" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:for-each&gt;
                &lt;/xsl:when&gt;
                &lt;xsl:otherwise&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="$wrapin-p"&gt;
                            &lt;xd:p&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="$wrapin-b"&gt;
                                        &lt;xd:b&gt;
                                            &lt;xsl:choose&gt;
                                                &lt;xsl:when test="$wrapin-i"&gt;
                                                  &lt;xd:i&gt;
                                                  &lt;xsl:choose&gt;
                                                  &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                  &lt;/xsl:when&gt;
                                                  &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xsl:otherwise&gt;
                                                  &lt;/xsl:choose&gt;
                                                  &lt;/xd:i&gt;
                                                &lt;/xsl:when&gt;
                                                &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                &lt;/xsl:otherwise&gt;
                                            &lt;/xsl:choose&gt;
                                        &lt;/xd:b&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:when test="$wrapin-i"&gt;
                                        &lt;xd:i&gt;
                                            &lt;xsl:choose&gt;
                                                &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                &lt;/xsl:when&gt;
                                                &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                &lt;/xsl:otherwise&gt;
                                            &lt;/xsl:choose&gt;
                                        &lt;/xd:i&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:when test="$wrapin-a"&gt;
                                        &lt;xd:a&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                            &lt;/xsl:apply-templates&gt;
                                        &lt;/xd:a&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                            &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                        &lt;/xsl:apply-templates&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xd:p&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="$wrapin-li"&gt;
                            &lt;xd:ul&gt;
                                &lt;xd:li&gt;
                                    &lt;xsl:choose&gt;
                                        &lt;xsl:when test="$wrapin-b"&gt;
                                            &lt;xd:b&gt;
                                                &lt;xsl:choose&gt;
                                                  &lt;xsl:when test="$wrapin-i"&gt;
                                                  &lt;xd:i&gt;
                                                  &lt;xsl:choose&gt;
                                                  &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                  &lt;/xsl:when&gt;
                                                  &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xsl:otherwise&gt;
                                                  &lt;/xsl:choose&gt;
                                                  &lt;/xd:i&gt;
                                                  &lt;/xsl:when&gt;
                                                  &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xsl:otherwise&gt;
                                                &lt;/xsl:choose&gt;
                                            &lt;/xd:b&gt;
                                        &lt;/xsl:when&gt;
                                        &lt;xsl:when test="$wrapin-i"&gt;
                                            &lt;xd:i&gt;
                                                &lt;xsl:choose&gt;
                                                  &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                  &lt;/xsl:when&gt;
                                                  &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xsl:otherwise&gt;
                                                &lt;/xsl:choose&gt;
                                            &lt;/xd:i&gt;
                                        &lt;/xsl:when&gt;
                                        &lt;xsl:when test="$wrapin-a"&gt;
                                            &lt;xd:a&gt;
                                                &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                &lt;/xsl:apply-templates&gt;
                                            &lt;/xd:a&gt;
                                        &lt;/xsl:when&gt;
                                        &lt;xsl:otherwise&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                            &lt;/xsl:apply-templates&gt;
                                        &lt;/xsl:otherwise&gt;
                                    &lt;/xsl:choose&gt;
                                &lt;/xd:li&gt;
                            &lt;/xd:ul&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="$wrapin-ul"&gt;
                            &lt;xd:p&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="$wrapin-b"&gt;
                                        &lt;xd:b&gt;
                                            &lt;xsl:choose&gt;
                                                &lt;xsl:when test="$wrapin-i"&gt;
                                                  &lt;xd:i&gt;
                                                  &lt;xsl:choose&gt;
                                                  &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                  &lt;/xsl:when&gt;
                                                  &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xsl:otherwise&gt;
                                                  &lt;/xsl:choose&gt;
                                                  &lt;/xd:i&gt;
                                                &lt;/xsl:when&gt;
                                                &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                &lt;/xsl:otherwise&gt;
                                            &lt;/xsl:choose&gt;
                                        &lt;/xd:b&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:when test="$wrapin-i"&gt;
                                        &lt;xd:i&gt;
                                            &lt;xsl:choose&gt;
                                                &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                &lt;/xsl:when&gt;
                                                &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                &lt;/xsl:otherwise&gt;
                                            &lt;/xsl:choose&gt;
                                        &lt;/xd:i&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:when test="$wrapin-a"&gt;
                                        &lt;xd:a&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                            &lt;/xsl:apply-templates&gt;
                                        &lt;/xd:a&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                            &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                        &lt;/xsl:apply-templates&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xd:p&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="$wrapin-b"&gt;
                            &lt;xd:b&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="$wrapin-i"&gt;
                                        &lt;xd:i&gt;
                                            &lt;xsl:choose&gt;
                                                &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                &lt;/xsl:when&gt;
                                                &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                &lt;/xsl:otherwise&gt;
                                            &lt;/xsl:choose&gt;
                                        &lt;/xd:i&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:when test="$wrapin-a"&gt;
                                        &lt;xd:a&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                            &lt;/xsl:apply-templates&gt;
                                        &lt;/xd:a&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                            &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                        &lt;/xsl:apply-templates&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xd:b&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="$wrapin-i"&gt;
                            &lt;xd:i&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="$wrapin-a"&gt;
                                        &lt;xd:a&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                            &lt;/xsl:apply-templates&gt;
                                        &lt;/xd:a&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                            &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                        &lt;/xsl:apply-templates&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xd:i&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="$wrapin-a"&gt;
                            &lt;xd:a&gt;
                                &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                    &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                &lt;/xsl:apply-templates&gt;
                            &lt;/xd:a&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xsl:otherwise&gt;
            &lt;/xsl:choose&gt;
        &lt;/xsl:for-each-group&gt;
    &lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;&lt;/codeblock&gt;
    &lt;xsl:template match="@*|node()"&gt;
        &lt;xsl:copy&gt;
            &lt;xsl:apply-templates select="@*|node()"/&gt;
        &lt;/xsl:copy&gt;
    &lt;/xsl:template&gt;

    &lt;codeblock&gt;&lt;xsl:stylesheet version="2.0"&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Identity template.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template match="@*|node()"&gt;
        &lt;xsl:copy&gt;
            &lt;xsl:apply-templates select="@*|node()"/&gt;
        &lt;/xsl:copy&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Matches each xd:doc element.&lt;/xd:short&gt;&lt;xd:detail&gt;
        
        Determines what code is being documented and calls appropriate templates for: &lt;xd:ul&gt;
                &lt;xd:li&gt;short description (xd:short)&lt;/xd:li&gt;
                &lt;xd:li&gt;detailed description (xd:detail)&lt;/xd:li&gt;
                &lt;xd:li&gt;authors (xd:author)&lt;/xd:li&gt;
                &lt;xd:li&gt;contributors (xd:contributor)&lt;/xd:li&gt;
                &lt;xd:li&gt;maintainers (xd:maintainer)&lt;/xd:li&gt;
                &lt;xd:li&gt;copyright (xd:copyright)&lt;/xd:li&gt;
                &lt;xd:li&gt;version (xd:version)&lt;/xd:li&gt;
                &lt;xd:li&gt;code existed since version (xd:since)&lt;/xd:li&gt;
                &lt;xd:li&gt;see also (xd:see)&lt;/xd:li&gt;
                &lt;xd:li&gt;deprecated since version (xd:deprecated)&lt;/xd:li&gt;
                &lt;xd:li&gt;import statements (xd:import and xsl:import)&lt;/xd:li&gt;
                &lt;xd:li&gt;include statements (xd:include and xsl:include)&lt;/xd:li&gt;
                &lt;xd:li&gt;parameters (xd:param and xsl:param)&lt;/xd:li&gt;
                &lt;xd:li&gt;return values / output (xd:return)&lt;/xd:li&gt;
            &lt;/xd:ul&gt;
        
        
    &lt;/xd:detail&gt;&lt;xd:return&gt;The normalized xd:doc.&lt;/xd:return&gt;&lt;/xd:doc&gt;
    &lt;xsl:template match="xd:doc"&gt;
        &lt;xsl:copy&gt;
            &lt;xsl:variable name="target"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="@target"&gt;
                        &lt;xsl:value-of select="@target"/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="count(preceding-sibling::*)=0"&gt;
                        &lt;xsl:value-of select="'parent'"/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:value-of select="'following'"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:variable&gt;
            &lt;xsl:variable name="code" select="if ($target='parent') then parent::* else following-sibling::*[1]"/&gt;

            &lt;xsl:attribute name="target" select="$target"/&gt;

            &lt;xsl:call-template name="short"/&gt;
            &lt;xsl:call-template name="detail"/&gt;
            &lt;xsl:call-template name="authors"/&gt;
            &lt;xsl:call-template name="contributors"/&gt;
            &lt;xsl:call-template name="maintainers"/&gt;
            &lt;xsl:call-template name="copyright"/&gt;
            &lt;xsl:call-template name="version"/&gt;
            &lt;xsl:call-template name="since"/&gt;
            &lt;xsl:call-template name="see"/&gt;
            &lt;xsl:call-template name="deprecated"/&gt;
            &lt;xsl:call-template name="import"&gt;
                &lt;xsl:with-param name="code" select="$code"/&gt;
            &lt;/xsl:call-template&gt;
            &lt;xsl:call-template name="include"&gt;
                &lt;xsl:with-param name="code" select="$code"/&gt;
            &lt;/xsl:call-template&gt;
            &lt;xsl:call-template name="param"&gt;
                &lt;xsl:with-param name="code" select="$code"/&gt;
            &lt;/xsl:call-template&gt;
            &lt;xsl:call-template name="return"/&gt;
        &lt;/xsl:copy&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Determines the short description.&lt;/xd:short&gt;&lt;xd:detail&gt;
        
        
            &lt;xd:ul&gt;
                &lt;xd:li&gt;If there is no &amp;lt;xd:short/&amp;gt;-element present, but plain text is present as a
                    child of the &amp;lt;xd:doc/&amp;gt;element, then the first sentence from that text (up
                    until the first period (".") will be used as a short description.&lt;/xd:li&gt;
                &lt;xd:li&gt;Else; if there are multiple &amp;lt;xd:short/&amp;gt;-elements, each one of their
                    contents will be wrapped in separate &amp;lt;section/&amp;gt;s.&lt;/xd:li&gt;
                &lt;xd:li&gt;Else; use the one &amp;lt;xd:short/&amp;gt;-element that is present for the short
                    description.&lt;/xd:li&gt;
            &lt;/xd:ul&gt;
        
    &lt;/xd:detail&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="short"&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="count(child::*[local-name()='short'])&amp;gt;1"&gt;
                &lt;xd:short&gt;
                    &lt;xsl:for-each select="child::*[local-name()='short']"&gt;
                        &lt;xd:section&gt;
                            &lt;xsl:apply-templates mode="section"/&gt;
                        &lt;/xd:section&gt;
                    &lt;/xsl:for-each&gt;
                &lt;/xd:short&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="count(child::*[local-name()='short'])=1"&gt;
                &lt;xd:short&gt;
                    &lt;xsl:apply-templates select="child::*[local-name()='short']/node()" mode="section"/&gt;
                &lt;/xd:short&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="child::text()[string-length(normalize-space())&amp;gt;0]"&gt;
                &lt;xsl:variable name="short" select="replace(normalize-space(child::text()[1]),'^([^\.]+\.?)\s?.*$','$1')"/&gt;
                &lt;xd:short&gt;
                    &lt;xsl:value-of select="$short"/&gt;
                &lt;/xd:short&gt;
            &lt;/xsl:when&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Determines the detailed description.&lt;/xd:short&gt;&lt;xd:detail&gt;
        
        The detailed description will be put together based on any number of
            &amp;lt;xd:detail/&amp;gt;-elements, as well as any number of text nodes that are direct
            children of the &amp;lt;xd:doc/&amp;gt;-element. If the xd:short was extracted from the first
            text node, then the first sentence from that text node will be ignored. If there are
            multiple &amp;lt;xd:detail/&amp;gt; and text nodes, then each of them will be wrapped in
            &amp;lt;xd:section/&amp;gt;s.
    &lt;/xd:detail&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="detail"&gt;
        &lt;xsl:variable name="shortInFirstText" select="count(./*[local-name()='short'])=0"/&gt;
        &lt;xsl:variable name="detailCount" select="(if (matches(normalize-space(./text()[1]),'\.[^\.].')) then 1 else 0) + count(*[local-name()='detail' and (descendant-or-self::node()[self::text() and string-length(normalize-space())&amp;gt;0 or local-name()='pre' and not(ancestor::*[local-name()='pre'])])]) + count(./text()[not(position()=1) and string-length(normalize-space())&amp;gt;0])"/&gt;
        &lt;xsl:if test="$detailCount&amp;gt;0"&gt;
            &lt;xd:detail&gt;
                &lt;xsl:for-each select="*|text()"&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="self::text() and count(preceding-sibling::text()[string-length(normalize-space())&amp;gt;0])=0"&gt;
                            &lt;!-- first text --&gt;
                            &lt;xsl:choose&gt;
                                &lt;xsl:when test="$shortInFirstText"&gt;
                                    &lt;xsl:variable name="detail" select="replace(normalize-space(),'^[^\.]+.?\s?(.*)$','$1')"/&gt;
                                    &lt;xsl:choose&gt;
                                        &lt;xsl:when test="$detailCount&amp;gt;1"&gt;
                                            &lt;xd:section&gt;
                                                &lt;xsl:value-of select="$detail"/&gt;
                                            &lt;/xd:section&gt;
                                        &lt;/xsl:when&gt;
                                        &lt;xsl:otherwise&gt;
                                            &lt;xsl:value-of select="$detail"/&gt;
                                        &lt;/xsl:otherwise&gt;
                                    &lt;/xsl:choose&gt;
                                &lt;/xsl:when&gt;
                                &lt;xsl:otherwise&gt;
                                    &lt;xsl:choose&gt;
                                        &lt;xsl:when test="$detailCount&amp;gt;1"&gt;
                                            &lt;xd:section&gt;
                                                &lt;xsl:value-of select="."/&gt;
                                            &lt;/xd:section&gt;
                                        &lt;/xsl:when&gt;
                                        &lt;xsl:otherwise&gt;
                                            &lt;xsl:value-of select="."/&gt;
                                        &lt;/xsl:otherwise&gt;
                                    &lt;/xsl:choose&gt;
                                &lt;/xsl:otherwise&gt;
                            &lt;/xsl:choose&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="self::text()"&gt;
                            &lt;!-- non-first text --&gt;
                            &lt;xsl:choose&gt;
                                &lt;xsl:when test="$detailCount&amp;gt;1"&gt;
                                    &lt;xd:section&gt;
                                        &lt;xsl:value-of select="."/&gt;
                                    &lt;/xd:section&gt;
                                &lt;/xsl:when&gt;
                                &lt;xsl:otherwise&gt;
                                    &lt;xsl:value-of select="."/&gt;
                                &lt;/xsl:otherwise&gt;
                            &lt;/xsl:choose&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="local-name()='detail'"&gt;
                            &lt;!-- detail element --&gt;
                            &lt;xsl:choose&gt;
                                &lt;xsl:when test="$detailCount&amp;gt;1"&gt;
                                    &lt;xd:section&gt;
                                        &lt;xsl:apply-templates select="child::node()" mode="section"/&gt;
                                    &lt;/xd:section&gt;
                                &lt;/xsl:when&gt;
                                &lt;xsl:otherwise&gt;
                                    &lt;xsl:apply-templates select="child::node()" mode="section"/&gt;
                                &lt;/xsl:otherwise&gt;
                            &lt;/xsl:choose&gt;
                        &lt;/xsl:when&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xsl:for-each&gt;
            &lt;/xd:detail&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes the xd:author-elements.&lt;/xd:short&gt;&lt;xd:detail&gt;&amp;gt;xd:author/&amp;lt;s with no text are removed. &amp;lt;xd:author/&amp;gt;s with no child elements will have their text content wrapped in a &amp;lt;xd:name/&amp;gt; element. Children other than xd:name, xd:mailto and xd:organization are ignored.&lt;/xd:detail&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="authors" xml:id="authors"&gt;
        &lt;xsl:for-each select="*[local-name()='author']"&gt;
            &lt;xsl:variable name="is-empty" select="count(descendant-or-self::text()[string-length(normalize-space())&amp;gt;0])=0"/&gt;
            &lt;xsl:if test="not($is-empty)"&gt;
                &lt;xd:author&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="count(child::*)=0"&gt;
                            &lt;xd:name&gt;
                                &lt;xsl:value-of select="."/&gt;
                            &lt;/xd:name&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:if test="child::*[local-name()='name']"&gt;
                                &lt;xd:name&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='name']"/&gt;
                                &lt;/xd:name&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='mailto']"&gt;
                                &lt;xd:mailto&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='mailto']"/&gt;
                                &lt;/xd:mailto&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='organization']"&gt;
                                &lt;xd:organization&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='organization']"/&gt;
                                &lt;/xd:organization&gt;
                            &lt;/xsl:if&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xd:author&gt;
            &lt;/xsl:if&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;&amp;lt;xd:contributor/&amp;gt;s are normalized in the same way as &amp;lt;xd:author/&amp;gt;s&lt;/xd:short&gt;&lt;xd:see&gt;#authors&lt;/xd:see&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="contributors"&gt;
        &lt;xsl:for-each select="*[local-name()='contributor']"&gt;
            &lt;xsl:variable name="is-empty" select="count(descendant-or-self::text()[string-length(normalize-space())&amp;gt;0])=0"/&gt;
            &lt;xsl:if test="not($is-empty)"&gt;
                &lt;xd:contributor&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="count(child::*)=0"&gt;
                            &lt;xd:name&gt;
                                &lt;xsl:value-of select="."/&gt;
                            &lt;/xd:name&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:if test="child::*[local-name()='name']"&gt;
                                &lt;xd:name&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='name']"/&gt;
                                &lt;/xd:name&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='mailto']"&gt;
                                &lt;xd:mailto&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='mailto']"/&gt;
                                &lt;/xd:mailto&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='organization']"&gt;
                                &lt;xd:organization&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='organization']"/&gt;
                                &lt;/xd:organization&gt;
                            &lt;/xsl:if&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xd:contributor&gt;
            &lt;/xsl:if&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;&amp;lt;xd:maintainer/&amp;gt;s are normalized in the same way as &amp;lt;xd:author/&amp;gt;s&lt;/xd:short&gt;&lt;xd:see&gt;#authors&lt;/xd:see&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="maintainers"&gt;
        &lt;xsl:for-each select="*[local-name()='maintainer']"&gt;
            &lt;xsl:variable name="is-empty" select="count(descendant-or-self::text()[string-length(normalize-space())&amp;gt;0])=0"/&gt;
            &lt;xsl:if test="not($is-empty)"&gt;
                &lt;xd:maintainer&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="count(child::*)=0"&gt;
                            &lt;xd:name&gt;
                                &lt;xsl:value-of select="."/&gt;
                            &lt;/xd:name&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:if test="child::*[local-name()='name']"&gt;
                                &lt;xd:name&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='name']"/&gt;
                                &lt;/xd:name&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='mailto']"&gt;
                                &lt;xd:mailto&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='mailto']"/&gt;
                                &lt;/xd:mailto&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='organization']"&gt;
                                &lt;xd:organization&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='organization']"/&gt;
                                &lt;/xd:organization&gt;
                            &lt;/xsl:if&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xd:maintainer&gt;
            &lt;/xsl:if&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes the xd:copyright-element.&lt;/xd:short&gt;&lt;xd:detail&gt;&amp;gt;xd:copyright/&amp;lt;s with no text are removed. &amp;lt;xd:copyright/&amp;gt;s with no child elements will have their text content wrapped in a &amp;lt;xd:name/&amp;gt; element. Children other than xd:year, xd:name, xd:mailto and xd:organization are ignored.&lt;/xd:detail&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="copyright"&gt;
        &lt;xsl:for-each select="*[local-name()='copyright']"&gt;
            &lt;xsl:variable name="is-empty" select="count(descendant-or-self::text()[string-length(normalize-space())&amp;gt;0])=0"/&gt;
            &lt;xsl:if test="not($is-empty)"&gt;
                &lt;xd:copyright&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="count(child::*)=0"&gt;
                            &lt;xd:name&gt;
                                &lt;xsl:value-of select="."/&gt;
                            &lt;/xd:name&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:if test="child::*[local-name()='year']"&gt;
                                &lt;xd:year&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='year']"/&gt;
                                &lt;/xd:year&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='name']"&gt;
                                &lt;xd:name&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='name']"/&gt;
                                &lt;/xd:name&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='mailto']"&gt;
                                &lt;xd:mailto&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='mailto']"/&gt;
                                &lt;/xd:mailto&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='organization']"&gt;
                                &lt;xd:organization&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='organization']"/&gt;
                                &lt;/xd:organization&gt;
                            &lt;/xsl:if&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xd:copyright&gt;
            &lt;/xsl:if&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:version elements.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="version"&gt;
        &lt;xsl:if test="child::*[local-name()='version' and string-length(normalize-space(./text()))&amp;gt;0]"&gt;
            &lt;xd:version&gt;
                &lt;xsl:value-of select="child::*[local-name()='version' and string-length(normalize-space(./text()))&amp;gt;0]"/&gt;
            &lt;/xd:version&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:since elements.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="since"&gt;
        &lt;xsl:if test="child::*[local-name()='since' and string-length(normalize-space(./text()))&amp;gt;0]"&gt;
            &lt;xd:since&gt;
                &lt;xsl:value-of select="child::*[local-name()='since' and string-length(normalize-space(./text()))&amp;gt;0]"/&gt;
            &lt;/xd:since&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:see elements.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="see"&gt;
        &lt;xsl:if test="child::*[local-name()='see' and string-length(normalize-space(./text()))&amp;gt;0]"&gt;
            &lt;xd:see&gt;
                &lt;xsl:value-of select="child::*[local-name()='see' and string-length(normalize-space(./text()))&amp;gt;0]"/&gt;
            &lt;/xd:see&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:deprecated elements.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="deprecated"&gt;
        &lt;xsl:if test="child::*[local-name()='deprecated' and string-length(normalize-space(./text()))&amp;gt;0]"&gt;
            &lt;xd:deprecated&gt;
                &lt;xsl:value-of select="child::*[local-name()='deprecated' and string-length(normalize-space(./text()))&amp;gt;0]"/&gt;
            &lt;/xd:deprecated&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:import elements.&lt;/xd:short&gt;&lt;xd:detail&gt;Will create empty documentation for imports that are not documented, and removes documentation of imports that does not exist in the code.&lt;/xd:detail&gt;&lt;xd:param name="code"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="import"&gt;
        &lt;xsl:param name="code" required="yes"/&gt;
        &lt;xsl:variable name="doc" select="."/&gt;
        &lt;xsl:for-each select="$code/xsl:import"&gt;
            &lt;xsl:variable name="href" select="@href"/&gt;
            &lt;xd:import href="{@href}"&gt;
                &lt;xsl:if test="$doc/*[local-name()='import' and @href=$href]"&gt;
                    &lt;xsl:value-of select="$doc/*[local-name()='import' and @href=$href]"/&gt;
                &lt;/xsl:if&gt;
            &lt;/xd:import&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:include elements.&lt;/xd:short&gt;&lt;xd:detail&gt;Will create empty documentation for includes that are not documented, and removes documentation of includes that does not exist in the code.&lt;/xd:detail&gt;&lt;xd:param name="code"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="include"&gt;
        &lt;xsl:param name="code" required="yes"/&gt;
        &lt;xsl:variable name="doc" select="."/&gt;
        &lt;xsl:for-each select="$code/xsl:include"&gt;
            &lt;xsl:variable name="href" select="@href"/&gt;
            &lt;xd:include href="{@href}"&gt;
                &lt;xsl:if test="$doc/*[local-name()='include' and @href=$href]"&gt;
                    &lt;xsl:value-of select="$doc/*[local-name()='include' and @href=$href]"/&gt;
                &lt;/xsl:if&gt;
            &lt;/xd:include&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:import elements.&lt;/xd:short&gt;&lt;xd:detail&gt;Will create empty documentation for imports that are not documented, and removes documentation of imports that does not exist in the code.&lt;/xd:detail&gt;&lt;xd:param name="code"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="param"&gt;
        &lt;xsl:param name="code" required="yes"/&gt;
        &lt;xsl:variable name="doc" select="."/&gt;
        &lt;xsl:for-each select="*[local-name()='param']"&gt;
            &lt;xd:param&gt;
                &lt;xsl:apply-templates select="@*"/&gt;
                &lt;xsl:apply-templates mode="section" select="node()"/&gt;
            &lt;/xd:param&gt;
        &lt;/xsl:for-each&gt;
        &lt;xsl:for-each select="$code/xsl:param"&gt;
            &lt;xsl:variable name="name" select="@name"/&gt;
            &lt;xsl:if test="not($doc/*[local-name()='param' and @name=$name])"&gt;
                &lt;xd:param name="{@name}"/&gt;
            &lt;/xsl:if&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Describes the result of the code.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="return"&gt;
        &lt;xsl:variable name="is-empty" select="count(*[local-name()='return']/descendant-or-self::node()[self::text() and string-length(normalize-space())&amp;gt;0 or local-name()='pre'])=0"/&gt;
        &lt;xsl:if test="not($is-empty)"&gt;
            &lt;xd:return&gt;
                &lt;xsl:apply-templates mode="section" select="*[local-name()='return']/node()"/&gt;
            &lt;/xd:return&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Matches all elements when in "section"-mode.&lt;/xd:short&gt;&lt;xd:detail&gt;
        
        Checks all child elements and their descendants and wraps and handles as is
            appropriate. If a child or descendant is placed in a problematic position, then one of
            the unwrap*-templates are called to solve the problem. Otherwise, just make sure that
            the element is in the correct namespace and copy it.
    &lt;/xd:detail&gt;&lt;xd:param name="wrapin-p"/&gt;&lt;xd:param name="wrapin-ul"/&gt;&lt;xd:param name="wrapin-li"/&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template mode="section" match="@*|node()"&gt;
        &lt;xsl:param name="wrapin-p" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-ul" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-li" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:variable name="is-empty" select="count(descendant-or-self::node()[self::text() and string-length(normalize-space())&amp;gt;0 or local-name()='pre'])=0"/&gt;
        &lt;xsl:variable name="contains-section" select="count(descendant::*[local-name()='section'])&amp;gt;0"/&gt;
        &lt;xsl:variable name="contains-block" select="count(descendant::*[local-name()='ul' or local-name()='li' or local-name()='pre' or local-name()='p'])&amp;gt;0"/&gt;
        &lt;xsl:variable name="contains-block-non-li" select="count(descendant::*[local-name()='ul' or local-name()='pre' or local-name()='p'])&amp;gt;0"/&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="local-name()='section'"&gt;
                &lt;xd:section&gt;
                    &lt;xsl:apply-templates mode="section" select="@*|node()"/&gt;
                &lt;/xd:section&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='p'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$contains-section or $contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-p" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:p&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:p&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='pre'"&gt;
                &lt;xd:pre&gt;
                    &lt;xsl:copy-of select="@*|node()"/&gt;
                &lt;/xd:pre&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='ul'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-section"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$contains-block-non-li"&gt;
                        &lt;xd:section&gt;
                            &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                                &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                            &lt;/xsl:call-template&gt;
                        &lt;/xd:section&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="count(descendant::*[local-name()='li'])=0"&gt;
                        &lt;xsl:choose&gt;
                            &lt;xsl:when test="count(child::node()[self::* or self::text() and string-length(normalize-space())&amp;gt;0])&amp;gt;1"&gt;
                                &lt;xd:section&gt;
                                    &lt;xsl:apply-templates mode="section" select="@*|node()"&gt;
                                        &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                                        &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                                    &lt;/xsl:apply-templates&gt;
                                &lt;/xd:section&gt;
                            &lt;/xsl:when&gt;
                            &lt;xsl:otherwise&gt;
                                &lt;xsl:apply-templates mode="section" select="@*|node()"&gt;
                                    &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                                &lt;/xsl:apply-templates&gt;
                            &lt;/xsl:otherwise&gt;
                        &lt;/xsl:choose&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:ul&gt;
                            &lt;xsl:apply-templates mode="list" select="@*|node()"&gt;
                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:ul&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='li'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-section"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:ul&gt;
                            &lt;xd:li&gt;
                                &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                            &lt;/xd:li&gt;
                        &lt;/xd:ul&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='b'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-section"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-b" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-b" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:b&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:b&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='i'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-section"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-i" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-i" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:i&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:i&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='a'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-section"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-a" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-a-elem" select="." tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-a" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-a-elem" select="." tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:a&gt;
                            &lt;xsl:apply-templates select="@*"/&gt;
                            &lt;xsl:apply-templates mode="phrase" select="node()"/&gt;
                        &lt;/xd:a&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="self::*"&gt;
                        &lt;xsl:choose&gt;
                            &lt;xsl:when test="not(preceding-sibling::*) and not(following-sibling::*)"&gt;
                                &lt;xsl:apply-templates mode="section" select="@*|node()"/&gt;
                            &lt;/xsl:when&gt;
                            &lt;xsl:otherwise&gt;
                                &lt;xd:section&gt;
                                    &lt;xsl:apply-templates mode="section" select="@*|node()"/&gt;
                                &lt;/xd:section&gt;
                            &lt;/xsl:otherwise&gt;
                        &lt;/xsl:choose&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="self::text()"&gt;
                        &lt;xsl:copy/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="section" select="@*|node()"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Handles non-problematic lists.&lt;/xd:short&gt;&lt;xd:param name="wrapin-p"/&gt;&lt;xd:param name="wrapin-ul"/&gt;&lt;xd:param name="wrapin-li"/&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template mode="list" match="@*|node()"&gt;
        &lt;xsl:param name="wrapin-p" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-ul" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-li" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:variable name="is-empty" select="count(descendant-or-self::node()[self::text() and string-length(normalize-space())&amp;gt;0 or local-name()='pre'])=0"/&gt;
        &lt;xsl:variable name="contains-block" select="count(descendant::*[local-name()='ul' or local-name()='li' or local-name()='pre' or local-name()='p'])&amp;gt;0"/&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="local-name()='li'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$wrapin-ul"&gt;
                        &lt;xd:ul&gt;
                            &lt;xd:li&gt;
                                &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                            &lt;/xd:li&gt;
                        &lt;/xd:ul&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:li&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:li&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="self::text()"&gt;
                        &lt;xsl:copy/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="list" select="@*|node()"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Handles all elements when in "block" mode and applies fixes where needed.&lt;/xd:short&gt;&lt;xd:param name="wrapin-p"/&gt;&lt;xd:param name="wrapin-ul"/&gt;&lt;xd:param name="wrapin-li"/&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template mode="block" match="@*|node()"&gt;
        &lt;xsl:param name="wrapin-p" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-ul" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-li" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:variable name="element" select="."/&gt;
        &lt;xsl:variable name="is-empty" select="count(descendant-or-self::node()[self::* or self::text() and string-length(normalize-space())&amp;gt;0])=0"/&gt;
        &lt;xsl:variable name="contains-block" select="count(descendant::*[local-name()='ul' or local-name()='li' or local-name()='pre' or local-name()='p'])&amp;gt;0"/&gt;
        &lt;xsl:variable name="contains-block-non-li" select="count(descendant::*[local-name()='ul' or local-name()='pre' or local-name()='p'])&amp;gt;0"/&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="local-name()='p'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:p&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:p&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='pre'"&gt;
                &lt;xd:pre&gt;
                    &lt;xsl:copy-of select="@*|node()"/&gt;
                &lt;/xd:pre&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='ul'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block-non-li"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="count(descendant::*[local-name()='li' and string-length(normalize-space(descendant-or-self::text()))&amp;gt;0])=0"&gt;
                        &lt;xsl:apply-templates mode="block" select="@*|node()"/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:ul&gt;
                            &lt;xsl:apply-templates mode="list" select="@*|node()"&gt;
                                &lt;xsl:with-param name="wrapin-ul" select="false()"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:ul&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='li'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:ul&gt;
                            &lt;xd:li&gt;
                                &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                                    &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                &lt;/xsl:apply-templates&gt;
                            &lt;/xd:li&gt;
                        &lt;/xd:ul&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="not($contains-block) and $wrapin-p"&gt;
                &lt;xd:p&gt;
                    &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                        &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                        &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                        &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                    &lt;/xsl:apply-templates&gt;
                &lt;/xd:p&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="not($contains-block) and $wrapin-li"&gt;
                &lt;xd:ul&gt;
                    &lt;xd:li&gt;
                        &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                            &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xd:li&gt;
                &lt;/xd:ul&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='b'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-b" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:b&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:b&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='i'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-i" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:i&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:i&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='a'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-a" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-a-elem" select="$element" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:a&gt;
                            &lt;xsl:apply-templates mode="phrase" select="$element/@*"/&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:a&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="self::text()"&gt;
                        &lt;xsl:copy/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="block" select="@*|node()"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Phrases are matched with this template (mode="phrase") and handled appropriately.&lt;/xd:short&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template mode="phrase" match="@*|node()"&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="local-name()='b'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='b'])"&gt;
                        &lt;xd:b&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:b&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="$wrapin-b"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='b'])"&gt;
                        &lt;xd:b&gt;
                            &lt;xsl:apply-templates mode="phrase" select="."&gt;
                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:b&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="."&gt;
                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='i'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='i'])"&gt;
                        &lt;xd:i&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:i&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="$wrapin-i"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='i'])"&gt;
                        &lt;xd:i&gt;
                            &lt;xsl:apply-templates mode="phrase" select="."&gt;
                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:i&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="."&gt;
                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='a'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='a'])"&gt;
                        &lt;xd:a&gt;
                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                            &lt;xsl:apply-templates mode="phrase" select="node()"&gt;
                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:a&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="$wrapin-a"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='a'])"&gt;
                        &lt;xd:a&gt;
                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                            &lt;xsl:apply-templates mode="phrase" select="."&gt;
                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:a&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="."&gt;
                            &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="self::text()"&gt;
                        &lt;xsl:copy/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;This template unwraps problematic elements into sections.&lt;/xd:short&gt;&lt;xd:param name="wasWrapped"/&gt;&lt;xd:param name="wrapin-p"/&gt;&lt;xd:param name="wrapin-ul"/&gt;&lt;xd:param name="wrapin-li"/&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="unwrap-to-sections"&gt;
        &lt;xsl:param name="wasWrapped" select="false()"/&gt;
        &lt;xsl:param name="wrapin-p" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-ul" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-li" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:variable name="element" select="."/&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="not($wasWrapped) and count(child::node()[self::* or self::text() and string-length(normalize-space())&amp;gt;0])&amp;gt;1"&gt;
                &lt;xd:section&gt;
                    &lt;xsl:call-template name="unwrap-to-sections"&gt;
                        &lt;xsl:with-param name="wasWrapped" select="true()"/&gt;
                    &lt;/xsl:call-template&gt;
                &lt;/xd:section&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
                &lt;xsl:for-each-group select="child::node()[self::* or self::text() and string-length(normalize-space())&amp;gt;0]" group-adjacent="self::* and not(ancestor::*[local-name()='pre']) and (local-name()='section' or local-name()='ul' or local-name()='li' or local-name()='pre' or local-name()='p')"&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="current-grouping-key()"&gt;
                            &lt;xsl:choose&gt;
                                &lt;xsl:when test="count(current-group())&amp;gt;1 and last()&amp;gt;1"&gt;
                                    &lt;xd:section&gt;
                                        &lt;xsl:apply-templates mode="section" select="current-group()"&gt;
                                            &lt;xsl:with-param name="wrapin-p" tunnel="yes" select="if ($wrapin-p or local-name($element)='p') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-ul" tunnel="yes" select="if ($wrapin-ul or local-name($element)='ul') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-li" tunnel="yes" select="if ($wrapin-li or local-name($element)='li') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-b" tunnel="yes" select="if ($wrapin-b or local-name($element)='b') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-i" tunnel="yes" select="if ($wrapin-i or local-name($element)='i') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-a" tunnel="yes" select="if ($wrapin-a or local-name($element)='a') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-a-elem" tunnel="yes" select="if (not($wrapin-a) and local-name($element)='a') then $element else false()"/&gt;
                                        &lt;/xsl:apply-templates&gt;
                                    &lt;/xd:section&gt;
                                &lt;/xsl:when&gt;
                                &lt;xsl:otherwise&gt;
                                    &lt;xsl:apply-templates mode="section" select="current-group()"&gt;
                                        &lt;xsl:with-param name="wrapin-p" tunnel="yes" select="if ($wrapin-p or local-name($element)='p') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-ul" tunnel="yes" select="if ($wrapin-ul or local-name($element)='ul') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-li" tunnel="yes" select="if ($wrapin-li or local-name($element)='li') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-b" tunnel="yes" select="if ($wrapin-b or local-name($element)='b') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-i" tunnel="yes" select="if ($wrapin-i or local-name($element)='i') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-a" tunnel="yes" select="if ($wrapin-a or local-name($element)='a') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-a-elem" tunnel="yes" select="if (not($wrapin-a) and local-name($element)='a') then $element else false()"/&gt;
                                    &lt;/xsl:apply-templates&gt;
                                &lt;/xsl:otherwise&gt;
                            &lt;/xsl:choose&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:element name="xd:{local-name($element)}"&gt;
                                &lt;xsl:for-each select="$element/@*"&gt;
                                    &lt;xsl:attribute name="xd:{local-name()}" select="."/&gt;
                                &lt;/xsl:for-each&gt;
                                &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                    &lt;xsl:with-param name="wrapin-p" tunnel="yes" select="if ($wrapin-p or local-name($element)='p') then false() else $wrapin-p"/&gt;
                                    &lt;xsl:with-param name="wrapin-ul" tunnel="yes" select="if ($wrapin-ul or local-name($element)='ul') then false() else $wrapin-ul"/&gt;
                                    &lt;xsl:with-param name="wrapin-li" tunnel="yes" select="if ($wrapin-li or local-name($element)='li') then false() else $wrapin-li"/&gt;
                                    &lt;xsl:with-param name="wrapin-b" tunnel="yes" select="if ($wrapin-b or local-name($element)='b') then false() else $wrapin-b"/&gt;
                                    &lt;xsl:with-param name="wrapin-i" tunnel="yes" select="if ($wrapin-i or local-name($element)='i') then false() else $wrapin-i"/&gt;
                                    &lt;xsl:with-param name="wrapin-a" tunnel="yes" select="if ($wrapin-a or local-name($element)='a') then false() else $wrapin-a"/&gt;
                                &lt;/xsl:apply-templates&gt;
                            &lt;/xsl:element&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xsl:for-each-group&gt;
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;This template unwraps problematic elements into blocks.&lt;/xd:short&gt;&lt;xd:param name="wrapin-p"/&gt;&lt;xd:param name="wrapin-ul"/&gt;&lt;xd:param name="wrapin-li"/&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="unwrap-to-blocks"&gt;
        &lt;xsl:param name="wrapin-p" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-ul" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-li" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:variable name="element" select="."/&gt;
        &lt;xsl:for-each-group select="child::node()[self::* or self::text() and string-length(normalize-space())&amp;gt;0]" group-adjacent="count(descendant-or-self::*[local-name()='ul' or local-name()='li' or local-name()='pre' or local-name()='p'])&amp;gt;0"&gt;
            &lt;xsl:choose&gt;
                &lt;xsl:when test="current-grouping-key()"&gt;
                    &lt;xsl:for-each select="current-group()"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-p" select="$wrapin-p or local-name()='p' or local-name($element)='p'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="$wrapin-ul or local-name()='ul' or local-name($element)='ul'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="$wrapin-li or local-name()='li' or local-name($element)='li'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-b" select="$wrapin-b or local-name()='b' or local-name($element)='b'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-i" select="$wrapin-i or local-name()='i' or local-name($element)='i'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-a" select="$wrapin-a or local-name()='a' or local-name($element)='a'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-a-elem" select="if (local-name()='a') then . else (if (local-name($element)='a') then $element else $wrapin-a-elem)" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:for-each&gt;
                &lt;/xsl:when&gt;
                &lt;xsl:otherwise&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="$wrapin-p"&gt;
                            &lt;xd:p&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="$wrapin-b"&gt;
                                        &lt;xd:b&gt;
                                            &lt;xsl:choose&gt;
                                                &lt;xsl:when test="$wrapin-i"&gt;
                                                  &lt;xd:i&gt;
                                                  &lt;xsl:choose&gt;
                                                  &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                  &lt;/xsl:when&gt;
                                                  &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xsl:otherwise&gt;
                                                  &lt;/xsl:choose&gt;
                                                  &lt;/xd:i&gt;
                                                &lt;/xsl:when&gt;
                                                &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                &lt;/xsl:otherwise&gt;
                                            &lt;/xsl:choose&gt;
                                        &lt;/xd:b&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:when test="$wrapin-i"&gt;
                                        &lt;xd:i&gt;
                                            &lt;xsl:choose&gt;
                                                &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                &lt;/xsl:when&gt;
                                                &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                &lt;/xsl:otherwise&gt;
                                            &lt;/xsl:choose&gt;
                                        &lt;/xd:i&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:when test="$wrapin-a"&gt;
                                        &lt;xd:a&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                            &lt;/xsl:apply-templates&gt;
                                        &lt;/xd:a&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                            &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                        &lt;/xsl:apply-templates&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xd:p&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="$wrapin-li"&gt;
                            &lt;xd:ul&gt;
                                &lt;xd:li&gt;
                                    &lt;xsl:choose&gt;
                                        &lt;xsl:when test="$wrapin-b"&gt;
                                            &lt;xd:b&gt;
                                                &lt;xsl:choose&gt;
                                                  &lt;xsl:when test="$wrapin-i"&gt;
                                                  &lt;xd:i&gt;
                                                  &lt;xsl:choose&gt;
                                                  &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                  &lt;/xsl:when&gt;
                                                  &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xsl:otherwise&gt;
                                                  &lt;/xsl:choose&gt;
                                                  &lt;/xd:i&gt;
                                                  &lt;/xsl:when&gt;
                                                  &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xsl:otherwise&gt;
                                                &lt;/xsl:choose&gt;
                                            &lt;/xd:b&gt;
                                        &lt;/xsl:when&gt;
                                        &lt;xsl:when test="$wrapin-i"&gt;
                                            &lt;xd:i&gt;
                                                &lt;xsl:choose&gt;
                                                  &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                  &lt;/xsl:when&gt;
                                                  &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xsl:otherwise&gt;
                                                &lt;/xsl:choose&gt;
                                            &lt;/xd:i&gt;
                                        &lt;/xsl:when&gt;
                                        &lt;xsl:when test="$wrapin-a"&gt;
                                            &lt;xd:a&gt;
                                                &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                &lt;/xsl:apply-templates&gt;
                                            &lt;/xd:a&gt;
                                        &lt;/xsl:when&gt;
                                        &lt;xsl:otherwise&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                            &lt;/xsl:apply-templates&gt;
                                        &lt;/xsl:otherwise&gt;
                                    &lt;/xsl:choose&gt;
                                &lt;/xd:li&gt;
                            &lt;/xd:ul&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="$wrapin-ul"&gt;
                            &lt;xd:p&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="$wrapin-b"&gt;
                                        &lt;xd:b&gt;
                                            &lt;xsl:choose&gt;
                                                &lt;xsl:when test="$wrapin-i"&gt;
                                                  &lt;xd:i&gt;
                                                  &lt;xsl:choose&gt;
                                                  &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                  &lt;/xsl:when&gt;
                                                  &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xsl:otherwise&gt;
                                                  &lt;/xsl:choose&gt;
                                                  &lt;/xd:i&gt;
                                                &lt;/xsl:when&gt;
                                                &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                &lt;/xsl:otherwise&gt;
                                            &lt;/xsl:choose&gt;
                                        &lt;/xd:b&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:when test="$wrapin-i"&gt;
                                        &lt;xd:i&gt;
                                            &lt;xsl:choose&gt;
                                                &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                &lt;/xsl:when&gt;
                                                &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                &lt;/xsl:otherwise&gt;
                                            &lt;/xsl:choose&gt;
                                        &lt;/xd:i&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:when test="$wrapin-a"&gt;
                                        &lt;xd:a&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                            &lt;/xsl:apply-templates&gt;
                                        &lt;/xd:a&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                            &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                        &lt;/xsl:apply-templates&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xd:p&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="$wrapin-b"&gt;
                            &lt;xd:b&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="$wrapin-i"&gt;
                                        &lt;xd:i&gt;
                                            &lt;xsl:choose&gt;
                                                &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                &lt;/xsl:when&gt;
                                                &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                &lt;/xsl:otherwise&gt;
                                            &lt;/xsl:choose&gt;
                                        &lt;/xd:i&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:when test="$wrapin-a"&gt;
                                        &lt;xd:a&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                            &lt;/xsl:apply-templates&gt;
                                        &lt;/xd:a&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                            &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                        &lt;/xsl:apply-templates&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xd:b&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="$wrapin-i"&gt;
                            &lt;xd:i&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="$wrapin-a"&gt;
                                        &lt;xd:a&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                            &lt;/xsl:apply-templates&gt;
                                        &lt;/xd:a&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                            &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                        &lt;/xsl:apply-templates&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xd:i&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="$wrapin-a"&gt;
                            &lt;xd:a&gt;
                                &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                    &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                &lt;/xsl:apply-templates&gt;
                            &lt;/xd:a&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xsl:otherwise&gt;
            &lt;/xsl:choose&gt;
        &lt;/xsl:for-each-group&gt;
    &lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;&lt;/codeblock&gt;
    &lt;xsl:template match="xd:doc"&gt;
        &lt;xsl:copy&gt;
            &lt;xsl:variable name="target"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="@target"&gt;
                        &lt;xsl:value-of select="@target"/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="count(preceding-sibling::*)=0"&gt;
                        &lt;xsl:value-of select="'parent'"/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:value-of select="'following'"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:variable&gt;
            &lt;xsl:variable name="code" select="if ($target='parent') then parent::* else following-sibling::*[1]"/&gt;

            &lt;xsl:attribute name="target" select="$target"/&gt;

            &lt;xsl:call-template name="short"/&gt;
            &lt;xsl:call-template name="detail"/&gt;
            &lt;xsl:call-template name="authors"/&gt;
            &lt;xsl:call-template name="contributors"/&gt;
            &lt;xsl:call-template name="maintainers"/&gt;
            &lt;xsl:call-template name="copyright"/&gt;
            &lt;xsl:call-template name="version"/&gt;
            &lt;xsl:call-template name="since"/&gt;
            &lt;xsl:call-template name="see"/&gt;
            &lt;xsl:call-template name="deprecated"/&gt;
            &lt;xsl:call-template name="import"&gt;
                &lt;xsl:with-param name="code" select="$code"/&gt;
            &lt;/xsl:call-template&gt;
            &lt;xsl:call-template name="include"&gt;
                &lt;xsl:with-param name="code" select="$code"/&gt;
            &lt;/xsl:call-template&gt;
            &lt;xsl:call-template name="param"&gt;
                &lt;xsl:with-param name="code" select="$code"/&gt;
            &lt;/xsl:call-template&gt;
            &lt;xsl:call-template name="return"/&gt;
        &lt;/xsl:copy&gt;
    &lt;/xsl:template&gt;

    &lt;codeblock&gt;&lt;xsl:stylesheet version="2.0"&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Identity template.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template match="@*|node()"&gt;
        &lt;xsl:copy&gt;
            &lt;xsl:apply-templates select="@*|node()"/&gt;
        &lt;/xsl:copy&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Matches each xd:doc element.&lt;/xd:short&gt;&lt;xd:detail&gt;
        
        Determines what code is being documented and calls appropriate templates for: &lt;xd:ul&gt;
                &lt;xd:li&gt;short description (xd:short)&lt;/xd:li&gt;
                &lt;xd:li&gt;detailed description (xd:detail)&lt;/xd:li&gt;
                &lt;xd:li&gt;authors (xd:author)&lt;/xd:li&gt;
                &lt;xd:li&gt;contributors (xd:contributor)&lt;/xd:li&gt;
                &lt;xd:li&gt;maintainers (xd:maintainer)&lt;/xd:li&gt;
                &lt;xd:li&gt;copyright (xd:copyright)&lt;/xd:li&gt;
                &lt;xd:li&gt;version (xd:version)&lt;/xd:li&gt;
                &lt;xd:li&gt;code existed since version (xd:since)&lt;/xd:li&gt;
                &lt;xd:li&gt;see also (xd:see)&lt;/xd:li&gt;
                &lt;xd:li&gt;deprecated since version (xd:deprecated)&lt;/xd:li&gt;
                &lt;xd:li&gt;import statements (xd:import and xsl:import)&lt;/xd:li&gt;
                &lt;xd:li&gt;include statements (xd:include and xsl:include)&lt;/xd:li&gt;
                &lt;xd:li&gt;parameters (xd:param and xsl:param)&lt;/xd:li&gt;
                &lt;xd:li&gt;return values / output (xd:return)&lt;/xd:li&gt;
            &lt;/xd:ul&gt;
        
        
    &lt;/xd:detail&gt;&lt;xd:return&gt;The normalized xd:doc.&lt;/xd:return&gt;&lt;/xd:doc&gt;
    &lt;xsl:template match="xd:doc"&gt;
        &lt;xsl:copy&gt;
            &lt;xsl:variable name="target"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="@target"&gt;
                        &lt;xsl:value-of select="@target"/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="count(preceding-sibling::*)=0"&gt;
                        &lt;xsl:value-of select="'parent'"/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:value-of select="'following'"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:variable&gt;
            &lt;xsl:variable name="code" select="if ($target='parent') then parent::* else following-sibling::*[1]"/&gt;

            &lt;xsl:attribute name="target" select="$target"/&gt;

            &lt;xsl:call-template name="short"/&gt;
            &lt;xsl:call-template name="detail"/&gt;
            &lt;xsl:call-template name="authors"/&gt;
            &lt;xsl:call-template name="contributors"/&gt;
            &lt;xsl:call-template name="maintainers"/&gt;
            &lt;xsl:call-template name="copyright"/&gt;
            &lt;xsl:call-template name="version"/&gt;
            &lt;xsl:call-template name="since"/&gt;
            &lt;xsl:call-template name="see"/&gt;
            &lt;xsl:call-template name="deprecated"/&gt;
            &lt;xsl:call-template name="import"&gt;
                &lt;xsl:with-param name="code" select="$code"/&gt;
            &lt;/xsl:call-template&gt;
            &lt;xsl:call-template name="include"&gt;
                &lt;xsl:with-param name="code" select="$code"/&gt;
            &lt;/xsl:call-template&gt;
            &lt;xsl:call-template name="param"&gt;
                &lt;xsl:with-param name="code" select="$code"/&gt;
            &lt;/xsl:call-template&gt;
            &lt;xsl:call-template name="return"/&gt;
        &lt;/xsl:copy&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Determines the short description.&lt;/xd:short&gt;&lt;xd:detail&gt;
        
        
            &lt;xd:ul&gt;
                &lt;xd:li&gt;If there is no &amp;lt;xd:short/&amp;gt;-element present, but plain text is present as a
                    child of the &amp;lt;xd:doc/&amp;gt;element, then the first sentence from that text (up
                    until the first period (".") will be used as a short description.&lt;/xd:li&gt;
                &lt;xd:li&gt;Else; if there are multiple &amp;lt;xd:short/&amp;gt;-elements, each one of their
                    contents will be wrapped in separate &amp;lt;section/&amp;gt;s.&lt;/xd:li&gt;
                &lt;xd:li&gt;Else; use the one &amp;lt;xd:short/&amp;gt;-element that is present for the short
                    description.&lt;/xd:li&gt;
            &lt;/xd:ul&gt;
        
    &lt;/xd:detail&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="short"&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="count(child::*[local-name()='short'])&amp;gt;1"&gt;
                &lt;xd:short&gt;
                    &lt;xsl:for-each select="child::*[local-name()='short']"&gt;
                        &lt;xd:section&gt;
                            &lt;xsl:apply-templates mode="section"/&gt;
                        &lt;/xd:section&gt;
                    &lt;/xsl:for-each&gt;
                &lt;/xd:short&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="count(child::*[local-name()='short'])=1"&gt;
                &lt;xd:short&gt;
                    &lt;xsl:apply-templates select="child::*[local-name()='short']/node()" mode="section"/&gt;
                &lt;/xd:short&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="child::text()[string-length(normalize-space())&amp;gt;0]"&gt;
                &lt;xsl:variable name="short" select="replace(normalize-space(child::text()[1]),'^([^\.]+\.?)\s?.*$','$1')"/&gt;
                &lt;xd:short&gt;
                    &lt;xsl:value-of select="$short"/&gt;
                &lt;/xd:short&gt;
            &lt;/xsl:when&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Determines the detailed description.&lt;/xd:short&gt;&lt;xd:detail&gt;
        
        The detailed description will be put together based on any number of
            &amp;lt;xd:detail/&amp;gt;-elements, as well as any number of text nodes that are direct
            children of the &amp;lt;xd:doc/&amp;gt;-element. If the xd:short was extracted from the first
            text node, then the first sentence from that text node will be ignored. If there are
            multiple &amp;lt;xd:detail/&amp;gt; and text nodes, then each of them will be wrapped in
            &amp;lt;xd:section/&amp;gt;s.
    &lt;/xd:detail&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="detail"&gt;
        &lt;xsl:variable name="shortInFirstText" select="count(./*[local-name()='short'])=0"/&gt;
        &lt;xsl:variable name="detailCount" select="(if (matches(normalize-space(./text()[1]),'\.[^\.].')) then 1 else 0) + count(*[local-name()='detail' and (descendant-or-self::node()[self::text() and string-length(normalize-space())&amp;gt;0 or local-name()='pre' and not(ancestor::*[local-name()='pre'])])]) + count(./text()[not(position()=1) and string-length(normalize-space())&amp;gt;0])"/&gt;
        &lt;xsl:if test="$detailCount&amp;gt;0"&gt;
            &lt;xd:detail&gt;
                &lt;xsl:for-each select="*|text()"&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="self::text() and count(preceding-sibling::text()[string-length(normalize-space())&amp;gt;0])=0"&gt;
                            &lt;!-- first text --&gt;
                            &lt;xsl:choose&gt;
                                &lt;xsl:when test="$shortInFirstText"&gt;
                                    &lt;xsl:variable name="detail" select="replace(normalize-space(),'^[^\.]+.?\s?(.*)$','$1')"/&gt;
                                    &lt;xsl:choose&gt;
                                        &lt;xsl:when test="$detailCount&amp;gt;1"&gt;
                                            &lt;xd:section&gt;
                                                &lt;xsl:value-of select="$detail"/&gt;
                                            &lt;/xd:section&gt;
                                        &lt;/xsl:when&gt;
                                        &lt;xsl:otherwise&gt;
                                            &lt;xsl:value-of select="$detail"/&gt;
                                        &lt;/xsl:otherwise&gt;
                                    &lt;/xsl:choose&gt;
                                &lt;/xsl:when&gt;
                                &lt;xsl:otherwise&gt;
                                    &lt;xsl:choose&gt;
                                        &lt;xsl:when test="$detailCount&amp;gt;1"&gt;
                                            &lt;xd:section&gt;
                                                &lt;xsl:value-of select="."/&gt;
                                            &lt;/xd:section&gt;
                                        &lt;/xsl:when&gt;
                                        &lt;xsl:otherwise&gt;
                                            &lt;xsl:value-of select="."/&gt;
                                        &lt;/xsl:otherwise&gt;
                                    &lt;/xsl:choose&gt;
                                &lt;/xsl:otherwise&gt;
                            &lt;/xsl:choose&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="self::text()"&gt;
                            &lt;!-- non-first text --&gt;
                            &lt;xsl:choose&gt;
                                &lt;xsl:when test="$detailCount&amp;gt;1"&gt;
                                    &lt;xd:section&gt;
                                        &lt;xsl:value-of select="."/&gt;
                                    &lt;/xd:section&gt;
                                &lt;/xsl:when&gt;
                                &lt;xsl:otherwise&gt;
                                    &lt;xsl:value-of select="."/&gt;
                                &lt;/xsl:otherwise&gt;
                            &lt;/xsl:choose&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="local-name()='detail'"&gt;
                            &lt;!-- detail element --&gt;
                            &lt;xsl:choose&gt;
                                &lt;xsl:when test="$detailCount&amp;gt;1"&gt;
                                    &lt;xd:section&gt;
                                        &lt;xsl:apply-templates select="child::node()" mode="section"/&gt;
                                    &lt;/xd:section&gt;
                                &lt;/xsl:when&gt;
                                &lt;xsl:otherwise&gt;
                                    &lt;xsl:apply-templates select="child::node()" mode="section"/&gt;
                                &lt;/xsl:otherwise&gt;
                            &lt;/xsl:choose&gt;
                        &lt;/xsl:when&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xsl:for-each&gt;
            &lt;/xd:detail&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes the xd:author-elements.&lt;/xd:short&gt;&lt;xd:detail&gt;&amp;gt;xd:author/&amp;lt;s with no text are removed. &amp;lt;xd:author/&amp;gt;s with no child elements will have their text content wrapped in a &amp;lt;xd:name/&amp;gt; element. Children other than xd:name, xd:mailto and xd:organization are ignored.&lt;/xd:detail&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="authors" xml:id="authors"&gt;
        &lt;xsl:for-each select="*[local-name()='author']"&gt;
            &lt;xsl:variable name="is-empty" select="count(descendant-or-self::text()[string-length(normalize-space())&amp;gt;0])=0"/&gt;
            &lt;xsl:if test="not($is-empty)"&gt;
                &lt;xd:author&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="count(child::*)=0"&gt;
                            &lt;xd:name&gt;
                                &lt;xsl:value-of select="."/&gt;
                            &lt;/xd:name&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:if test="child::*[local-name()='name']"&gt;
                                &lt;xd:name&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='name']"/&gt;
                                &lt;/xd:name&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='mailto']"&gt;
                                &lt;xd:mailto&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='mailto']"/&gt;
                                &lt;/xd:mailto&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='organization']"&gt;
                                &lt;xd:organization&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='organization']"/&gt;
                                &lt;/xd:organization&gt;
                            &lt;/xsl:if&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xd:author&gt;
            &lt;/xsl:if&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;&amp;lt;xd:contributor/&amp;gt;s are normalized in the same way as &amp;lt;xd:author/&amp;gt;s&lt;/xd:short&gt;&lt;xd:see&gt;#authors&lt;/xd:see&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="contributors"&gt;
        &lt;xsl:for-each select="*[local-name()='contributor']"&gt;
            &lt;xsl:variable name="is-empty" select="count(descendant-or-self::text()[string-length(normalize-space())&amp;gt;0])=0"/&gt;
            &lt;xsl:if test="not($is-empty)"&gt;
                &lt;xd:contributor&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="count(child::*)=0"&gt;
                            &lt;xd:name&gt;
                                &lt;xsl:value-of select="."/&gt;
                            &lt;/xd:name&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:if test="child::*[local-name()='name']"&gt;
                                &lt;xd:name&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='name']"/&gt;
                                &lt;/xd:name&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='mailto']"&gt;
                                &lt;xd:mailto&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='mailto']"/&gt;
                                &lt;/xd:mailto&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='organization']"&gt;
                                &lt;xd:organization&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='organization']"/&gt;
                                &lt;/xd:organization&gt;
                            &lt;/xsl:if&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xd:contributor&gt;
            &lt;/xsl:if&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;&amp;lt;xd:maintainer/&amp;gt;s are normalized in the same way as &amp;lt;xd:author/&amp;gt;s&lt;/xd:short&gt;&lt;xd:see&gt;#authors&lt;/xd:see&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="maintainers"&gt;
        &lt;xsl:for-each select="*[local-name()='maintainer']"&gt;
            &lt;xsl:variable name="is-empty" select="count(descendant-or-self::text()[string-length(normalize-space())&amp;gt;0])=0"/&gt;
            &lt;xsl:if test="not($is-empty)"&gt;
                &lt;xd:maintainer&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="count(child::*)=0"&gt;
                            &lt;xd:name&gt;
                                &lt;xsl:value-of select="."/&gt;
                            &lt;/xd:name&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:if test="child::*[local-name()='name']"&gt;
                                &lt;xd:name&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='name']"/&gt;
                                &lt;/xd:name&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='mailto']"&gt;
                                &lt;xd:mailto&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='mailto']"/&gt;
                                &lt;/xd:mailto&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='organization']"&gt;
                                &lt;xd:organization&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='organization']"/&gt;
                                &lt;/xd:organization&gt;
                            &lt;/xsl:if&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xd:maintainer&gt;
            &lt;/xsl:if&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes the xd:copyright-element.&lt;/xd:short&gt;&lt;xd:detail&gt;&amp;gt;xd:copyright/&amp;lt;s with no text are removed. &amp;lt;xd:copyright/&amp;gt;s with no child elements will have their text content wrapped in a &amp;lt;xd:name/&amp;gt; element. Children other than xd:year, xd:name, xd:mailto and xd:organization are ignored.&lt;/xd:detail&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="copyright"&gt;
        &lt;xsl:for-each select="*[local-name()='copyright']"&gt;
            &lt;xsl:variable name="is-empty" select="count(descendant-or-self::text()[string-length(normalize-space())&amp;gt;0])=0"/&gt;
            &lt;xsl:if test="not($is-empty)"&gt;
                &lt;xd:copyright&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="count(child::*)=0"&gt;
                            &lt;xd:name&gt;
                                &lt;xsl:value-of select="."/&gt;
                            &lt;/xd:name&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:if test="child::*[local-name()='year']"&gt;
                                &lt;xd:year&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='year']"/&gt;
                                &lt;/xd:year&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='name']"&gt;
                                &lt;xd:name&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='name']"/&gt;
                                &lt;/xd:name&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='mailto']"&gt;
                                &lt;xd:mailto&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='mailto']"/&gt;
                                &lt;/xd:mailto&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='organization']"&gt;
                                &lt;xd:organization&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='organization']"/&gt;
                                &lt;/xd:organization&gt;
                            &lt;/xsl:if&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xd:copyright&gt;
            &lt;/xsl:if&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:version elements.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="version"&gt;
        &lt;xsl:if test="child::*[local-name()='version' and string-length(normalize-space(./text()))&amp;gt;0]"&gt;
            &lt;xd:version&gt;
                &lt;xsl:value-of select="child::*[local-name()='version' and string-length(normalize-space(./text()))&amp;gt;0]"/&gt;
            &lt;/xd:version&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:since elements.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="since"&gt;
        &lt;xsl:if test="child::*[local-name()='since' and string-length(normalize-space(./text()))&amp;gt;0]"&gt;
            &lt;xd:since&gt;
                &lt;xsl:value-of select="child::*[local-name()='since' and string-length(normalize-space(./text()))&amp;gt;0]"/&gt;
            &lt;/xd:since&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:see elements.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="see"&gt;
        &lt;xsl:if test="child::*[local-name()='see' and string-length(normalize-space(./text()))&amp;gt;0]"&gt;
            &lt;xd:see&gt;
                &lt;xsl:value-of select="child::*[local-name()='see' and string-length(normalize-space(./text()))&amp;gt;0]"/&gt;
            &lt;/xd:see&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:deprecated elements.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="deprecated"&gt;
        &lt;xsl:if test="child::*[local-name()='deprecated' and string-length(normalize-space(./text()))&amp;gt;0]"&gt;
            &lt;xd:deprecated&gt;
                &lt;xsl:value-of select="child::*[local-name()='deprecated' and string-length(normalize-space(./text()))&amp;gt;0]"/&gt;
            &lt;/xd:deprecated&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:import elements.&lt;/xd:short&gt;&lt;xd:detail&gt;Will create empty documentation for imports that are not documented, and removes documentation of imports that does not exist in the code.&lt;/xd:detail&gt;&lt;xd:param name="code"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="import"&gt;
        &lt;xsl:param name="code" required="yes"/&gt;
        &lt;xsl:variable name="doc" select="."/&gt;
        &lt;xsl:for-each select="$code/xsl:import"&gt;
            &lt;xsl:variable name="href" select="@href"/&gt;
            &lt;xd:import href="{@href}"&gt;
                &lt;xsl:if test="$doc/*[local-name()='import' and @href=$href]"&gt;
                    &lt;xsl:value-of select="$doc/*[local-name()='import' and @href=$href]"/&gt;
                &lt;/xsl:if&gt;
            &lt;/xd:import&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:include elements.&lt;/xd:short&gt;&lt;xd:detail&gt;Will create empty documentation for includes that are not documented, and removes documentation of includes that does not exist in the code.&lt;/xd:detail&gt;&lt;xd:param name="code"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="include"&gt;
        &lt;xsl:param name="code" required="yes"/&gt;
        &lt;xsl:variable name="doc" select="."/&gt;
        &lt;xsl:for-each select="$code/xsl:include"&gt;
            &lt;xsl:variable name="href" select="@href"/&gt;
            &lt;xd:include href="{@href}"&gt;
                &lt;xsl:if test="$doc/*[local-name()='include' and @href=$href]"&gt;
                    &lt;xsl:value-of select="$doc/*[local-name()='include' and @href=$href]"/&gt;
                &lt;/xsl:if&gt;
            &lt;/xd:include&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:import elements.&lt;/xd:short&gt;&lt;xd:detail&gt;Will create empty documentation for imports that are not documented, and removes documentation of imports that does not exist in the code.&lt;/xd:detail&gt;&lt;xd:param name="code"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="param"&gt;
        &lt;xsl:param name="code" required="yes"/&gt;
        &lt;xsl:variable name="doc" select="."/&gt;
        &lt;xsl:for-each select="*[local-name()='param']"&gt;
            &lt;xd:param&gt;
                &lt;xsl:apply-templates select="@*"/&gt;
                &lt;xsl:apply-templates mode="section" select="node()"/&gt;
            &lt;/xd:param&gt;
        &lt;/xsl:for-each&gt;
        &lt;xsl:for-each select="$code/xsl:param"&gt;
            &lt;xsl:variable name="name" select="@name"/&gt;
            &lt;xsl:if test="not($doc/*[local-name()='param' and @name=$name])"&gt;
                &lt;xd:param name="{@name}"/&gt;
            &lt;/xsl:if&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Describes the result of the code.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="return"&gt;
        &lt;xsl:variable name="is-empty" select="count(*[local-name()='return']/descendant-or-self::node()[self::text() and string-length(normalize-space())&amp;gt;0 or local-name()='pre'])=0"/&gt;
        &lt;xsl:if test="not($is-empty)"&gt;
            &lt;xd:return&gt;
                &lt;xsl:apply-templates mode="section" select="*[local-name()='return']/node()"/&gt;
            &lt;/xd:return&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Matches all elements when in "section"-mode.&lt;/xd:short&gt;&lt;xd:detail&gt;
        
        Checks all child elements and their descendants and wraps and handles as is
            appropriate. If a child or descendant is placed in a problematic position, then one of
            the unwrap*-templates are called to solve the problem. Otherwise, just make sure that
            the element is in the correct namespace and copy it.
    &lt;/xd:detail&gt;&lt;xd:param name="wrapin-p"/&gt;&lt;xd:param name="wrapin-ul"/&gt;&lt;xd:param name="wrapin-li"/&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template mode="section" match="@*|node()"&gt;
        &lt;xsl:param name="wrapin-p" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-ul" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-li" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:variable name="is-empty" select="count(descendant-or-self::node()[self::text() and string-length(normalize-space())&amp;gt;0 or local-name()='pre'])=0"/&gt;
        &lt;xsl:variable name="contains-section" select="count(descendant::*[local-name()='section'])&amp;gt;0"/&gt;
        &lt;xsl:variable name="contains-block" select="count(descendant::*[local-name()='ul' or local-name()='li' or local-name()='pre' or local-name()='p'])&amp;gt;0"/&gt;
        &lt;xsl:variable name="contains-block-non-li" select="count(descendant::*[local-name()='ul' or local-name()='pre' or local-name()='p'])&amp;gt;0"/&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="local-name()='section'"&gt;
                &lt;xd:section&gt;
                    &lt;xsl:apply-templates mode="section" select="@*|node()"/&gt;
                &lt;/xd:section&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='p'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$contains-section or $contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-p" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:p&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:p&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='pre'"&gt;
                &lt;xd:pre&gt;
                    &lt;xsl:copy-of select="@*|node()"/&gt;
                &lt;/xd:pre&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='ul'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-section"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$contains-block-non-li"&gt;
                        &lt;xd:section&gt;
                            &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                                &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                            &lt;/xsl:call-template&gt;
                        &lt;/xd:section&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="count(descendant::*[local-name()='li'])=0"&gt;
                        &lt;xsl:choose&gt;
                            &lt;xsl:when test="count(child::node()[self::* or self::text() and string-length(normalize-space())&amp;gt;0])&amp;gt;1"&gt;
                                &lt;xd:section&gt;
                                    &lt;xsl:apply-templates mode="section" select="@*|node()"&gt;
                                        &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                                        &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                                    &lt;/xsl:apply-templates&gt;
                                &lt;/xd:section&gt;
                            &lt;/xsl:when&gt;
                            &lt;xsl:otherwise&gt;
                                &lt;xsl:apply-templates mode="section" select="@*|node()"&gt;
                                    &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                                &lt;/xsl:apply-templates&gt;
                            &lt;/xsl:otherwise&gt;
                        &lt;/xsl:choose&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:ul&gt;
                            &lt;xsl:apply-templates mode="list" select="@*|node()"&gt;
                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:ul&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='li'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-section"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:ul&gt;
                            &lt;xd:li&gt;
                                &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                            &lt;/xd:li&gt;
                        &lt;/xd:ul&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='b'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-section"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-b" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-b" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:b&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:b&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='i'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-section"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-i" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-i" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:i&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:i&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='a'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-section"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-a" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-a-elem" select="." tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-a" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-a-elem" select="." tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:a&gt;
                            &lt;xsl:apply-templates select="@*"/&gt;
                            &lt;xsl:apply-templates mode="phrase" select="node()"/&gt;
                        &lt;/xd:a&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="self::*"&gt;
                        &lt;xsl:choose&gt;
                            &lt;xsl:when test="not(preceding-sibling::*) and not(following-sibling::*)"&gt;
                                &lt;xsl:apply-templates mode="section" select="@*|node()"/&gt;
                            &lt;/xsl:when&gt;
                            &lt;xsl:otherwise&gt;
                                &lt;xd:section&gt;
                                    &lt;xsl:apply-templates mode="section" select="@*|node()"/&gt;
                                &lt;/xd:section&gt;
                            &lt;/xsl:otherwise&gt;
                        &lt;/xsl:choose&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="self::text()"&gt;
                        &lt;xsl:copy/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="section" select="@*|node()"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Handles non-problematic lists.&lt;/xd:short&gt;&lt;xd:param name="wrapin-p"/&gt;&lt;xd:param name="wrapin-ul"/&gt;&lt;xd:param name="wrapin-li"/&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template mode="list" match="@*|node()"&gt;
        &lt;xsl:param name="wrapin-p" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-ul" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-li" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:variable name="is-empty" select="count(descendant-or-self::node()[self::text() and string-length(normalize-space())&amp;gt;0 or local-name()='pre'])=0"/&gt;
        &lt;xsl:variable name="contains-block" select="count(descendant::*[local-name()='ul' or local-name()='li' or local-name()='pre' or local-name()='p'])&amp;gt;0"/&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="local-name()='li'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$wrapin-ul"&gt;
                        &lt;xd:ul&gt;
                            &lt;xd:li&gt;
                                &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                            &lt;/xd:li&gt;
                        &lt;/xd:ul&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:li&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:li&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="self::text()"&gt;
                        &lt;xsl:copy/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="list" select="@*|node()"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Handles all elements when in "block" mode and applies fixes where needed.&lt;/xd:short&gt;&lt;xd:param name="wrapin-p"/&gt;&lt;xd:param name="wrapin-ul"/&gt;&lt;xd:param name="wrapin-li"/&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template mode="block" match="@*|node()"&gt;
        &lt;xsl:param name="wrapin-p" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-ul" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-li" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:variable name="element" select="."/&gt;
        &lt;xsl:variable name="is-empty" select="count(descendant-or-self::node()[self::* or self::text() and string-length(normalize-space())&amp;gt;0])=0"/&gt;
        &lt;xsl:variable name="contains-block" select="count(descendant::*[local-name()='ul' or local-name()='li' or local-name()='pre' or local-name()='p'])&amp;gt;0"/&gt;
        &lt;xsl:variable name="contains-block-non-li" select="count(descendant::*[local-name()='ul' or local-name()='pre' or local-name()='p'])&amp;gt;0"/&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="local-name()='p'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:p&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:p&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='pre'"&gt;
                &lt;xd:pre&gt;
                    &lt;xsl:copy-of select="@*|node()"/&gt;
                &lt;/xd:pre&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='ul'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block-non-li"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="count(descendant::*[local-name()='li' and string-length(normalize-space(descendant-or-self::text()))&amp;gt;0])=0"&gt;
                        &lt;xsl:apply-templates mode="block" select="@*|node()"/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:ul&gt;
                            &lt;xsl:apply-templates mode="list" select="@*|node()"&gt;
                                &lt;xsl:with-param name="wrapin-ul" select="false()"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:ul&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='li'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:ul&gt;
                            &lt;xd:li&gt;
                                &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                                    &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                &lt;/xsl:apply-templates&gt;
                            &lt;/xd:li&gt;
                        &lt;/xd:ul&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="not($contains-block) and $wrapin-p"&gt;
                &lt;xd:p&gt;
                    &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                        &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                        &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                        &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                    &lt;/xsl:apply-templates&gt;
                &lt;/xd:p&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="not($contains-block) and $wrapin-li"&gt;
                &lt;xd:ul&gt;
                    &lt;xd:li&gt;
                        &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                            &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xd:li&gt;
                &lt;/xd:ul&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='b'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-b" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:b&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:b&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='i'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-i" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:i&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:i&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='a'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-a" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-a-elem" select="$element" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:a&gt;
                            &lt;xsl:apply-templates mode="phrase" select="$element/@*"/&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:a&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="self::text()"&gt;
                        &lt;xsl:copy/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="block" select="@*|node()"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Phrases are matched with this template (mode="phrase") and handled appropriately.&lt;/xd:short&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template mode="phrase" match="@*|node()"&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="local-name()='b'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='b'])"&gt;
                        &lt;xd:b&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:b&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="$wrapin-b"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='b'])"&gt;
                        &lt;xd:b&gt;
                            &lt;xsl:apply-templates mode="phrase" select="."&gt;
                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:b&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="."&gt;
                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='i'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='i'])"&gt;
                        &lt;xd:i&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:i&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="$wrapin-i"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='i'])"&gt;
                        &lt;xd:i&gt;
                            &lt;xsl:apply-templates mode="phrase" select="."&gt;
                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:i&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="."&gt;
                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='a'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='a'])"&gt;
                        &lt;xd:a&gt;
                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                            &lt;xsl:apply-templates mode="phrase" select="node()"&gt;
                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:a&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="$wrapin-a"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='a'])"&gt;
                        &lt;xd:a&gt;
                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                            &lt;xsl:apply-templates mode="phrase" select="."&gt;
                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:a&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="."&gt;
                            &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="self::text()"&gt;
                        &lt;xsl:copy/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;This template unwraps problematic elements into sections.&lt;/xd:short&gt;&lt;xd:param name="wasWrapped"/&gt;&lt;xd:param name="wrapin-p"/&gt;&lt;xd:param name="wrapin-ul"/&gt;&lt;xd:param name="wrapin-li"/&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="unwrap-to-sections"&gt;
        &lt;xsl:param name="wasWrapped" select="false()"/&gt;
        &lt;xsl:param name="wrapin-p" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-ul" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-li" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:variable name="element" select="."/&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="not($wasWrapped) and count(child::node()[self::* or self::text() and string-length(normalize-space())&amp;gt;0])&amp;gt;1"&gt;
                &lt;xd:section&gt;
                    &lt;xsl:call-template name="unwrap-to-sections"&gt;
                        &lt;xsl:with-param name="wasWrapped" select="true()"/&gt;
                    &lt;/xsl:call-template&gt;
                &lt;/xd:section&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
                &lt;xsl:for-each-group select="child::node()[self::* or self::text() and string-length(normalize-space())&amp;gt;0]" group-adjacent="self::* and not(ancestor::*[local-name()='pre']) and (local-name()='section' or local-name()='ul' or local-name()='li' or local-name()='pre' or local-name()='p')"&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="current-grouping-key()"&gt;
                            &lt;xsl:choose&gt;
                                &lt;xsl:when test="count(current-group())&amp;gt;1 and last()&amp;gt;1"&gt;
                                    &lt;xd:section&gt;
                                        &lt;xsl:apply-templates mode="section" select="current-group()"&gt;
                                            &lt;xsl:with-param name="wrapin-p" tunnel="yes" select="if ($wrapin-p or local-name($element)='p') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-ul" tunnel="yes" select="if ($wrapin-ul or local-name($element)='ul') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-li" tunnel="yes" select="if ($wrapin-li or local-name($element)='li') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-b" tunnel="yes" select="if ($wrapin-b or local-name($element)='b') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-i" tunnel="yes" select="if ($wrapin-i or local-name($element)='i') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-a" tunnel="yes" select="if ($wrapin-a or local-name($element)='a') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-a-elem" tunnel="yes" select="if (not($wrapin-a) and local-name($element)='a') then $element else false()"/&gt;
                                        &lt;/xsl:apply-templates&gt;
                                    &lt;/xd:section&gt;
                                &lt;/xsl:when&gt;
                                &lt;xsl:otherwise&gt;
                                    &lt;xsl:apply-templates mode="section" select="current-group()"&gt;
                                        &lt;xsl:with-param name="wrapin-p" tunnel="yes" select="if ($wrapin-p or local-name($element)='p') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-ul" tunnel="yes" select="if ($wrapin-ul or local-name($element)='ul') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-li" tunnel="yes" select="if ($wrapin-li or local-name($element)='li') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-b" tunnel="yes" select="if ($wrapin-b or local-name($element)='b') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-i" tunnel="yes" select="if ($wrapin-i or local-name($element)='i') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-a" tunnel="yes" select="if ($wrapin-a or local-name($element)='a') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-a-elem" tunnel="yes" select="if (not($wrapin-a) and local-name($element)='a') then $element else false()"/&gt;
                                    &lt;/xsl:apply-templates&gt;
                                &lt;/xsl:otherwise&gt;
                            &lt;/xsl:choose&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:element name="xd:{local-name($element)}"&gt;
                                &lt;xsl:for-each select="$element/@*"&gt;
                                    &lt;xsl:attribute name="xd:{local-name()}" select="."/&gt;
                                &lt;/xsl:for-each&gt;
                                &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                    &lt;xsl:with-param name="wrapin-p" tunnel="yes" select="if ($wrapin-p or local-name($element)='p') then false() else $wrapin-p"/&gt;
                                    &lt;xsl:with-param name="wrapin-ul" tunnel="yes" select="if ($wrapin-ul or local-name($element)='ul') then false() else $wrapin-ul"/&gt;
                                    &lt;xsl:with-param name="wrapin-li" tunnel="yes" select="if ($wrapin-li or local-name($element)='li') then false() else $wrapin-li"/&gt;
                                    &lt;xsl:with-param name="wrapin-b" tunnel="yes" select="if ($wrapin-b or local-name($element)='b') then false() else $wrapin-b"/&gt;
                                    &lt;xsl:with-param name="wrapin-i" tunnel="yes" select="if ($wrapin-i or local-name($element)='i') then false() else $wrapin-i"/&gt;
                                    &lt;xsl:with-param name="wrapin-a" tunnel="yes" select="if ($wrapin-a or local-name($element)='a') then false() else $wrapin-a"/&gt;
                                &lt;/xsl:apply-templates&gt;
                            &lt;/xsl:element&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xsl:for-each-group&gt;
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;This template unwraps problematic elements into blocks.&lt;/xd:short&gt;&lt;xd:param name="wrapin-p"/&gt;&lt;xd:param name="wrapin-ul"/&gt;&lt;xd:param name="wrapin-li"/&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="unwrap-to-blocks"&gt;
        &lt;xsl:param name="wrapin-p" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-ul" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-li" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:variable name="element" select="."/&gt;
        &lt;xsl:for-each-group select="child::node()[self::* or self::text() and string-length(normalize-space())&amp;gt;0]" group-adjacent="count(descendant-or-self::*[local-name()='ul' or local-name()='li' or local-name()='pre' or local-name()='p'])&amp;gt;0"&gt;
            &lt;xsl:choose&gt;
                &lt;xsl:when test="current-grouping-key()"&gt;
                    &lt;xsl:for-each select="current-group()"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-p" select="$wrapin-p or local-name()='p' or local-name($element)='p'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="$wrapin-ul or local-name()='ul' or local-name($element)='ul'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="$wrapin-li or local-name()='li' or local-name($element)='li'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-b" select="$wrapin-b or local-name()='b' or local-name($element)='b'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-i" select="$wrapin-i or local-name()='i' or local-name($element)='i'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-a" select="$wrapin-a or local-name()='a' or local-name($element)='a'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-a-elem" select="if (local-name()='a') then . else (if (local-name($element)='a') then $element else $wrapin-a-elem)" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:for-each&gt;
                &lt;/xsl:when&gt;
                &lt;xsl:otherwise&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="$wrapin-p"&gt;
                            &lt;xd:p&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="$wrapin-b"&gt;
                                        &lt;xd:b&gt;
                                            &lt;xsl:choose&gt;
                                                &lt;xsl:when test="$wrapin-i"&gt;
                                                  &lt;xd:i&gt;
                                                  &lt;xsl:choose&gt;
                                                  &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                  &lt;/xsl:when&gt;
                                                  &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xsl:otherwise&gt;
                                                  &lt;/xsl:choose&gt;
                                                  &lt;/xd:i&gt;
                                                &lt;/xsl:when&gt;
                                                &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                &lt;/xsl:otherwise&gt;
                                            &lt;/xsl:choose&gt;
                                        &lt;/xd:b&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:when test="$wrapin-i"&gt;
                                        &lt;xd:i&gt;
                                            &lt;xsl:choose&gt;
                                                &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                &lt;/xsl:when&gt;
                                                &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                &lt;/xsl:otherwise&gt;
                                            &lt;/xsl:choose&gt;
                                        &lt;/xd:i&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:when test="$wrapin-a"&gt;
                                        &lt;xd:a&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                            &lt;/xsl:apply-templates&gt;
                                        &lt;/xd:a&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                            &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                        &lt;/xsl:apply-templates&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xd:p&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="$wrapin-li"&gt;
                            &lt;xd:ul&gt;
                                &lt;xd:li&gt;
                                    &lt;xsl:choose&gt;
                                        &lt;xsl:when test="$wrapin-b"&gt;
                                            &lt;xd:b&gt;
                                                &lt;xsl:choose&gt;
                                                  &lt;xsl:when test="$wrapin-i"&gt;
                                                  &lt;xd:i&gt;
                                                  &lt;xsl:choose&gt;
                                                  &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                  &lt;/xsl:when&gt;
                                                  &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xsl:otherwise&gt;
                                                  &lt;/xsl:choose&gt;
                                                  &lt;/xd:i&gt;
                                                  &lt;/xsl:when&gt;
                                                  &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xsl:otherwise&gt;
                                                &lt;/xsl:choose&gt;
                                            &lt;/xd:b&gt;
                                        &lt;/xsl:when&gt;
                                        &lt;xsl:when test="$wrapin-i"&gt;
                                            &lt;xd:i&gt;
                                                &lt;xsl:choose&gt;
                                                  &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                  &lt;/xsl:when&gt;
                                                  &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xsl:otherwise&gt;
                                                &lt;/xsl:choose&gt;
                                            &lt;/xd:i&gt;
                                        &lt;/xsl:when&gt;
                                        &lt;xsl:when test="$wrapin-a"&gt;
                                            &lt;xd:a&gt;
                                                &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                &lt;/xsl:apply-templates&gt;
                                            &lt;/xd:a&gt;
                                        &lt;/xsl:when&gt;
                                        &lt;xsl:otherwise&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                            &lt;/xsl:apply-templates&gt;
                                        &lt;/xsl:otherwise&gt;
                                    &lt;/xsl:choose&gt;
                                &lt;/xd:li&gt;
                            &lt;/xd:ul&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="$wrapin-ul"&gt;
                            &lt;xd:p&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="$wrapin-b"&gt;
                                        &lt;xd:b&gt;
                                            &lt;xsl:choose&gt;
                                                &lt;xsl:when test="$wrapin-i"&gt;
                                                  &lt;xd:i&gt;
                                                  &lt;xsl:choose&gt;
                                                  &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                  &lt;/xsl:when&gt;
                                                  &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xsl:otherwise&gt;
                                                  &lt;/xsl:choose&gt;
                                                  &lt;/xd:i&gt;
                                                &lt;/xsl:when&gt;
                                                &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                &lt;/xsl:otherwise&gt;
                                            &lt;/xsl:choose&gt;
                                        &lt;/xd:b&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:when test="$wrapin-i"&gt;
                                        &lt;xd:i&gt;
                                            &lt;xsl:choose&gt;
                                                &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                &lt;/xsl:when&gt;
                                                &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                &lt;/xsl:otherwise&gt;
                                            &lt;/xsl:choose&gt;
                                        &lt;/xd:i&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:when test="$wrapin-a"&gt;
                                        &lt;xd:a&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                            &lt;/xsl:apply-templates&gt;
                                        &lt;/xd:a&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                            &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                        &lt;/xsl:apply-templates&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xd:p&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="$wrapin-b"&gt;
                            &lt;xd:b&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="$wrapin-i"&gt;
                                        &lt;xd:i&gt;
                                            &lt;xsl:choose&gt;
                                                &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                &lt;/xsl:when&gt;
                                                &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                &lt;/xsl:otherwise&gt;
                                            &lt;/xsl:choose&gt;
                                        &lt;/xd:i&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:when test="$wrapin-a"&gt;
                                        &lt;xd:a&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                            &lt;/xsl:apply-templates&gt;
                                        &lt;/xd:a&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                            &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                        &lt;/xsl:apply-templates&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xd:b&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="$wrapin-i"&gt;
                            &lt;xd:i&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="$wrapin-a"&gt;
                                        &lt;xd:a&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                            &lt;/xsl:apply-templates&gt;
                                        &lt;/xd:a&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                            &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                        &lt;/xsl:apply-templates&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xd:i&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="$wrapin-a"&gt;
                            &lt;xd:a&gt;
                                &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                    &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                &lt;/xsl:apply-templates&gt;
                            &lt;/xd:a&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xsl:otherwise&gt;
            &lt;/xsl:choose&gt;
        &lt;/xsl:for-each-group&gt;
    &lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;&lt;/codeblock&gt;
    &lt;xsl:template name="short"&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="count(child::*[local-name()='short'])&amp;gt;1"&gt;
                &lt;xd:short&gt;
                    &lt;xsl:for-each select="child::*[local-name()='short']"&gt;
                        &lt;xd:section&gt;
                            &lt;xsl:apply-templates mode="section"/&gt;
                        &lt;/xd:section&gt;
                    &lt;/xsl:for-each&gt;
                &lt;/xd:short&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="count(child::*[local-name()='short'])=1"&gt;
                &lt;xd:short&gt;
                    &lt;xsl:apply-templates select="child::*[local-name()='short']/node()" mode="section"/&gt;
                &lt;/xd:short&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="child::text()[string-length(normalize-space())&amp;gt;0]"&gt;
                &lt;xsl:variable name="short" select="replace(normalize-space(child::text()[1]),'^([^\.]+\.?)\s?.*$','$1')"/&gt;
                &lt;xd:short&gt;
                    &lt;xsl:value-of select="$short"/&gt;
                &lt;/xd:short&gt;
            &lt;/xsl:when&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;codeblock&gt;&lt;xsl:stylesheet version="2.0"&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Identity template.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template match="@*|node()"&gt;
        &lt;xsl:copy&gt;
            &lt;xsl:apply-templates select="@*|node()"/&gt;
        &lt;/xsl:copy&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Matches each xd:doc element.&lt;/xd:short&gt;&lt;xd:detail&gt;
        
        Determines what code is being documented and calls appropriate templates for: &lt;xd:ul&gt;
                &lt;xd:li&gt;short description (xd:short)&lt;/xd:li&gt;
                &lt;xd:li&gt;detailed description (xd:detail)&lt;/xd:li&gt;
                &lt;xd:li&gt;authors (xd:author)&lt;/xd:li&gt;
                &lt;xd:li&gt;contributors (xd:contributor)&lt;/xd:li&gt;
                &lt;xd:li&gt;maintainers (xd:maintainer)&lt;/xd:li&gt;
                &lt;xd:li&gt;copyright (xd:copyright)&lt;/xd:li&gt;
                &lt;xd:li&gt;version (xd:version)&lt;/xd:li&gt;
                &lt;xd:li&gt;code existed since version (xd:since)&lt;/xd:li&gt;
                &lt;xd:li&gt;see also (xd:see)&lt;/xd:li&gt;
                &lt;xd:li&gt;deprecated since version (xd:deprecated)&lt;/xd:li&gt;
                &lt;xd:li&gt;import statements (xd:import and xsl:import)&lt;/xd:li&gt;
                &lt;xd:li&gt;include statements (xd:include and xsl:include)&lt;/xd:li&gt;
                &lt;xd:li&gt;parameters (xd:param and xsl:param)&lt;/xd:li&gt;
                &lt;xd:li&gt;return values / output (xd:return)&lt;/xd:li&gt;
            &lt;/xd:ul&gt;
        
        
    &lt;/xd:detail&gt;&lt;xd:return&gt;The normalized xd:doc.&lt;/xd:return&gt;&lt;/xd:doc&gt;
    &lt;xsl:template match="xd:doc"&gt;
        &lt;xsl:copy&gt;
            &lt;xsl:variable name="target"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="@target"&gt;
                        &lt;xsl:value-of select="@target"/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="count(preceding-sibling::*)=0"&gt;
                        &lt;xsl:value-of select="'parent'"/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:value-of select="'following'"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:variable&gt;
            &lt;xsl:variable name="code" select="if ($target='parent') then parent::* else following-sibling::*[1]"/&gt;

            &lt;xsl:attribute name="target" select="$target"/&gt;

            &lt;xsl:call-template name="short"/&gt;
            &lt;xsl:call-template name="detail"/&gt;
            &lt;xsl:call-template name="authors"/&gt;
            &lt;xsl:call-template name="contributors"/&gt;
            &lt;xsl:call-template name="maintainers"/&gt;
            &lt;xsl:call-template name="copyright"/&gt;
            &lt;xsl:call-template name="version"/&gt;
            &lt;xsl:call-template name="since"/&gt;
            &lt;xsl:call-template name="see"/&gt;
            &lt;xsl:call-template name="deprecated"/&gt;
            &lt;xsl:call-template name="import"&gt;
                &lt;xsl:with-param name="code" select="$code"/&gt;
            &lt;/xsl:call-template&gt;
            &lt;xsl:call-template name="include"&gt;
                &lt;xsl:with-param name="code" select="$code"/&gt;
            &lt;/xsl:call-template&gt;
            &lt;xsl:call-template name="param"&gt;
                &lt;xsl:with-param name="code" select="$code"/&gt;
            &lt;/xsl:call-template&gt;
            &lt;xsl:call-template name="return"/&gt;
        &lt;/xsl:copy&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Determines the short description.&lt;/xd:short&gt;&lt;xd:detail&gt;
        
        
            &lt;xd:ul&gt;
                &lt;xd:li&gt;If there is no &amp;lt;xd:short/&amp;gt;-element present, but plain text is present as a
                    child of the &amp;lt;xd:doc/&amp;gt;element, then the first sentence from that text (up
                    until the first period (".") will be used as a short description.&lt;/xd:li&gt;
                &lt;xd:li&gt;Else; if there are multiple &amp;lt;xd:short/&amp;gt;-elements, each one of their
                    contents will be wrapped in separate &amp;lt;section/&amp;gt;s.&lt;/xd:li&gt;
                &lt;xd:li&gt;Else; use the one &amp;lt;xd:short/&amp;gt;-element that is present for the short
                    description.&lt;/xd:li&gt;
            &lt;/xd:ul&gt;
        
    &lt;/xd:detail&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="short"&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="count(child::*[local-name()='short'])&amp;gt;1"&gt;
                &lt;xd:short&gt;
                    &lt;xsl:for-each select="child::*[local-name()='short']"&gt;
                        &lt;xd:section&gt;
                            &lt;xsl:apply-templates mode="section"/&gt;
                        &lt;/xd:section&gt;
                    &lt;/xsl:for-each&gt;
                &lt;/xd:short&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="count(child::*[local-name()='short'])=1"&gt;
                &lt;xd:short&gt;
                    &lt;xsl:apply-templates select="child::*[local-name()='short']/node()" mode="section"/&gt;
                &lt;/xd:short&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="child::text()[string-length(normalize-space())&amp;gt;0]"&gt;
                &lt;xsl:variable name="short" select="replace(normalize-space(child::text()[1]),'^([^\.]+\.?)\s?.*$','$1')"/&gt;
                &lt;xd:short&gt;
                    &lt;xsl:value-of select="$short"/&gt;
                &lt;/xd:short&gt;
            &lt;/xsl:when&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Determines the detailed description.&lt;/xd:short&gt;&lt;xd:detail&gt;
        
        The detailed description will be put together based on any number of
            &amp;lt;xd:detail/&amp;gt;-elements, as well as any number of text nodes that are direct
            children of the &amp;lt;xd:doc/&amp;gt;-element. If the xd:short was extracted from the first
            text node, then the first sentence from that text node will be ignored. If there are
            multiple &amp;lt;xd:detail/&amp;gt; and text nodes, then each of them will be wrapped in
            &amp;lt;xd:section/&amp;gt;s.
    &lt;/xd:detail&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="detail"&gt;
        &lt;xsl:variable name="shortInFirstText" select="count(./*[local-name()='short'])=0"/&gt;
        &lt;xsl:variable name="detailCount" select="(if (matches(normalize-space(./text()[1]),'\.[^\.].')) then 1 else 0) + count(*[local-name()='detail' and (descendant-or-self::node()[self::text() and string-length(normalize-space())&amp;gt;0 or local-name()='pre' and not(ancestor::*[local-name()='pre'])])]) + count(./text()[not(position()=1) and string-length(normalize-space())&amp;gt;0])"/&gt;
        &lt;xsl:if test="$detailCount&amp;gt;0"&gt;
            &lt;xd:detail&gt;
                &lt;xsl:for-each select="*|text()"&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="self::text() and count(preceding-sibling::text()[string-length(normalize-space())&amp;gt;0])=0"&gt;
                            &lt;!-- first text --&gt;
                            &lt;xsl:choose&gt;
                                &lt;xsl:when test="$shortInFirstText"&gt;
                                    &lt;xsl:variable name="detail" select="replace(normalize-space(),'^[^\.]+.?\s?(.*)$','$1')"/&gt;
                                    &lt;xsl:choose&gt;
                                        &lt;xsl:when test="$detailCount&amp;gt;1"&gt;
                                            &lt;xd:section&gt;
                                                &lt;xsl:value-of select="$detail"/&gt;
                                            &lt;/xd:section&gt;
                                        &lt;/xsl:when&gt;
                                        &lt;xsl:otherwise&gt;
                                            &lt;xsl:value-of select="$detail"/&gt;
                                        &lt;/xsl:otherwise&gt;
                                    &lt;/xsl:choose&gt;
                                &lt;/xsl:when&gt;
                                &lt;xsl:otherwise&gt;
                                    &lt;xsl:choose&gt;
                                        &lt;xsl:when test="$detailCount&amp;gt;1"&gt;
                                            &lt;xd:section&gt;
                                                &lt;xsl:value-of select="."/&gt;
                                            &lt;/xd:section&gt;
                                        &lt;/xsl:when&gt;
                                        &lt;xsl:otherwise&gt;
                                            &lt;xsl:value-of select="."/&gt;
                                        &lt;/xsl:otherwise&gt;
                                    &lt;/xsl:choose&gt;
                                &lt;/xsl:otherwise&gt;
                            &lt;/xsl:choose&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="self::text()"&gt;
                            &lt;!-- non-first text --&gt;
                            &lt;xsl:choose&gt;
                                &lt;xsl:when test="$detailCount&amp;gt;1"&gt;
                                    &lt;xd:section&gt;
                                        &lt;xsl:value-of select="."/&gt;
                                    &lt;/xd:section&gt;
                                &lt;/xsl:when&gt;
                                &lt;xsl:otherwise&gt;
                                    &lt;xsl:value-of select="."/&gt;
                                &lt;/xsl:otherwise&gt;
                            &lt;/xsl:choose&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="local-name()='detail'"&gt;
                            &lt;!-- detail element --&gt;
                            &lt;xsl:choose&gt;
                                &lt;xsl:when test="$detailCount&amp;gt;1"&gt;
                                    &lt;xd:section&gt;
                                        &lt;xsl:apply-templates select="child::node()" mode="section"/&gt;
                                    &lt;/xd:section&gt;
                                &lt;/xsl:when&gt;
                                &lt;xsl:otherwise&gt;
                                    &lt;xsl:apply-templates select="child::node()" mode="section"/&gt;
                                &lt;/xsl:otherwise&gt;
                            &lt;/xsl:choose&gt;
                        &lt;/xsl:when&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xsl:for-each&gt;
            &lt;/xd:detail&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes the xd:author-elements.&lt;/xd:short&gt;&lt;xd:detail&gt;&amp;gt;xd:author/&amp;lt;s with no text are removed. &amp;lt;xd:author/&amp;gt;s with no child elements will have their text content wrapped in a &amp;lt;xd:name/&amp;gt; element. Children other than xd:name, xd:mailto and xd:organization are ignored.&lt;/xd:detail&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="authors" xml:id="authors"&gt;
        &lt;xsl:for-each select="*[local-name()='author']"&gt;
            &lt;xsl:variable name="is-empty" select="count(descendant-or-self::text()[string-length(normalize-space())&amp;gt;0])=0"/&gt;
            &lt;xsl:if test="not($is-empty)"&gt;
                &lt;xd:author&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="count(child::*)=0"&gt;
                            &lt;xd:name&gt;
                                &lt;xsl:value-of select="."/&gt;
                            &lt;/xd:name&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:if test="child::*[local-name()='name']"&gt;
                                &lt;xd:name&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='name']"/&gt;
                                &lt;/xd:name&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='mailto']"&gt;
                                &lt;xd:mailto&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='mailto']"/&gt;
                                &lt;/xd:mailto&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='organization']"&gt;
                                &lt;xd:organization&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='organization']"/&gt;
                                &lt;/xd:organization&gt;
                            &lt;/xsl:if&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xd:author&gt;
            &lt;/xsl:if&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;&amp;lt;xd:contributor/&amp;gt;s are normalized in the same way as &amp;lt;xd:author/&amp;gt;s&lt;/xd:short&gt;&lt;xd:see&gt;#authors&lt;/xd:see&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="contributors"&gt;
        &lt;xsl:for-each select="*[local-name()='contributor']"&gt;
            &lt;xsl:variable name="is-empty" select="count(descendant-or-self::text()[string-length(normalize-space())&amp;gt;0])=0"/&gt;
            &lt;xsl:if test="not($is-empty)"&gt;
                &lt;xd:contributor&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="count(child::*)=0"&gt;
                            &lt;xd:name&gt;
                                &lt;xsl:value-of select="."/&gt;
                            &lt;/xd:name&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:if test="child::*[local-name()='name']"&gt;
                                &lt;xd:name&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='name']"/&gt;
                                &lt;/xd:name&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='mailto']"&gt;
                                &lt;xd:mailto&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='mailto']"/&gt;
                                &lt;/xd:mailto&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='organization']"&gt;
                                &lt;xd:organization&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='organization']"/&gt;
                                &lt;/xd:organization&gt;
                            &lt;/xsl:if&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xd:contributor&gt;
            &lt;/xsl:if&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;&amp;lt;xd:maintainer/&amp;gt;s are normalized in the same way as &amp;lt;xd:author/&amp;gt;s&lt;/xd:short&gt;&lt;xd:see&gt;#authors&lt;/xd:see&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="maintainers"&gt;
        &lt;xsl:for-each select="*[local-name()='maintainer']"&gt;
            &lt;xsl:variable name="is-empty" select="count(descendant-or-self::text()[string-length(normalize-space())&amp;gt;0])=0"/&gt;
            &lt;xsl:if test="not($is-empty)"&gt;
                &lt;xd:maintainer&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="count(child::*)=0"&gt;
                            &lt;xd:name&gt;
                                &lt;xsl:value-of select="."/&gt;
                            &lt;/xd:name&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:if test="child::*[local-name()='name']"&gt;
                                &lt;xd:name&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='name']"/&gt;
                                &lt;/xd:name&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='mailto']"&gt;
                                &lt;xd:mailto&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='mailto']"/&gt;
                                &lt;/xd:mailto&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='organization']"&gt;
                                &lt;xd:organization&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='organization']"/&gt;
                                &lt;/xd:organization&gt;
                            &lt;/xsl:if&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xd:maintainer&gt;
            &lt;/xsl:if&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes the xd:copyright-element.&lt;/xd:short&gt;&lt;xd:detail&gt;&amp;gt;xd:copyright/&amp;lt;s with no text are removed. &amp;lt;xd:copyright/&amp;gt;s with no child elements will have their text content wrapped in a &amp;lt;xd:name/&amp;gt; element. Children other than xd:year, xd:name, xd:mailto and xd:organization are ignored.&lt;/xd:detail&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="copyright"&gt;
        &lt;xsl:for-each select="*[local-name()='copyright']"&gt;
            &lt;xsl:variable name="is-empty" select="count(descendant-or-self::text()[string-length(normalize-space())&amp;gt;0])=0"/&gt;
            &lt;xsl:if test="not($is-empty)"&gt;
                &lt;xd:copyright&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="count(child::*)=0"&gt;
                            &lt;xd:name&gt;
                                &lt;xsl:value-of select="."/&gt;
                            &lt;/xd:name&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:if test="child::*[local-name()='year']"&gt;
                                &lt;xd:year&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='year']"/&gt;
                                &lt;/xd:year&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='name']"&gt;
                                &lt;xd:name&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='name']"/&gt;
                                &lt;/xd:name&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='mailto']"&gt;
                                &lt;xd:mailto&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='mailto']"/&gt;
                                &lt;/xd:mailto&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='organization']"&gt;
                                &lt;xd:organization&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='organization']"/&gt;
                                &lt;/xd:organization&gt;
                            &lt;/xsl:if&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xd:copyright&gt;
            &lt;/xsl:if&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:version elements.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="version"&gt;
        &lt;xsl:if test="child::*[local-name()='version' and string-length(normalize-space(./text()))&amp;gt;0]"&gt;
            &lt;xd:version&gt;
                &lt;xsl:value-of select="child::*[local-name()='version' and string-length(normalize-space(./text()))&amp;gt;0]"/&gt;
            &lt;/xd:version&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:since elements.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="since"&gt;
        &lt;xsl:if test="child::*[local-name()='since' and string-length(normalize-space(./text()))&amp;gt;0]"&gt;
            &lt;xd:since&gt;
                &lt;xsl:value-of select="child::*[local-name()='since' and string-length(normalize-space(./text()))&amp;gt;0]"/&gt;
            &lt;/xd:since&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:see elements.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="see"&gt;
        &lt;xsl:if test="child::*[local-name()='see' and string-length(normalize-space(./text()))&amp;gt;0]"&gt;
            &lt;xd:see&gt;
                &lt;xsl:value-of select="child::*[local-name()='see' and string-length(normalize-space(./text()))&amp;gt;0]"/&gt;
            &lt;/xd:see&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:deprecated elements.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="deprecated"&gt;
        &lt;xsl:if test="child::*[local-name()='deprecated' and string-length(normalize-space(./text()))&amp;gt;0]"&gt;
            &lt;xd:deprecated&gt;
                &lt;xsl:value-of select="child::*[local-name()='deprecated' and string-length(normalize-space(./text()))&amp;gt;0]"/&gt;
            &lt;/xd:deprecated&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:import elements.&lt;/xd:short&gt;&lt;xd:detail&gt;Will create empty documentation for imports that are not documented, and removes documentation of imports that does not exist in the code.&lt;/xd:detail&gt;&lt;xd:param name="code"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="import"&gt;
        &lt;xsl:param name="code" required="yes"/&gt;
        &lt;xsl:variable name="doc" select="."/&gt;
        &lt;xsl:for-each select="$code/xsl:import"&gt;
            &lt;xsl:variable name="href" select="@href"/&gt;
            &lt;xd:import href="{@href}"&gt;
                &lt;xsl:if test="$doc/*[local-name()='import' and @href=$href]"&gt;
                    &lt;xsl:value-of select="$doc/*[local-name()='import' and @href=$href]"/&gt;
                &lt;/xsl:if&gt;
            &lt;/xd:import&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:include elements.&lt;/xd:short&gt;&lt;xd:detail&gt;Will create empty documentation for includes that are not documented, and removes documentation of includes that does not exist in the code.&lt;/xd:detail&gt;&lt;xd:param name="code"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="include"&gt;
        &lt;xsl:param name="code" required="yes"/&gt;
        &lt;xsl:variable name="doc" select="."/&gt;
        &lt;xsl:for-each select="$code/xsl:include"&gt;
            &lt;xsl:variable name="href" select="@href"/&gt;
            &lt;xd:include href="{@href}"&gt;
                &lt;xsl:if test="$doc/*[local-name()='include' and @href=$href]"&gt;
                    &lt;xsl:value-of select="$doc/*[local-name()='include' and @href=$href]"/&gt;
                &lt;/xsl:if&gt;
            &lt;/xd:include&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:import elements.&lt;/xd:short&gt;&lt;xd:detail&gt;Will create empty documentation for imports that are not documented, and removes documentation of imports that does not exist in the code.&lt;/xd:detail&gt;&lt;xd:param name="code"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="param"&gt;
        &lt;xsl:param name="code" required="yes"/&gt;
        &lt;xsl:variable name="doc" select="."/&gt;
        &lt;xsl:for-each select="*[local-name()='param']"&gt;
            &lt;xd:param&gt;
                &lt;xsl:apply-templates select="@*"/&gt;
                &lt;xsl:apply-templates mode="section" select="node()"/&gt;
            &lt;/xd:param&gt;
        &lt;/xsl:for-each&gt;
        &lt;xsl:for-each select="$code/xsl:param"&gt;
            &lt;xsl:variable name="name" select="@name"/&gt;
            &lt;xsl:if test="not($doc/*[local-name()='param' and @name=$name])"&gt;
                &lt;xd:param name="{@name}"/&gt;
            &lt;/xsl:if&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Describes the result of the code.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="return"&gt;
        &lt;xsl:variable name="is-empty" select="count(*[local-name()='return']/descendant-or-self::node()[self::text() and string-length(normalize-space())&amp;gt;0 or local-name()='pre'])=0"/&gt;
        &lt;xsl:if test="not($is-empty)"&gt;
            &lt;xd:return&gt;
                &lt;xsl:apply-templates mode="section" select="*[local-name()='return']/node()"/&gt;
            &lt;/xd:return&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Matches all elements when in "section"-mode.&lt;/xd:short&gt;&lt;xd:detail&gt;
        
        Checks all child elements and their descendants and wraps and handles as is
            appropriate. If a child or descendant is placed in a problematic position, then one of
            the unwrap*-templates are called to solve the problem. Otherwise, just make sure that
            the element is in the correct namespace and copy it.
    &lt;/xd:detail&gt;&lt;xd:param name="wrapin-p"/&gt;&lt;xd:param name="wrapin-ul"/&gt;&lt;xd:param name="wrapin-li"/&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template mode="section" match="@*|node()"&gt;
        &lt;xsl:param name="wrapin-p" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-ul" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-li" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:variable name="is-empty" select="count(descendant-or-self::node()[self::text() and string-length(normalize-space())&amp;gt;0 or local-name()='pre'])=0"/&gt;
        &lt;xsl:variable name="contains-section" select="count(descendant::*[local-name()='section'])&amp;gt;0"/&gt;
        &lt;xsl:variable name="contains-block" select="count(descendant::*[local-name()='ul' or local-name()='li' or local-name()='pre' or local-name()='p'])&amp;gt;0"/&gt;
        &lt;xsl:variable name="contains-block-non-li" select="count(descendant::*[local-name()='ul' or local-name()='pre' or local-name()='p'])&amp;gt;0"/&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="local-name()='section'"&gt;
                &lt;xd:section&gt;
                    &lt;xsl:apply-templates mode="section" select="@*|node()"/&gt;
                &lt;/xd:section&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='p'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$contains-section or $contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-p" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:p&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:p&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='pre'"&gt;
                &lt;xd:pre&gt;
                    &lt;xsl:copy-of select="@*|node()"/&gt;
                &lt;/xd:pre&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='ul'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-section"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$contains-block-non-li"&gt;
                        &lt;xd:section&gt;
                            &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                                &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                            &lt;/xsl:call-template&gt;
                        &lt;/xd:section&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="count(descendant::*[local-name()='li'])=0"&gt;
                        &lt;xsl:choose&gt;
                            &lt;xsl:when test="count(child::node()[self::* or self::text() and string-length(normalize-space())&amp;gt;0])&amp;gt;1"&gt;
                                &lt;xd:section&gt;
                                    &lt;xsl:apply-templates mode="section" select="@*|node()"&gt;
                                        &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                                        &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                                    &lt;/xsl:apply-templates&gt;
                                &lt;/xd:section&gt;
                            &lt;/xsl:when&gt;
                            &lt;xsl:otherwise&gt;
                                &lt;xsl:apply-templates mode="section" select="@*|node()"&gt;
                                    &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                                &lt;/xsl:apply-templates&gt;
                            &lt;/xsl:otherwise&gt;
                        &lt;/xsl:choose&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:ul&gt;
                            &lt;xsl:apply-templates mode="list" select="@*|node()"&gt;
                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:ul&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='li'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-section"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:ul&gt;
                            &lt;xd:li&gt;
                                &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                            &lt;/xd:li&gt;
                        &lt;/xd:ul&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='b'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-section"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-b" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-b" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:b&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:b&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='i'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-section"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-i" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-i" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:i&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:i&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='a'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-section"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-a" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-a-elem" select="." tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-a" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-a-elem" select="." tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:a&gt;
                            &lt;xsl:apply-templates select="@*"/&gt;
                            &lt;xsl:apply-templates mode="phrase" select="node()"/&gt;
                        &lt;/xd:a&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="self::*"&gt;
                        &lt;xsl:choose&gt;
                            &lt;xsl:when test="not(preceding-sibling::*) and not(following-sibling::*)"&gt;
                                &lt;xsl:apply-templates mode="section" select="@*|node()"/&gt;
                            &lt;/xsl:when&gt;
                            &lt;xsl:otherwise&gt;
                                &lt;xd:section&gt;
                                    &lt;xsl:apply-templates mode="section" select="@*|node()"/&gt;
                                &lt;/xd:section&gt;
                            &lt;/xsl:otherwise&gt;
                        &lt;/xsl:choose&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="self::text()"&gt;
                        &lt;xsl:copy/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="section" select="@*|node()"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Handles non-problematic lists.&lt;/xd:short&gt;&lt;xd:param name="wrapin-p"/&gt;&lt;xd:param name="wrapin-ul"/&gt;&lt;xd:param name="wrapin-li"/&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template mode="list" match="@*|node()"&gt;
        &lt;xsl:param name="wrapin-p" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-ul" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-li" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:variable name="is-empty" select="count(descendant-or-self::node()[self::text() and string-length(normalize-space())&amp;gt;0 or local-name()='pre'])=0"/&gt;
        &lt;xsl:variable name="contains-block" select="count(descendant::*[local-name()='ul' or local-name()='li' or local-name()='pre' or local-name()='p'])&amp;gt;0"/&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="local-name()='li'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$wrapin-ul"&gt;
                        &lt;xd:ul&gt;
                            &lt;xd:li&gt;
                                &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                            &lt;/xd:li&gt;
                        &lt;/xd:ul&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:li&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:li&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="self::text()"&gt;
                        &lt;xsl:copy/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="list" select="@*|node()"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Handles all elements when in "block" mode and applies fixes where needed.&lt;/xd:short&gt;&lt;xd:param name="wrapin-p"/&gt;&lt;xd:param name="wrapin-ul"/&gt;&lt;xd:param name="wrapin-li"/&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template mode="block" match="@*|node()"&gt;
        &lt;xsl:param name="wrapin-p" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-ul" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-li" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:variable name="element" select="."/&gt;
        &lt;xsl:variable name="is-empty" select="count(descendant-or-self::node()[self::* or self::text() and string-length(normalize-space())&amp;gt;0])=0"/&gt;
        &lt;xsl:variable name="contains-block" select="count(descendant::*[local-name()='ul' or local-name()='li' or local-name()='pre' or local-name()='p'])&amp;gt;0"/&gt;
        &lt;xsl:variable name="contains-block-non-li" select="count(descendant::*[local-name()='ul' or local-name()='pre' or local-name()='p'])&amp;gt;0"/&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="local-name()='p'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:p&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:p&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='pre'"&gt;
                &lt;xd:pre&gt;
                    &lt;xsl:copy-of select="@*|node()"/&gt;
                &lt;/xd:pre&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='ul'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block-non-li"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="count(descendant::*[local-name()='li' and string-length(normalize-space(descendant-or-self::text()))&amp;gt;0])=0"&gt;
                        &lt;xsl:apply-templates mode="block" select="@*|node()"/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:ul&gt;
                            &lt;xsl:apply-templates mode="list" select="@*|node()"&gt;
                                &lt;xsl:with-param name="wrapin-ul" select="false()"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:ul&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='li'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:ul&gt;
                            &lt;xd:li&gt;
                                &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                                    &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                &lt;/xsl:apply-templates&gt;
                            &lt;/xd:li&gt;
                        &lt;/xd:ul&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="not($contains-block) and $wrapin-p"&gt;
                &lt;xd:p&gt;
                    &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                        &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                        &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                        &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                    &lt;/xsl:apply-templates&gt;
                &lt;/xd:p&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="not($contains-block) and $wrapin-li"&gt;
                &lt;xd:ul&gt;
                    &lt;xd:li&gt;
                        &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                            &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xd:li&gt;
                &lt;/xd:ul&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='b'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-b" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:b&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:b&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='i'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-i" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:i&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:i&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='a'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-a" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-a-elem" select="$element" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:a&gt;
                            &lt;xsl:apply-templates mode="phrase" select="$element/@*"/&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:a&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="self::text()"&gt;
                        &lt;xsl:copy/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="block" select="@*|node()"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Phrases are matched with this template (mode="phrase") and handled appropriately.&lt;/xd:short&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template mode="phrase" match="@*|node()"&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="local-name()='b'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='b'])"&gt;
                        &lt;xd:b&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:b&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="$wrapin-b"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='b'])"&gt;
                        &lt;xd:b&gt;
                            &lt;xsl:apply-templates mode="phrase" select="."&gt;
                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:b&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="."&gt;
                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='i'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='i'])"&gt;
                        &lt;xd:i&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:i&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="$wrapin-i"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='i'])"&gt;
                        &lt;xd:i&gt;
                            &lt;xsl:apply-templates mode="phrase" select="."&gt;
                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:i&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="."&gt;
                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='a'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='a'])"&gt;
                        &lt;xd:a&gt;
                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                            &lt;xsl:apply-templates mode="phrase" select="node()"&gt;
                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:a&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="$wrapin-a"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='a'])"&gt;
                        &lt;xd:a&gt;
                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                            &lt;xsl:apply-templates mode="phrase" select="."&gt;
                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:a&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="."&gt;
                            &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="self::text()"&gt;
                        &lt;xsl:copy/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;This template unwraps problematic elements into sections.&lt;/xd:short&gt;&lt;xd:param name="wasWrapped"/&gt;&lt;xd:param name="wrapin-p"/&gt;&lt;xd:param name="wrapin-ul"/&gt;&lt;xd:param name="wrapin-li"/&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="unwrap-to-sections"&gt;
        &lt;xsl:param name="wasWrapped" select="false()"/&gt;
        &lt;xsl:param name="wrapin-p" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-ul" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-li" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:variable name="element" select="."/&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="not($wasWrapped) and count(child::node()[self::* or self::text() and string-length(normalize-space())&amp;gt;0])&amp;gt;1"&gt;
                &lt;xd:section&gt;
                    &lt;xsl:call-template name="unwrap-to-sections"&gt;
                        &lt;xsl:with-param name="wasWrapped" select="true()"/&gt;
                    &lt;/xsl:call-template&gt;
                &lt;/xd:section&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
                &lt;xsl:for-each-group select="child::node()[self::* or self::text() and string-length(normalize-space())&amp;gt;0]" group-adjacent="self::* and not(ancestor::*[local-name()='pre']) and (local-name()='section' or local-name()='ul' or local-name()='li' or local-name()='pre' or local-name()='p')"&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="current-grouping-key()"&gt;
                            &lt;xsl:choose&gt;
                                &lt;xsl:when test="count(current-group())&amp;gt;1 and last()&amp;gt;1"&gt;
                                    &lt;xd:section&gt;
                                        &lt;xsl:apply-templates mode="section" select="current-group()"&gt;
                                            &lt;xsl:with-param name="wrapin-p" tunnel="yes" select="if ($wrapin-p or local-name($element)='p') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-ul" tunnel="yes" select="if ($wrapin-ul or local-name($element)='ul') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-li" tunnel="yes" select="if ($wrapin-li or local-name($element)='li') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-b" tunnel="yes" select="if ($wrapin-b or local-name($element)='b') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-i" tunnel="yes" select="if ($wrapin-i or local-name($element)='i') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-a" tunnel="yes" select="if ($wrapin-a or local-name($element)='a') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-a-elem" tunnel="yes" select="if (not($wrapin-a) and local-name($element)='a') then $element else false()"/&gt;
                                        &lt;/xsl:apply-templates&gt;
                                    &lt;/xd:section&gt;
                                &lt;/xsl:when&gt;
                                &lt;xsl:otherwise&gt;
                                    &lt;xsl:apply-templates mode="section" select="current-group()"&gt;
                                        &lt;xsl:with-param name="wrapin-p" tunnel="yes" select="if ($wrapin-p or local-name($element)='p') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-ul" tunnel="yes" select="if ($wrapin-ul or local-name($element)='ul') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-li" tunnel="yes" select="if ($wrapin-li or local-name($element)='li') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-b" tunnel="yes" select="if ($wrapin-b or local-name($element)='b') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-i" tunnel="yes" select="if ($wrapin-i or local-name($element)='i') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-a" tunnel="yes" select="if ($wrapin-a or local-name($element)='a') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-a-elem" tunnel="yes" select="if (not($wrapin-a) and local-name($element)='a') then $element else false()"/&gt;
                                    &lt;/xsl:apply-templates&gt;
                                &lt;/xsl:otherwise&gt;
                            &lt;/xsl:choose&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:element name="xd:{local-name($element)}"&gt;
                                &lt;xsl:for-each select="$element/@*"&gt;
                                    &lt;xsl:attribute name="xd:{local-name()}" select="."/&gt;
                                &lt;/xsl:for-each&gt;
                                &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                    &lt;xsl:with-param name="wrapin-p" tunnel="yes" select="if ($wrapin-p or local-name($element)='p') then false() else $wrapin-p"/&gt;
                                    &lt;xsl:with-param name="wrapin-ul" tunnel="yes" select="if ($wrapin-ul or local-name($element)='ul') then false() else $wrapin-ul"/&gt;
                                    &lt;xsl:with-param name="wrapin-li" tunnel="yes" select="if ($wrapin-li or local-name($element)='li') then false() else $wrapin-li"/&gt;
                                    &lt;xsl:with-param name="wrapin-b" tunnel="yes" select="if ($wrapin-b or local-name($element)='b') then false() else $wrapin-b"/&gt;
                                    &lt;xsl:with-param name="wrapin-i" tunnel="yes" select="if ($wrapin-i or local-name($element)='i') then false() else $wrapin-i"/&gt;
                                    &lt;xsl:with-param name="wrapin-a" tunnel="yes" select="if ($wrapin-a or local-name($element)='a') then false() else $wrapin-a"/&gt;
                                &lt;/xsl:apply-templates&gt;
                            &lt;/xsl:element&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xsl:for-each-group&gt;
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;This template unwraps problematic elements into blocks.&lt;/xd:short&gt;&lt;xd:param name="wrapin-p"/&gt;&lt;xd:param name="wrapin-ul"/&gt;&lt;xd:param name="wrapin-li"/&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="unwrap-to-blocks"&gt;
        &lt;xsl:param name="wrapin-p" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-ul" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-li" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:variable name="element" select="."/&gt;
        &lt;xsl:for-each-group select="child::node()[self::* or self::text() and string-length(normalize-space())&amp;gt;0]" group-adjacent="count(descendant-or-self::*[local-name()='ul' or local-name()='li' or local-name()='pre' or local-name()='p'])&amp;gt;0"&gt;
            &lt;xsl:choose&gt;
                &lt;xsl:when test="current-grouping-key()"&gt;
                    &lt;xsl:for-each select="current-group()"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-p" select="$wrapin-p or local-name()='p' or local-name($element)='p'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="$wrapin-ul or local-name()='ul' or local-name($element)='ul'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="$wrapin-li or local-name()='li' or local-name($element)='li'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-b" select="$wrapin-b or local-name()='b' or local-name($element)='b'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-i" select="$wrapin-i or local-name()='i' or local-name($element)='i'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-a" select="$wrapin-a or local-name()='a' or local-name($element)='a'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-a-elem" select="if (local-name()='a') then . else (if (local-name($element)='a') then $element else $wrapin-a-elem)" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:for-each&gt;
                &lt;/xsl:when&gt;
                &lt;xsl:otherwise&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="$wrapin-p"&gt;
                            &lt;xd:p&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="$wrapin-b"&gt;
                                        &lt;xd:b&gt;
                                            &lt;xsl:choose&gt;
                                                &lt;xsl:when test="$wrapin-i"&gt;
                                                  &lt;xd:i&gt;
                                                  &lt;xsl:choose&gt;
                                                  &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                  &lt;/xsl:when&gt;
                                                  &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xsl:otherwise&gt;
                                                  &lt;/xsl:choose&gt;
                                                  &lt;/xd:i&gt;
                                                &lt;/xsl:when&gt;
                                                &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                &lt;/xsl:otherwise&gt;
                                            &lt;/xsl:choose&gt;
                                        &lt;/xd:b&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:when test="$wrapin-i"&gt;
                                        &lt;xd:i&gt;
                                            &lt;xsl:choose&gt;
                                                &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                &lt;/xsl:when&gt;
                                                &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                &lt;/xsl:otherwise&gt;
                                            &lt;/xsl:choose&gt;
                                        &lt;/xd:i&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:when test="$wrapin-a"&gt;
                                        &lt;xd:a&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                            &lt;/xsl:apply-templates&gt;
                                        &lt;/xd:a&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                            &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                        &lt;/xsl:apply-templates&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xd:p&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="$wrapin-li"&gt;
                            &lt;xd:ul&gt;
                                &lt;xd:li&gt;
                                    &lt;xsl:choose&gt;
                                        &lt;xsl:when test="$wrapin-b"&gt;
                                            &lt;xd:b&gt;
                                                &lt;xsl:choose&gt;
                                                  &lt;xsl:when test="$wrapin-i"&gt;
                                                  &lt;xd:i&gt;
                                                  &lt;xsl:choose&gt;
                                                  &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                  &lt;/xsl:when&gt;
                                                  &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xsl:otherwise&gt;
                                                  &lt;/xsl:choose&gt;
                                                  &lt;/xd:i&gt;
                                                  &lt;/xsl:when&gt;
                                                  &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xsl:otherwise&gt;
                                                &lt;/xsl:choose&gt;
                                            &lt;/xd:b&gt;
                                        &lt;/xsl:when&gt;
                                        &lt;xsl:when test="$wrapin-i"&gt;
                                            &lt;xd:i&gt;
                                                &lt;xsl:choose&gt;
                                                  &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                  &lt;/xsl:when&gt;
                                                  &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xsl:otherwise&gt;
                                                &lt;/xsl:choose&gt;
                                            &lt;/xd:i&gt;
                                        &lt;/xsl:when&gt;
                                        &lt;xsl:when test="$wrapin-a"&gt;
                                            &lt;xd:a&gt;
                                                &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                &lt;/xsl:apply-templates&gt;
                                            &lt;/xd:a&gt;
                                        &lt;/xsl:when&gt;
                                        &lt;xsl:otherwise&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                            &lt;/xsl:apply-templates&gt;
                                        &lt;/xsl:otherwise&gt;
                                    &lt;/xsl:choose&gt;
                                &lt;/xd:li&gt;
                            &lt;/xd:ul&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="$wrapin-ul"&gt;
                            &lt;xd:p&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="$wrapin-b"&gt;
                                        &lt;xd:b&gt;
                                            &lt;xsl:choose&gt;
                                                &lt;xsl:when test="$wrapin-i"&gt;
                                                  &lt;xd:i&gt;
                                                  &lt;xsl:choose&gt;
                                                  &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                  &lt;/xsl:when&gt;
                                                  &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xsl:otherwise&gt;
                                                  &lt;/xsl:choose&gt;
                                                  &lt;/xd:i&gt;
                                                &lt;/xsl:when&gt;
                                                &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                &lt;/xsl:otherwise&gt;
                                            &lt;/xsl:choose&gt;
                                        &lt;/xd:b&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:when test="$wrapin-i"&gt;
                                        &lt;xd:i&gt;
                                            &lt;xsl:choose&gt;
                                                &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                &lt;/xsl:when&gt;
                                                &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                &lt;/xsl:otherwise&gt;
                                            &lt;/xsl:choose&gt;
                                        &lt;/xd:i&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:when test="$wrapin-a"&gt;
                                        &lt;xd:a&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                            &lt;/xsl:apply-templates&gt;
                                        &lt;/xd:a&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                            &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                        &lt;/xsl:apply-templates&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xd:p&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="$wrapin-b"&gt;
                            &lt;xd:b&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="$wrapin-i"&gt;
                                        &lt;xd:i&gt;
                                            &lt;xsl:choose&gt;
                                                &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                &lt;/xsl:when&gt;
                                                &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                &lt;/xsl:otherwise&gt;
                                            &lt;/xsl:choose&gt;
                                        &lt;/xd:i&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:when test="$wrapin-a"&gt;
                                        &lt;xd:a&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                            &lt;/xsl:apply-templates&gt;
                                        &lt;/xd:a&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                            &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                        &lt;/xsl:apply-templates&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xd:b&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="$wrapin-i"&gt;
                            &lt;xd:i&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="$wrapin-a"&gt;
                                        &lt;xd:a&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                            &lt;/xsl:apply-templates&gt;
                                        &lt;/xd:a&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                            &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                        &lt;/xsl:apply-templates&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xd:i&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="$wrapin-a"&gt;
                            &lt;xd:a&gt;
                                &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                    &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                &lt;/xsl:apply-templates&gt;
                            &lt;/xd:a&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xsl:otherwise&gt;
            &lt;/xsl:choose&gt;
        &lt;/xsl:for-each-group&gt;
    &lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;&lt;/codeblock&gt;
    &lt;xsl:template name="detail"&gt;
        &lt;xsl:variable name="shortInFirstText" select="count(./*[local-name()='short'])=0"/&gt;
        &lt;xsl:variable name="detailCount" select="(if (matches(normalize-space(./text()[1]),'\.[^\.].')) then 1 else 0) + count(*[local-name()='detail' and (descendant-or-self::node()[self::text() and string-length(normalize-space())&amp;gt;0 or local-name()='pre' and not(ancestor::*[local-name()='pre'])])]) + count(./text()[not(position()=1) and string-length(normalize-space())&amp;gt;0])"/&gt;
        &lt;xsl:if test="$detailCount&amp;gt;0"&gt;
            &lt;xd:detail&gt;
                &lt;xsl:for-each select="*|text()"&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="self::text() and count(preceding-sibling::text()[string-length(normalize-space())&amp;gt;0])=0"&gt;
                            &lt;!-- first text --&gt;
                            &lt;xsl:choose&gt;
                                &lt;xsl:when test="$shortInFirstText"&gt;
                                    &lt;xsl:variable name="detail" select="replace(normalize-space(),'^[^\.]+.?\s?(.*)$','$1')"/&gt;
                                    &lt;xsl:choose&gt;
                                        &lt;xsl:when test="$detailCount&amp;gt;1"&gt;
                                            &lt;xd:section&gt;
                                                &lt;xsl:value-of select="$detail"/&gt;
                                            &lt;/xd:section&gt;
                                        &lt;/xsl:when&gt;
                                        &lt;xsl:otherwise&gt;
                                            &lt;xsl:value-of select="$detail"/&gt;
                                        &lt;/xsl:otherwise&gt;
                                    &lt;/xsl:choose&gt;
                                &lt;/xsl:when&gt;
                                &lt;xsl:otherwise&gt;
                                    &lt;xsl:choose&gt;
                                        &lt;xsl:when test="$detailCount&amp;gt;1"&gt;
                                            &lt;xd:section&gt;
                                                &lt;xsl:value-of select="."/&gt;
                                            &lt;/xd:section&gt;
                                        &lt;/xsl:when&gt;
                                        &lt;xsl:otherwise&gt;
                                            &lt;xsl:value-of select="."/&gt;
                                        &lt;/xsl:otherwise&gt;
                                    &lt;/xsl:choose&gt;
                                &lt;/xsl:otherwise&gt;
                            &lt;/xsl:choose&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="self::text()"&gt;
                            &lt;!-- non-first text --&gt;
                            &lt;xsl:choose&gt;
                                &lt;xsl:when test="$detailCount&amp;gt;1"&gt;
                                    &lt;xd:section&gt;
                                        &lt;xsl:value-of select="."/&gt;
                                    &lt;/xd:section&gt;
                                &lt;/xsl:when&gt;
                                &lt;xsl:otherwise&gt;
                                    &lt;xsl:value-of select="."/&gt;
                                &lt;/xsl:otherwise&gt;
                            &lt;/xsl:choose&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="local-name()='detail'"&gt;
                            &lt;!-- detail element --&gt;
                            &lt;xsl:choose&gt;
                                &lt;xsl:when test="$detailCount&amp;gt;1"&gt;
                                    &lt;xd:section&gt;
                                        &lt;xsl:apply-templates select="child::node()" mode="section"/&gt;
                                    &lt;/xd:section&gt;
                                &lt;/xsl:when&gt;
                                &lt;xsl:otherwise&gt;
                                    &lt;xsl:apply-templates select="child::node()" mode="section"/&gt;
                                &lt;/xsl:otherwise&gt;
                            &lt;/xsl:choose&gt;
                        &lt;/xsl:when&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xsl:for-each&gt;
            &lt;/xd:detail&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;codeblock&gt;&lt;xsl:stylesheet version="2.0"&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Identity template.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template match="@*|node()"&gt;
        &lt;xsl:copy&gt;
            &lt;xsl:apply-templates select="@*|node()"/&gt;
        &lt;/xsl:copy&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Matches each xd:doc element.&lt;/xd:short&gt;&lt;xd:detail&gt;
        
        Determines what code is being documented and calls appropriate templates for: &lt;xd:ul&gt;
                &lt;xd:li&gt;short description (xd:short)&lt;/xd:li&gt;
                &lt;xd:li&gt;detailed description (xd:detail)&lt;/xd:li&gt;
                &lt;xd:li&gt;authors (xd:author)&lt;/xd:li&gt;
                &lt;xd:li&gt;contributors (xd:contributor)&lt;/xd:li&gt;
                &lt;xd:li&gt;maintainers (xd:maintainer)&lt;/xd:li&gt;
                &lt;xd:li&gt;copyright (xd:copyright)&lt;/xd:li&gt;
                &lt;xd:li&gt;version (xd:version)&lt;/xd:li&gt;
                &lt;xd:li&gt;code existed since version (xd:since)&lt;/xd:li&gt;
                &lt;xd:li&gt;see also (xd:see)&lt;/xd:li&gt;
                &lt;xd:li&gt;deprecated since version (xd:deprecated)&lt;/xd:li&gt;
                &lt;xd:li&gt;import statements (xd:import and xsl:import)&lt;/xd:li&gt;
                &lt;xd:li&gt;include statements (xd:include and xsl:include)&lt;/xd:li&gt;
                &lt;xd:li&gt;parameters (xd:param and xsl:param)&lt;/xd:li&gt;
                &lt;xd:li&gt;return values / output (xd:return)&lt;/xd:li&gt;
            &lt;/xd:ul&gt;
        
        
    &lt;/xd:detail&gt;&lt;xd:return&gt;The normalized xd:doc.&lt;/xd:return&gt;&lt;/xd:doc&gt;
    &lt;xsl:template match="xd:doc"&gt;
        &lt;xsl:copy&gt;
            &lt;xsl:variable name="target"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="@target"&gt;
                        &lt;xsl:value-of select="@target"/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="count(preceding-sibling::*)=0"&gt;
                        &lt;xsl:value-of select="'parent'"/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:value-of select="'following'"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:variable&gt;
            &lt;xsl:variable name="code" select="if ($target='parent') then parent::* else following-sibling::*[1]"/&gt;

            &lt;xsl:attribute name="target" select="$target"/&gt;

            &lt;xsl:call-template name="short"/&gt;
            &lt;xsl:call-template name="detail"/&gt;
            &lt;xsl:call-template name="authors"/&gt;
            &lt;xsl:call-template name="contributors"/&gt;
            &lt;xsl:call-template name="maintainers"/&gt;
            &lt;xsl:call-template name="copyright"/&gt;
            &lt;xsl:call-template name="version"/&gt;
            &lt;xsl:call-template name="since"/&gt;
            &lt;xsl:call-template name="see"/&gt;
            &lt;xsl:call-template name="deprecated"/&gt;
            &lt;xsl:call-template name="import"&gt;
                &lt;xsl:with-param name="code" select="$code"/&gt;
            &lt;/xsl:call-template&gt;
            &lt;xsl:call-template name="include"&gt;
                &lt;xsl:with-param name="code" select="$code"/&gt;
            &lt;/xsl:call-template&gt;
            &lt;xsl:call-template name="param"&gt;
                &lt;xsl:with-param name="code" select="$code"/&gt;
            &lt;/xsl:call-template&gt;
            &lt;xsl:call-template name="return"/&gt;
        &lt;/xsl:copy&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Determines the short description.&lt;/xd:short&gt;&lt;xd:detail&gt;
        
        
            &lt;xd:ul&gt;
                &lt;xd:li&gt;If there is no &amp;lt;xd:short/&amp;gt;-element present, but plain text is present as a
                    child of the &amp;lt;xd:doc/&amp;gt;element, then the first sentence from that text (up
                    until the first period (".") will be used as a short description.&lt;/xd:li&gt;
                &lt;xd:li&gt;Else; if there are multiple &amp;lt;xd:short/&amp;gt;-elements, each one of their
                    contents will be wrapped in separate &amp;lt;section/&amp;gt;s.&lt;/xd:li&gt;
                &lt;xd:li&gt;Else; use the one &amp;lt;xd:short/&amp;gt;-element that is present for the short
                    description.&lt;/xd:li&gt;
            &lt;/xd:ul&gt;
        
    &lt;/xd:detail&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="short"&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="count(child::*[local-name()='short'])&amp;gt;1"&gt;
                &lt;xd:short&gt;
                    &lt;xsl:for-each select="child::*[local-name()='short']"&gt;
                        &lt;xd:section&gt;
                            &lt;xsl:apply-templates mode="section"/&gt;
                        &lt;/xd:section&gt;
                    &lt;/xsl:for-each&gt;
                &lt;/xd:short&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="count(child::*[local-name()='short'])=1"&gt;
                &lt;xd:short&gt;
                    &lt;xsl:apply-templates select="child::*[local-name()='short']/node()" mode="section"/&gt;
                &lt;/xd:short&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="child::text()[string-length(normalize-space())&amp;gt;0]"&gt;
                &lt;xsl:variable name="short" select="replace(normalize-space(child::text()[1]),'^([^\.]+\.?)\s?.*$','$1')"/&gt;
                &lt;xd:short&gt;
                    &lt;xsl:value-of select="$short"/&gt;
                &lt;/xd:short&gt;
            &lt;/xsl:when&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Determines the detailed description.&lt;/xd:short&gt;&lt;xd:detail&gt;
        
        The detailed description will be put together based on any number of
            &amp;lt;xd:detail/&amp;gt;-elements, as well as any number of text nodes that are direct
            children of the &amp;lt;xd:doc/&amp;gt;-element. If the xd:short was extracted from the first
            text node, then the first sentence from that text node will be ignored. If there are
            multiple &amp;lt;xd:detail/&amp;gt; and text nodes, then each of them will be wrapped in
            &amp;lt;xd:section/&amp;gt;s.
    &lt;/xd:detail&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="detail"&gt;
        &lt;xsl:variable name="shortInFirstText" select="count(./*[local-name()='short'])=0"/&gt;
        &lt;xsl:variable name="detailCount" select="(if (matches(normalize-space(./text()[1]),'\.[^\.].')) then 1 else 0) + count(*[local-name()='detail' and (descendant-or-self::node()[self::text() and string-length(normalize-space())&amp;gt;0 or local-name()='pre' and not(ancestor::*[local-name()='pre'])])]) + count(./text()[not(position()=1) and string-length(normalize-space())&amp;gt;0])"/&gt;
        &lt;xsl:if test="$detailCount&amp;gt;0"&gt;
            &lt;xd:detail&gt;
                &lt;xsl:for-each select="*|text()"&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="self::text() and count(preceding-sibling::text()[string-length(normalize-space())&amp;gt;0])=0"&gt;
                            &lt;!-- first text --&gt;
                            &lt;xsl:choose&gt;
                                &lt;xsl:when test="$shortInFirstText"&gt;
                                    &lt;xsl:variable name="detail" select="replace(normalize-space(),'^[^\.]+.?\s?(.*)$','$1')"/&gt;
                                    &lt;xsl:choose&gt;
                                        &lt;xsl:when test="$detailCount&amp;gt;1"&gt;
                                            &lt;xd:section&gt;
                                                &lt;xsl:value-of select="$detail"/&gt;
                                            &lt;/xd:section&gt;
                                        &lt;/xsl:when&gt;
                                        &lt;xsl:otherwise&gt;
                                            &lt;xsl:value-of select="$detail"/&gt;
                                        &lt;/xsl:otherwise&gt;
                                    &lt;/xsl:choose&gt;
                                &lt;/xsl:when&gt;
                                &lt;xsl:otherwise&gt;
                                    &lt;xsl:choose&gt;
                                        &lt;xsl:when test="$detailCount&amp;gt;1"&gt;
                                            &lt;xd:section&gt;
                                                &lt;xsl:value-of select="."/&gt;
                                            &lt;/xd:section&gt;
                                        &lt;/xsl:when&gt;
                                        &lt;xsl:otherwise&gt;
                                            &lt;xsl:value-of select="."/&gt;
                                        &lt;/xsl:otherwise&gt;
                                    &lt;/xsl:choose&gt;
                                &lt;/xsl:otherwise&gt;
                            &lt;/xsl:choose&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="self::text()"&gt;
                            &lt;!-- non-first text --&gt;
                            &lt;xsl:choose&gt;
                                &lt;xsl:when test="$detailCount&amp;gt;1"&gt;
                                    &lt;xd:section&gt;
                                        &lt;xsl:value-of select="."/&gt;
                                    &lt;/xd:section&gt;
                                &lt;/xsl:when&gt;
                                &lt;xsl:otherwise&gt;
                                    &lt;xsl:value-of select="."/&gt;
                                &lt;/xsl:otherwise&gt;
                            &lt;/xsl:choose&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="local-name()='detail'"&gt;
                            &lt;!-- detail element --&gt;
                            &lt;xsl:choose&gt;
                                &lt;xsl:when test="$detailCount&amp;gt;1"&gt;
                                    &lt;xd:section&gt;
                                        &lt;xsl:apply-templates select="child::node()" mode="section"/&gt;
                                    &lt;/xd:section&gt;
                                &lt;/xsl:when&gt;
                                &lt;xsl:otherwise&gt;
                                    &lt;xsl:apply-templates select="child::node()" mode="section"/&gt;
                                &lt;/xsl:otherwise&gt;
                            &lt;/xsl:choose&gt;
                        &lt;/xsl:when&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xsl:for-each&gt;
            &lt;/xd:detail&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes the xd:author-elements.&lt;/xd:short&gt;&lt;xd:detail&gt;&amp;gt;xd:author/&amp;lt;s with no text are removed. &amp;lt;xd:author/&amp;gt;s with no child elements will have their text content wrapped in a &amp;lt;xd:name/&amp;gt; element. Children other than xd:name, xd:mailto and xd:organization are ignored.&lt;/xd:detail&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="authors" xml:id="authors"&gt;
        &lt;xsl:for-each select="*[local-name()='author']"&gt;
            &lt;xsl:variable name="is-empty" select="count(descendant-or-self::text()[string-length(normalize-space())&amp;gt;0])=0"/&gt;
            &lt;xsl:if test="not($is-empty)"&gt;
                &lt;xd:author&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="count(child::*)=0"&gt;
                            &lt;xd:name&gt;
                                &lt;xsl:value-of select="."/&gt;
                            &lt;/xd:name&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:if test="child::*[local-name()='name']"&gt;
                                &lt;xd:name&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='name']"/&gt;
                                &lt;/xd:name&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='mailto']"&gt;
                                &lt;xd:mailto&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='mailto']"/&gt;
                                &lt;/xd:mailto&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='organization']"&gt;
                                &lt;xd:organization&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='organization']"/&gt;
                                &lt;/xd:organization&gt;
                            &lt;/xsl:if&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xd:author&gt;
            &lt;/xsl:if&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;&amp;lt;xd:contributor/&amp;gt;s are normalized in the same way as &amp;lt;xd:author/&amp;gt;s&lt;/xd:short&gt;&lt;xd:see&gt;#authors&lt;/xd:see&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="contributors"&gt;
        &lt;xsl:for-each select="*[local-name()='contributor']"&gt;
            &lt;xsl:variable name="is-empty" select="count(descendant-or-self::text()[string-length(normalize-space())&amp;gt;0])=0"/&gt;
            &lt;xsl:if test="not($is-empty)"&gt;
                &lt;xd:contributor&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="count(child::*)=0"&gt;
                            &lt;xd:name&gt;
                                &lt;xsl:value-of select="."/&gt;
                            &lt;/xd:name&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:if test="child::*[local-name()='name']"&gt;
                                &lt;xd:name&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='name']"/&gt;
                                &lt;/xd:name&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='mailto']"&gt;
                                &lt;xd:mailto&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='mailto']"/&gt;
                                &lt;/xd:mailto&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='organization']"&gt;
                                &lt;xd:organization&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='organization']"/&gt;
                                &lt;/xd:organization&gt;
                            &lt;/xsl:if&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xd:contributor&gt;
            &lt;/xsl:if&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;&amp;lt;xd:maintainer/&amp;gt;s are normalized in the same way as &amp;lt;xd:author/&amp;gt;s&lt;/xd:short&gt;&lt;xd:see&gt;#authors&lt;/xd:see&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="maintainers"&gt;
        &lt;xsl:for-each select="*[local-name()='maintainer']"&gt;
            &lt;xsl:variable name="is-empty" select="count(descendant-or-self::text()[string-length(normalize-space())&amp;gt;0])=0"/&gt;
            &lt;xsl:if test="not($is-empty)"&gt;
                &lt;xd:maintainer&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="count(child::*)=0"&gt;
                            &lt;xd:name&gt;
                                &lt;xsl:value-of select="."/&gt;
                            &lt;/xd:name&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:if test="child::*[local-name()='name']"&gt;
                                &lt;xd:name&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='name']"/&gt;
                                &lt;/xd:name&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='mailto']"&gt;
                                &lt;xd:mailto&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='mailto']"/&gt;
                                &lt;/xd:mailto&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='organization']"&gt;
                                &lt;xd:organization&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='organization']"/&gt;
                                &lt;/xd:organization&gt;
                            &lt;/xsl:if&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xd:maintainer&gt;
            &lt;/xsl:if&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes the xd:copyright-element.&lt;/xd:short&gt;&lt;xd:detail&gt;&amp;gt;xd:copyright/&amp;lt;s with no text are removed. &amp;lt;xd:copyright/&amp;gt;s with no child elements will have their text content wrapped in a &amp;lt;xd:name/&amp;gt; element. Children other than xd:year, xd:name, xd:mailto and xd:organization are ignored.&lt;/xd:detail&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="copyright"&gt;
        &lt;xsl:for-each select="*[local-name()='copyright']"&gt;
            &lt;xsl:variable name="is-empty" select="count(descendant-or-self::text()[string-length(normalize-space())&amp;gt;0])=0"/&gt;
            &lt;xsl:if test="not($is-empty)"&gt;
                &lt;xd:copyright&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="count(child::*)=0"&gt;
                            &lt;xd:name&gt;
                                &lt;xsl:value-of select="."/&gt;
                            &lt;/xd:name&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:if test="child::*[local-name()='year']"&gt;
                                &lt;xd:year&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='year']"/&gt;
                                &lt;/xd:year&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='name']"&gt;
                                &lt;xd:name&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='name']"/&gt;
                                &lt;/xd:name&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='mailto']"&gt;
                                &lt;xd:mailto&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='mailto']"/&gt;
                                &lt;/xd:mailto&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='organization']"&gt;
                                &lt;xd:organization&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='organization']"/&gt;
                                &lt;/xd:organization&gt;
                            &lt;/xsl:if&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xd:copyright&gt;
            &lt;/xsl:if&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:version elements.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="version"&gt;
        &lt;xsl:if test="child::*[local-name()='version' and string-length(normalize-space(./text()))&amp;gt;0]"&gt;
            &lt;xd:version&gt;
                &lt;xsl:value-of select="child::*[local-name()='version' and string-length(normalize-space(./text()))&amp;gt;0]"/&gt;
            &lt;/xd:version&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:since elements.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="since"&gt;
        &lt;xsl:if test="child::*[local-name()='since' and string-length(normalize-space(./text()))&amp;gt;0]"&gt;
            &lt;xd:since&gt;
                &lt;xsl:value-of select="child::*[local-name()='since' and string-length(normalize-space(./text()))&amp;gt;0]"/&gt;
            &lt;/xd:since&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:see elements.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="see"&gt;
        &lt;xsl:if test="child::*[local-name()='see' and string-length(normalize-space(./text()))&amp;gt;0]"&gt;
            &lt;xd:see&gt;
                &lt;xsl:value-of select="child::*[local-name()='see' and string-length(normalize-space(./text()))&amp;gt;0]"/&gt;
            &lt;/xd:see&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:deprecated elements.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="deprecated"&gt;
        &lt;xsl:if test="child::*[local-name()='deprecated' and string-length(normalize-space(./text()))&amp;gt;0]"&gt;
            &lt;xd:deprecated&gt;
                &lt;xsl:value-of select="child::*[local-name()='deprecated' and string-length(normalize-space(./text()))&amp;gt;0]"/&gt;
            &lt;/xd:deprecated&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:import elements.&lt;/xd:short&gt;&lt;xd:detail&gt;Will create empty documentation for imports that are not documented, and removes documentation of imports that does not exist in the code.&lt;/xd:detail&gt;&lt;xd:param name="code"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="import"&gt;
        &lt;xsl:param name="code" required="yes"/&gt;
        &lt;xsl:variable name="doc" select="."/&gt;
        &lt;xsl:for-each select="$code/xsl:import"&gt;
            &lt;xsl:variable name="href" select="@href"/&gt;
            &lt;xd:import href="{@href}"&gt;
                &lt;xsl:if test="$doc/*[local-name()='import' and @href=$href]"&gt;
                    &lt;xsl:value-of select="$doc/*[local-name()='import' and @href=$href]"/&gt;
                &lt;/xsl:if&gt;
            &lt;/xd:import&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:include elements.&lt;/xd:short&gt;&lt;xd:detail&gt;Will create empty documentation for includes that are not documented, and removes documentation of includes that does not exist in the code.&lt;/xd:detail&gt;&lt;xd:param name="code"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="include"&gt;
        &lt;xsl:param name="code" required="yes"/&gt;
        &lt;xsl:variable name="doc" select="."/&gt;
        &lt;xsl:for-each select="$code/xsl:include"&gt;
            &lt;xsl:variable name="href" select="@href"/&gt;
            &lt;xd:include href="{@href}"&gt;
                &lt;xsl:if test="$doc/*[local-name()='include' and @href=$href]"&gt;
                    &lt;xsl:value-of select="$doc/*[local-name()='include' and @href=$href]"/&gt;
                &lt;/xsl:if&gt;
            &lt;/xd:include&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:import elements.&lt;/xd:short&gt;&lt;xd:detail&gt;Will create empty documentation for imports that are not documented, and removes documentation of imports that does not exist in the code.&lt;/xd:detail&gt;&lt;xd:param name="code"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="param"&gt;
        &lt;xsl:param name="code" required="yes"/&gt;
        &lt;xsl:variable name="doc" select="."/&gt;
        &lt;xsl:for-each select="*[local-name()='param']"&gt;
            &lt;xd:param&gt;
                &lt;xsl:apply-templates select="@*"/&gt;
                &lt;xsl:apply-templates mode="section" select="node()"/&gt;
            &lt;/xd:param&gt;
        &lt;/xsl:for-each&gt;
        &lt;xsl:for-each select="$code/xsl:param"&gt;
            &lt;xsl:variable name="name" select="@name"/&gt;
            &lt;xsl:if test="not($doc/*[local-name()='param' and @name=$name])"&gt;
                &lt;xd:param name="{@name}"/&gt;
            &lt;/xsl:if&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Describes the result of the code.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="return"&gt;
        &lt;xsl:variable name="is-empty" select="count(*[local-name()='return']/descendant-or-self::node()[self::text() and string-length(normalize-space())&amp;gt;0 or local-name()='pre'])=0"/&gt;
        &lt;xsl:if test="not($is-empty)"&gt;
            &lt;xd:return&gt;
                &lt;xsl:apply-templates mode="section" select="*[local-name()='return']/node()"/&gt;
            &lt;/xd:return&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Matches all elements when in "section"-mode.&lt;/xd:short&gt;&lt;xd:detail&gt;
        
        Checks all child elements and their descendants and wraps and handles as is
            appropriate. If a child or descendant is placed in a problematic position, then one of
            the unwrap*-templates are called to solve the problem. Otherwise, just make sure that
            the element is in the correct namespace and copy it.
    &lt;/xd:detail&gt;&lt;xd:param name="wrapin-p"/&gt;&lt;xd:param name="wrapin-ul"/&gt;&lt;xd:param name="wrapin-li"/&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template mode="section" match="@*|node()"&gt;
        &lt;xsl:param name="wrapin-p" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-ul" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-li" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:variable name="is-empty" select="count(descendant-or-self::node()[self::text() and string-length(normalize-space())&amp;gt;0 or local-name()='pre'])=0"/&gt;
        &lt;xsl:variable name="contains-section" select="count(descendant::*[local-name()='section'])&amp;gt;0"/&gt;
        &lt;xsl:variable name="contains-block" select="count(descendant::*[local-name()='ul' or local-name()='li' or local-name()='pre' or local-name()='p'])&amp;gt;0"/&gt;
        &lt;xsl:variable name="contains-block-non-li" select="count(descendant::*[local-name()='ul' or local-name()='pre' or local-name()='p'])&amp;gt;0"/&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="local-name()='section'"&gt;
                &lt;xd:section&gt;
                    &lt;xsl:apply-templates mode="section" select="@*|node()"/&gt;
                &lt;/xd:section&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='p'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$contains-section or $contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-p" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:p&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:p&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='pre'"&gt;
                &lt;xd:pre&gt;
                    &lt;xsl:copy-of select="@*|node()"/&gt;
                &lt;/xd:pre&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='ul'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-section"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$contains-block-non-li"&gt;
                        &lt;xd:section&gt;
                            &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                                &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                            &lt;/xsl:call-template&gt;
                        &lt;/xd:section&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="count(descendant::*[local-name()='li'])=0"&gt;
                        &lt;xsl:choose&gt;
                            &lt;xsl:when test="count(child::node()[self::* or self::text() and string-length(normalize-space())&amp;gt;0])&amp;gt;1"&gt;
                                &lt;xd:section&gt;
                                    &lt;xsl:apply-templates mode="section" select="@*|node()"&gt;
                                        &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                                        &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                                    &lt;/xsl:apply-templates&gt;
                                &lt;/xd:section&gt;
                            &lt;/xsl:when&gt;
                            &lt;xsl:otherwise&gt;
                                &lt;xsl:apply-templates mode="section" select="@*|node()"&gt;
                                    &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                                &lt;/xsl:apply-templates&gt;
                            &lt;/xsl:otherwise&gt;
                        &lt;/xsl:choose&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:ul&gt;
                            &lt;xsl:apply-templates mode="list" select="@*|node()"&gt;
                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:ul&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='li'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-section"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:ul&gt;
                            &lt;xd:li&gt;
                                &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                            &lt;/xd:li&gt;
                        &lt;/xd:ul&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='b'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-section"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-b" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-b" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:b&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:b&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='i'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-section"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-i" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-i" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:i&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:i&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='a'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-section"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-a" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-a-elem" select="." tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-a" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-a-elem" select="." tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:a&gt;
                            &lt;xsl:apply-templates select="@*"/&gt;
                            &lt;xsl:apply-templates mode="phrase" select="node()"/&gt;
                        &lt;/xd:a&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="self::*"&gt;
                        &lt;xsl:choose&gt;
                            &lt;xsl:when test="not(preceding-sibling::*) and not(following-sibling::*)"&gt;
                                &lt;xsl:apply-templates mode="section" select="@*|node()"/&gt;
                            &lt;/xsl:when&gt;
                            &lt;xsl:otherwise&gt;
                                &lt;xd:section&gt;
                                    &lt;xsl:apply-templates mode="section" select="@*|node()"/&gt;
                                &lt;/xd:section&gt;
                            &lt;/xsl:otherwise&gt;
                        &lt;/xsl:choose&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="self::text()"&gt;
                        &lt;xsl:copy/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="section" select="@*|node()"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Handles non-problematic lists.&lt;/xd:short&gt;&lt;xd:param name="wrapin-p"/&gt;&lt;xd:param name="wrapin-ul"/&gt;&lt;xd:param name="wrapin-li"/&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template mode="list" match="@*|node()"&gt;
        &lt;xsl:param name="wrapin-p" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-ul" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-li" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:variable name="is-empty" select="count(descendant-or-self::node()[self::text() and string-length(normalize-space())&amp;gt;0 or local-name()='pre'])=0"/&gt;
        &lt;xsl:variable name="contains-block" select="count(descendant::*[local-name()='ul' or local-name()='li' or local-name()='pre' or local-name()='p'])&amp;gt;0"/&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="local-name()='li'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$wrapin-ul"&gt;
                        &lt;xd:ul&gt;
                            &lt;xd:li&gt;
                                &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                            &lt;/xd:li&gt;
                        &lt;/xd:ul&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:li&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:li&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="self::text()"&gt;
                        &lt;xsl:copy/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="list" select="@*|node()"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Handles all elements when in "block" mode and applies fixes where needed.&lt;/xd:short&gt;&lt;xd:param name="wrapin-p"/&gt;&lt;xd:param name="wrapin-ul"/&gt;&lt;xd:param name="wrapin-li"/&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template mode="block" match="@*|node()"&gt;
        &lt;xsl:param name="wrapin-p" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-ul" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-li" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:variable name="element" select="."/&gt;
        &lt;xsl:variable name="is-empty" select="count(descendant-or-self::node()[self::* or self::text() and string-length(normalize-space())&amp;gt;0])=0"/&gt;
        &lt;xsl:variable name="contains-block" select="count(descendant::*[local-name()='ul' or local-name()='li' or local-name()='pre' or local-name()='p'])&amp;gt;0"/&gt;
        &lt;xsl:variable name="contains-block-non-li" select="count(descendant::*[local-name()='ul' or local-name()='pre' or local-name()='p'])&amp;gt;0"/&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="local-name()='p'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:p&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:p&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='pre'"&gt;
                &lt;xd:pre&gt;
                    &lt;xsl:copy-of select="@*|node()"/&gt;
                &lt;/xd:pre&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='ul'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block-non-li"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="count(descendant::*[local-name()='li' and string-length(normalize-space(descendant-or-self::text()))&amp;gt;0])=0"&gt;
                        &lt;xsl:apply-templates mode="block" select="@*|node()"/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:ul&gt;
                            &lt;xsl:apply-templates mode="list" select="@*|node()"&gt;
                                &lt;xsl:with-param name="wrapin-ul" select="false()"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:ul&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='li'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:ul&gt;
                            &lt;xd:li&gt;
                                &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                                    &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                &lt;/xsl:apply-templates&gt;
                            &lt;/xd:li&gt;
                        &lt;/xd:ul&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="not($contains-block) and $wrapin-p"&gt;
                &lt;xd:p&gt;
                    &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                        &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                        &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                        &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                    &lt;/xsl:apply-templates&gt;
                &lt;/xd:p&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="not($contains-block) and $wrapin-li"&gt;
                &lt;xd:ul&gt;
                    &lt;xd:li&gt;
                        &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                            &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xd:li&gt;
                &lt;/xd:ul&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='b'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-b" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:b&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:b&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='i'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-i" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:i&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:i&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='a'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-a" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-a-elem" select="$element" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:a&gt;
                            &lt;xsl:apply-templates mode="phrase" select="$element/@*"/&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:a&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="self::text()"&gt;
                        &lt;xsl:copy/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="block" select="@*|node()"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Phrases are matched with this template (mode="phrase") and handled appropriately.&lt;/xd:short&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template mode="phrase" match="@*|node()"&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="local-name()='b'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='b'])"&gt;
                        &lt;xd:b&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:b&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="$wrapin-b"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='b'])"&gt;
                        &lt;xd:b&gt;
                            &lt;xsl:apply-templates mode="phrase" select="."&gt;
                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:b&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="."&gt;
                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='i'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='i'])"&gt;
                        &lt;xd:i&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:i&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="$wrapin-i"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='i'])"&gt;
                        &lt;xd:i&gt;
                            &lt;xsl:apply-templates mode="phrase" select="."&gt;
                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:i&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="."&gt;
                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='a'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='a'])"&gt;
                        &lt;xd:a&gt;
                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                            &lt;xsl:apply-templates mode="phrase" select="node()"&gt;
                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:a&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="$wrapin-a"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='a'])"&gt;
                        &lt;xd:a&gt;
                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                            &lt;xsl:apply-templates mode="phrase" select="."&gt;
                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:a&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="."&gt;
                            &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="self::text()"&gt;
                        &lt;xsl:copy/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;This template unwraps problematic elements into sections.&lt;/xd:short&gt;&lt;xd:param name="wasWrapped"/&gt;&lt;xd:param name="wrapin-p"/&gt;&lt;xd:param name="wrapin-ul"/&gt;&lt;xd:param name="wrapin-li"/&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="unwrap-to-sections"&gt;
        &lt;xsl:param name="wasWrapped" select="false()"/&gt;
        &lt;xsl:param name="wrapin-p" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-ul" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-li" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:variable name="element" select="."/&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="not($wasWrapped) and count(child::node()[self::* or self::text() and string-length(normalize-space())&amp;gt;0])&amp;gt;1"&gt;
                &lt;xd:section&gt;
                    &lt;xsl:call-template name="unwrap-to-sections"&gt;
                        &lt;xsl:with-param name="wasWrapped" select="true()"/&gt;
                    &lt;/xsl:call-template&gt;
                &lt;/xd:section&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
                &lt;xsl:for-each-group select="child::node()[self::* or self::text() and string-length(normalize-space())&amp;gt;0]" group-adjacent="self::* and not(ancestor::*[local-name()='pre']) and (local-name()='section' or local-name()='ul' or local-name()='li' or local-name()='pre' or local-name()='p')"&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="current-grouping-key()"&gt;
                            &lt;xsl:choose&gt;
                                &lt;xsl:when test="count(current-group())&amp;gt;1 and last()&amp;gt;1"&gt;
                                    &lt;xd:section&gt;
                                        &lt;xsl:apply-templates mode="section" select="current-group()"&gt;
                                            &lt;xsl:with-param name="wrapin-p" tunnel="yes" select="if ($wrapin-p or local-name($element)='p') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-ul" tunnel="yes" select="if ($wrapin-ul or local-name($element)='ul') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-li" tunnel="yes" select="if ($wrapin-li or local-name($element)='li') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-b" tunnel="yes" select="if ($wrapin-b or local-name($element)='b') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-i" tunnel="yes" select="if ($wrapin-i or local-name($element)='i') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-a" tunnel="yes" select="if ($wrapin-a or local-name($element)='a') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-a-elem" tunnel="yes" select="if (not($wrapin-a) and local-name($element)='a') then $element else false()"/&gt;
                                        &lt;/xsl:apply-templates&gt;
                                    &lt;/xd:section&gt;
                                &lt;/xsl:when&gt;
                                &lt;xsl:otherwise&gt;
                                    &lt;xsl:apply-templates mode="section" select="current-group()"&gt;
                                        &lt;xsl:with-param name="wrapin-p" tunnel="yes" select="if ($wrapin-p or local-name($element)='p') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-ul" tunnel="yes" select="if ($wrapin-ul or local-name($element)='ul') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-li" tunnel="yes" select="if ($wrapin-li or local-name($element)='li') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-b" tunnel="yes" select="if ($wrapin-b or local-name($element)='b') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-i" tunnel="yes" select="if ($wrapin-i or local-name($element)='i') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-a" tunnel="yes" select="if ($wrapin-a or local-name($element)='a') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-a-elem" tunnel="yes" select="if (not($wrapin-a) and local-name($element)='a') then $element else false()"/&gt;
                                    &lt;/xsl:apply-templates&gt;
                                &lt;/xsl:otherwise&gt;
                            &lt;/xsl:choose&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:element name="xd:{local-name($element)}"&gt;
                                &lt;xsl:for-each select="$element/@*"&gt;
                                    &lt;xsl:attribute name="xd:{local-name()}" select="."/&gt;
                                &lt;/xsl:for-each&gt;
                                &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                    &lt;xsl:with-param name="wrapin-p" tunnel="yes" select="if ($wrapin-p or local-name($element)='p') then false() else $wrapin-p"/&gt;
                                    &lt;xsl:with-param name="wrapin-ul" tunnel="yes" select="if ($wrapin-ul or local-name($element)='ul') then false() else $wrapin-ul"/&gt;
                                    &lt;xsl:with-param name="wrapin-li" tunnel="yes" select="if ($wrapin-li or local-name($element)='li') then false() else $wrapin-li"/&gt;
                                    &lt;xsl:with-param name="wrapin-b" tunnel="yes" select="if ($wrapin-b or local-name($element)='b') then false() else $wrapin-b"/&gt;
                                    &lt;xsl:with-param name="wrapin-i" tunnel="yes" select="if ($wrapin-i or local-name($element)='i') then false() else $wrapin-i"/&gt;
                                    &lt;xsl:with-param name="wrapin-a" tunnel="yes" select="if ($wrapin-a or local-name($element)='a') then false() else $wrapin-a"/&gt;
                                &lt;/xsl:apply-templates&gt;
                            &lt;/xsl:element&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xsl:for-each-group&gt;
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;This template unwraps problematic elements into blocks.&lt;/xd:short&gt;&lt;xd:param name="wrapin-p"/&gt;&lt;xd:param name="wrapin-ul"/&gt;&lt;xd:param name="wrapin-li"/&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="unwrap-to-blocks"&gt;
        &lt;xsl:param name="wrapin-p" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-ul" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-li" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:variable name="element" select="."/&gt;
        &lt;xsl:for-each-group select="child::node()[self::* or self::text() and string-length(normalize-space())&amp;gt;0]" group-adjacent="count(descendant-or-self::*[local-name()='ul' or local-name()='li' or local-name()='pre' or local-name()='p'])&amp;gt;0"&gt;
            &lt;xsl:choose&gt;
                &lt;xsl:when test="current-grouping-key()"&gt;
                    &lt;xsl:for-each select="current-group()"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-p" select="$wrapin-p or local-name()='p' or local-name($element)='p'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="$wrapin-ul or local-name()='ul' or local-name($element)='ul'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="$wrapin-li or local-name()='li' or local-name($element)='li'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-b" select="$wrapin-b or local-name()='b' or local-name($element)='b'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-i" select="$wrapin-i or local-name()='i' or local-name($element)='i'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-a" select="$wrapin-a or local-name()='a' or local-name($element)='a'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-a-elem" select="if (local-name()='a') then . else (if (local-name($element)='a') then $element else $wrapin-a-elem)" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:for-each&gt;
                &lt;/xsl:when&gt;
                &lt;xsl:otherwise&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="$wrapin-p"&gt;
                            &lt;xd:p&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="$wrapin-b"&gt;
                                        &lt;xd:b&gt;
                                            &lt;xsl:choose&gt;
                                                &lt;xsl:when test="$wrapin-i"&gt;
                                                  &lt;xd:i&gt;
                                                  &lt;xsl:choose&gt;
                                                  &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                  &lt;/xsl:when&gt;
                                                  &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xsl:otherwise&gt;
                                                  &lt;/xsl:choose&gt;
                                                  &lt;/xd:i&gt;
                                                &lt;/xsl:when&gt;
                                                &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                &lt;/xsl:otherwise&gt;
                                            &lt;/xsl:choose&gt;
                                        &lt;/xd:b&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:when test="$wrapin-i"&gt;
                                        &lt;xd:i&gt;
                                            &lt;xsl:choose&gt;
                                                &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                &lt;/xsl:when&gt;
                                                &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                &lt;/xsl:otherwise&gt;
                                            &lt;/xsl:choose&gt;
                                        &lt;/xd:i&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:when test="$wrapin-a"&gt;
                                        &lt;xd:a&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                            &lt;/xsl:apply-templates&gt;
                                        &lt;/xd:a&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                            &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                        &lt;/xsl:apply-templates&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xd:p&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="$wrapin-li"&gt;
                            &lt;xd:ul&gt;
                                &lt;xd:li&gt;
                                    &lt;xsl:choose&gt;
                                        &lt;xsl:when test="$wrapin-b"&gt;
                                            &lt;xd:b&gt;
                                                &lt;xsl:choose&gt;
                                                  &lt;xsl:when test="$wrapin-i"&gt;
                                                  &lt;xd:i&gt;
                                                  &lt;xsl:choose&gt;
                                                  &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                  &lt;/xsl:when&gt;
                                                  &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xsl:otherwise&gt;
                                                  &lt;/xsl:choose&gt;
                                                  &lt;/xd:i&gt;
                                                  &lt;/xsl:when&gt;
                                                  &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xsl:otherwise&gt;
                                                &lt;/xsl:choose&gt;
                                            &lt;/xd:b&gt;
                                        &lt;/xsl:when&gt;
                                        &lt;xsl:when test="$wrapin-i"&gt;
                                            &lt;xd:i&gt;
                                                &lt;xsl:choose&gt;
                                                  &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                  &lt;/xsl:when&gt;
                                                  &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xsl:otherwise&gt;
                                                &lt;/xsl:choose&gt;
                                            &lt;/xd:i&gt;
                                        &lt;/xsl:when&gt;
                                        &lt;xsl:when test="$wrapin-a"&gt;
                                            &lt;xd:a&gt;
                                                &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                &lt;/xsl:apply-templates&gt;
                                            &lt;/xd:a&gt;
                                        &lt;/xsl:when&gt;
                                        &lt;xsl:otherwise&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                            &lt;/xsl:apply-templates&gt;
                                        &lt;/xsl:otherwise&gt;
                                    &lt;/xsl:choose&gt;
                                &lt;/xd:li&gt;
                            &lt;/xd:ul&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="$wrapin-ul"&gt;
                            &lt;xd:p&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="$wrapin-b"&gt;
                                        &lt;xd:b&gt;
                                            &lt;xsl:choose&gt;
                                                &lt;xsl:when test="$wrapin-i"&gt;
                                                  &lt;xd:i&gt;
                                                  &lt;xsl:choose&gt;
                                                  &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                  &lt;/xsl:when&gt;
                                                  &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xsl:otherwise&gt;
                                                  &lt;/xsl:choose&gt;
                                                  &lt;/xd:i&gt;
                                                &lt;/xsl:when&gt;
                                                &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                &lt;/xsl:otherwise&gt;
                                            &lt;/xsl:choose&gt;
                                        &lt;/xd:b&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:when test="$wrapin-i"&gt;
                                        &lt;xd:i&gt;
                                            &lt;xsl:choose&gt;
                                                &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                &lt;/xsl:when&gt;
                                                &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                &lt;/xsl:otherwise&gt;
                                            &lt;/xsl:choose&gt;
                                        &lt;/xd:i&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:when test="$wrapin-a"&gt;
                                        &lt;xd:a&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                            &lt;/xsl:apply-templates&gt;
                                        &lt;/xd:a&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                            &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                        &lt;/xsl:apply-templates&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xd:p&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="$wrapin-b"&gt;
                            &lt;xd:b&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="$wrapin-i"&gt;
                                        &lt;xd:i&gt;
                                            &lt;xsl:choose&gt;
                                                &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                &lt;/xsl:when&gt;
                                                &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                &lt;/xsl:otherwise&gt;
                                            &lt;/xsl:choose&gt;
                                        &lt;/xd:i&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:when test="$wrapin-a"&gt;
                                        &lt;xd:a&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                            &lt;/xsl:apply-templates&gt;
                                        &lt;/xd:a&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                            &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                        &lt;/xsl:apply-templates&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xd:b&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="$wrapin-i"&gt;
                            &lt;xd:i&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="$wrapin-a"&gt;
                                        &lt;xd:a&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                            &lt;/xsl:apply-templates&gt;
                                        &lt;/xd:a&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                            &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                        &lt;/xsl:apply-templates&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xd:i&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="$wrapin-a"&gt;
                            &lt;xd:a&gt;
                                &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                    &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                &lt;/xsl:apply-templates&gt;
                            &lt;/xd:a&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xsl:otherwise&gt;
            &lt;/xsl:choose&gt;
        &lt;/xsl:for-each-group&gt;
    &lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;&lt;/codeblock&gt;
    &lt;xsl:template name="authors" xml:id="authors"&gt;
        &lt;xsl:for-each select="*[local-name()='author']"&gt;
            &lt;xsl:variable name="is-empty" select="count(descendant-or-self::text()[string-length(normalize-space())&amp;gt;0])=0"/&gt;
            &lt;xsl:if test="not($is-empty)"&gt;
                &lt;xd:author&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="count(child::*)=0"&gt;
                            &lt;xd:name&gt;
                                &lt;xsl:value-of select="."/&gt;
                            &lt;/xd:name&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:if test="child::*[local-name()='name']"&gt;
                                &lt;xd:name&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='name']"/&gt;
                                &lt;/xd:name&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='mailto']"&gt;
                                &lt;xd:mailto&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='mailto']"/&gt;
                                &lt;/xd:mailto&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='organization']"&gt;
                                &lt;xd:organization&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='organization']"/&gt;
                                &lt;/xd:organization&gt;
                            &lt;/xsl:if&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xd:author&gt;
            &lt;/xsl:if&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;codeblock&gt;&lt;xsl:stylesheet version="2.0"&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Identity template.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template match="@*|node()"&gt;
        &lt;xsl:copy&gt;
            &lt;xsl:apply-templates select="@*|node()"/&gt;
        &lt;/xsl:copy&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Matches each xd:doc element.&lt;/xd:short&gt;&lt;xd:detail&gt;
        
        Determines what code is being documented and calls appropriate templates for: &lt;xd:ul&gt;
                &lt;xd:li&gt;short description (xd:short)&lt;/xd:li&gt;
                &lt;xd:li&gt;detailed description (xd:detail)&lt;/xd:li&gt;
                &lt;xd:li&gt;authors (xd:author)&lt;/xd:li&gt;
                &lt;xd:li&gt;contributors (xd:contributor)&lt;/xd:li&gt;
                &lt;xd:li&gt;maintainers (xd:maintainer)&lt;/xd:li&gt;
                &lt;xd:li&gt;copyright (xd:copyright)&lt;/xd:li&gt;
                &lt;xd:li&gt;version (xd:version)&lt;/xd:li&gt;
                &lt;xd:li&gt;code existed since version (xd:since)&lt;/xd:li&gt;
                &lt;xd:li&gt;see also (xd:see)&lt;/xd:li&gt;
                &lt;xd:li&gt;deprecated since version (xd:deprecated)&lt;/xd:li&gt;
                &lt;xd:li&gt;import statements (xd:import and xsl:import)&lt;/xd:li&gt;
                &lt;xd:li&gt;include statements (xd:include and xsl:include)&lt;/xd:li&gt;
                &lt;xd:li&gt;parameters (xd:param and xsl:param)&lt;/xd:li&gt;
                &lt;xd:li&gt;return values / output (xd:return)&lt;/xd:li&gt;
            &lt;/xd:ul&gt;
        
        
    &lt;/xd:detail&gt;&lt;xd:return&gt;The normalized xd:doc.&lt;/xd:return&gt;&lt;/xd:doc&gt;
    &lt;xsl:template match="xd:doc"&gt;
        &lt;xsl:copy&gt;
            &lt;xsl:variable name="target"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="@target"&gt;
                        &lt;xsl:value-of select="@target"/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="count(preceding-sibling::*)=0"&gt;
                        &lt;xsl:value-of select="'parent'"/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:value-of select="'following'"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:variable&gt;
            &lt;xsl:variable name="code" select="if ($target='parent') then parent::* else following-sibling::*[1]"/&gt;

            &lt;xsl:attribute name="target" select="$target"/&gt;

            &lt;xsl:call-template name="short"/&gt;
            &lt;xsl:call-template name="detail"/&gt;
            &lt;xsl:call-template name="authors"/&gt;
            &lt;xsl:call-template name="contributors"/&gt;
            &lt;xsl:call-template name="maintainers"/&gt;
            &lt;xsl:call-template name="copyright"/&gt;
            &lt;xsl:call-template name="version"/&gt;
            &lt;xsl:call-template name="since"/&gt;
            &lt;xsl:call-template name="see"/&gt;
            &lt;xsl:call-template name="deprecated"/&gt;
            &lt;xsl:call-template name="import"&gt;
                &lt;xsl:with-param name="code" select="$code"/&gt;
            &lt;/xsl:call-template&gt;
            &lt;xsl:call-template name="include"&gt;
                &lt;xsl:with-param name="code" select="$code"/&gt;
            &lt;/xsl:call-template&gt;
            &lt;xsl:call-template name="param"&gt;
                &lt;xsl:with-param name="code" select="$code"/&gt;
            &lt;/xsl:call-template&gt;
            &lt;xsl:call-template name="return"/&gt;
        &lt;/xsl:copy&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Determines the short description.&lt;/xd:short&gt;&lt;xd:detail&gt;
        
        
            &lt;xd:ul&gt;
                &lt;xd:li&gt;If there is no &amp;lt;xd:short/&amp;gt;-element present, but plain text is present as a
                    child of the &amp;lt;xd:doc/&amp;gt;element, then the first sentence from that text (up
                    until the first period (".") will be used as a short description.&lt;/xd:li&gt;
                &lt;xd:li&gt;Else; if there are multiple &amp;lt;xd:short/&amp;gt;-elements, each one of their
                    contents will be wrapped in separate &amp;lt;section/&amp;gt;s.&lt;/xd:li&gt;
                &lt;xd:li&gt;Else; use the one &amp;lt;xd:short/&amp;gt;-element that is present for the short
                    description.&lt;/xd:li&gt;
            &lt;/xd:ul&gt;
        
    &lt;/xd:detail&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="short"&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="count(child::*[local-name()='short'])&amp;gt;1"&gt;
                &lt;xd:short&gt;
                    &lt;xsl:for-each select="child::*[local-name()='short']"&gt;
                        &lt;xd:section&gt;
                            &lt;xsl:apply-templates mode="section"/&gt;
                        &lt;/xd:section&gt;
                    &lt;/xsl:for-each&gt;
                &lt;/xd:short&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="count(child::*[local-name()='short'])=1"&gt;
                &lt;xd:short&gt;
                    &lt;xsl:apply-templates select="child::*[local-name()='short']/node()" mode="section"/&gt;
                &lt;/xd:short&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="child::text()[string-length(normalize-space())&amp;gt;0]"&gt;
                &lt;xsl:variable name="short" select="replace(normalize-space(child::text()[1]),'^([^\.]+\.?)\s?.*$','$1')"/&gt;
                &lt;xd:short&gt;
                    &lt;xsl:value-of select="$short"/&gt;
                &lt;/xd:short&gt;
            &lt;/xsl:when&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Determines the detailed description.&lt;/xd:short&gt;&lt;xd:detail&gt;
        
        The detailed description will be put together based on any number of
            &amp;lt;xd:detail/&amp;gt;-elements, as well as any number of text nodes that are direct
            children of the &amp;lt;xd:doc/&amp;gt;-element. If the xd:short was extracted from the first
            text node, then the first sentence from that text node will be ignored. If there are
            multiple &amp;lt;xd:detail/&amp;gt; and text nodes, then each of them will be wrapped in
            &amp;lt;xd:section/&amp;gt;s.
    &lt;/xd:detail&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="detail"&gt;
        &lt;xsl:variable name="shortInFirstText" select="count(./*[local-name()='short'])=0"/&gt;
        &lt;xsl:variable name="detailCount" select="(if (matches(normalize-space(./text()[1]),'\.[^\.].')) then 1 else 0) + count(*[local-name()='detail' and (descendant-or-self::node()[self::text() and string-length(normalize-space())&amp;gt;0 or local-name()='pre' and not(ancestor::*[local-name()='pre'])])]) + count(./text()[not(position()=1) and string-length(normalize-space())&amp;gt;0])"/&gt;
        &lt;xsl:if test="$detailCount&amp;gt;0"&gt;
            &lt;xd:detail&gt;
                &lt;xsl:for-each select="*|text()"&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="self::text() and count(preceding-sibling::text()[string-length(normalize-space())&amp;gt;0])=0"&gt;
                            &lt;!-- first text --&gt;
                            &lt;xsl:choose&gt;
                                &lt;xsl:when test="$shortInFirstText"&gt;
                                    &lt;xsl:variable name="detail" select="replace(normalize-space(),'^[^\.]+.?\s?(.*)$','$1')"/&gt;
                                    &lt;xsl:choose&gt;
                                        &lt;xsl:when test="$detailCount&amp;gt;1"&gt;
                                            &lt;xd:section&gt;
                                                &lt;xsl:value-of select="$detail"/&gt;
                                            &lt;/xd:section&gt;
                                        &lt;/xsl:when&gt;
                                        &lt;xsl:otherwise&gt;
                                            &lt;xsl:value-of select="$detail"/&gt;
                                        &lt;/xsl:otherwise&gt;
                                    &lt;/xsl:choose&gt;
                                &lt;/xsl:when&gt;
                                &lt;xsl:otherwise&gt;
                                    &lt;xsl:choose&gt;
                                        &lt;xsl:when test="$detailCount&amp;gt;1"&gt;
                                            &lt;xd:section&gt;
                                                &lt;xsl:value-of select="."/&gt;
                                            &lt;/xd:section&gt;
                                        &lt;/xsl:when&gt;
                                        &lt;xsl:otherwise&gt;
                                            &lt;xsl:value-of select="."/&gt;
                                        &lt;/xsl:otherwise&gt;
                                    &lt;/xsl:choose&gt;
                                &lt;/xsl:otherwise&gt;
                            &lt;/xsl:choose&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="self::text()"&gt;
                            &lt;!-- non-first text --&gt;
                            &lt;xsl:choose&gt;
                                &lt;xsl:when test="$detailCount&amp;gt;1"&gt;
                                    &lt;xd:section&gt;
                                        &lt;xsl:value-of select="."/&gt;
                                    &lt;/xd:section&gt;
                                &lt;/xsl:when&gt;
                                &lt;xsl:otherwise&gt;
                                    &lt;xsl:value-of select="."/&gt;
                                &lt;/xsl:otherwise&gt;
                            &lt;/xsl:choose&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="local-name()='detail'"&gt;
                            &lt;!-- detail element --&gt;
                            &lt;xsl:choose&gt;
                                &lt;xsl:when test="$detailCount&amp;gt;1"&gt;
                                    &lt;xd:section&gt;
                                        &lt;xsl:apply-templates select="child::node()" mode="section"/&gt;
                                    &lt;/xd:section&gt;
                                &lt;/xsl:when&gt;
                                &lt;xsl:otherwise&gt;
                                    &lt;xsl:apply-templates select="child::node()" mode="section"/&gt;
                                &lt;/xsl:otherwise&gt;
                            &lt;/xsl:choose&gt;
                        &lt;/xsl:when&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xsl:for-each&gt;
            &lt;/xd:detail&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes the xd:author-elements.&lt;/xd:short&gt;&lt;xd:detail&gt;&amp;gt;xd:author/&amp;lt;s with no text are removed. &amp;lt;xd:author/&amp;gt;s with no child elements will have their text content wrapped in a &amp;lt;xd:name/&amp;gt; element. Children other than xd:name, xd:mailto and xd:organization are ignored.&lt;/xd:detail&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="authors" xml:id="authors"&gt;
        &lt;xsl:for-each select="*[local-name()='author']"&gt;
            &lt;xsl:variable name="is-empty" select="count(descendant-or-self::text()[string-length(normalize-space())&amp;gt;0])=0"/&gt;
            &lt;xsl:if test="not($is-empty)"&gt;
                &lt;xd:author&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="count(child::*)=0"&gt;
                            &lt;xd:name&gt;
                                &lt;xsl:value-of select="."/&gt;
                            &lt;/xd:name&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:if test="child::*[local-name()='name']"&gt;
                                &lt;xd:name&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='name']"/&gt;
                                &lt;/xd:name&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='mailto']"&gt;
                                &lt;xd:mailto&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='mailto']"/&gt;
                                &lt;/xd:mailto&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='organization']"&gt;
                                &lt;xd:organization&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='organization']"/&gt;
                                &lt;/xd:organization&gt;
                            &lt;/xsl:if&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xd:author&gt;
            &lt;/xsl:if&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;&amp;lt;xd:contributor/&amp;gt;s are normalized in the same way as &amp;lt;xd:author/&amp;gt;s&lt;/xd:short&gt;&lt;xd:see&gt;#authors&lt;/xd:see&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="contributors"&gt;
        &lt;xsl:for-each select="*[local-name()='contributor']"&gt;
            &lt;xsl:variable name="is-empty" select="count(descendant-or-self::text()[string-length(normalize-space())&amp;gt;0])=0"/&gt;
            &lt;xsl:if test="not($is-empty)"&gt;
                &lt;xd:contributor&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="count(child::*)=0"&gt;
                            &lt;xd:name&gt;
                                &lt;xsl:value-of select="."/&gt;
                            &lt;/xd:name&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:if test="child::*[local-name()='name']"&gt;
                                &lt;xd:name&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='name']"/&gt;
                                &lt;/xd:name&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='mailto']"&gt;
                                &lt;xd:mailto&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='mailto']"/&gt;
                                &lt;/xd:mailto&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='organization']"&gt;
                                &lt;xd:organization&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='organization']"/&gt;
                                &lt;/xd:organization&gt;
                            &lt;/xsl:if&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xd:contributor&gt;
            &lt;/xsl:if&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;&amp;lt;xd:maintainer/&amp;gt;s are normalized in the same way as &amp;lt;xd:author/&amp;gt;s&lt;/xd:short&gt;&lt;xd:see&gt;#authors&lt;/xd:see&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="maintainers"&gt;
        &lt;xsl:for-each select="*[local-name()='maintainer']"&gt;
            &lt;xsl:variable name="is-empty" select="count(descendant-or-self::text()[string-length(normalize-space())&amp;gt;0])=0"/&gt;
            &lt;xsl:if test="not($is-empty)"&gt;
                &lt;xd:maintainer&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="count(child::*)=0"&gt;
                            &lt;xd:name&gt;
                                &lt;xsl:value-of select="."/&gt;
                            &lt;/xd:name&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:if test="child::*[local-name()='name']"&gt;
                                &lt;xd:name&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='name']"/&gt;
                                &lt;/xd:name&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='mailto']"&gt;
                                &lt;xd:mailto&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='mailto']"/&gt;
                                &lt;/xd:mailto&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='organization']"&gt;
                                &lt;xd:organization&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='organization']"/&gt;
                                &lt;/xd:organization&gt;
                            &lt;/xsl:if&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xd:maintainer&gt;
            &lt;/xsl:if&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes the xd:copyright-element.&lt;/xd:short&gt;&lt;xd:detail&gt;&amp;gt;xd:copyright/&amp;lt;s with no text are removed. &amp;lt;xd:copyright/&amp;gt;s with no child elements will have their text content wrapped in a &amp;lt;xd:name/&amp;gt; element. Children other than xd:year, xd:name, xd:mailto and xd:organization are ignored.&lt;/xd:detail&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="copyright"&gt;
        &lt;xsl:for-each select="*[local-name()='copyright']"&gt;
            &lt;xsl:variable name="is-empty" select="count(descendant-or-self::text()[string-length(normalize-space())&amp;gt;0])=0"/&gt;
            &lt;xsl:if test="not($is-empty)"&gt;
                &lt;xd:copyright&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="count(child::*)=0"&gt;
                            &lt;xd:name&gt;
                                &lt;xsl:value-of select="."/&gt;
                            &lt;/xd:name&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:if test="child::*[local-name()='year']"&gt;
                                &lt;xd:year&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='year']"/&gt;
                                &lt;/xd:year&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='name']"&gt;
                                &lt;xd:name&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='name']"/&gt;
                                &lt;/xd:name&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='mailto']"&gt;
                                &lt;xd:mailto&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='mailto']"/&gt;
                                &lt;/xd:mailto&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='organization']"&gt;
                                &lt;xd:organization&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='organization']"/&gt;
                                &lt;/xd:organization&gt;
                            &lt;/xsl:if&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xd:copyright&gt;
            &lt;/xsl:if&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:version elements.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="version"&gt;
        &lt;xsl:if test="child::*[local-name()='version' and string-length(normalize-space(./text()))&amp;gt;0]"&gt;
            &lt;xd:version&gt;
                &lt;xsl:value-of select="child::*[local-name()='version' and string-length(normalize-space(./text()))&amp;gt;0]"/&gt;
            &lt;/xd:version&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:since elements.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="since"&gt;
        &lt;xsl:if test="child::*[local-name()='since' and string-length(normalize-space(./text()))&amp;gt;0]"&gt;
            &lt;xd:since&gt;
                &lt;xsl:value-of select="child::*[local-name()='since' and string-length(normalize-space(./text()))&amp;gt;0]"/&gt;
            &lt;/xd:since&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:see elements.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="see"&gt;
        &lt;xsl:if test="child::*[local-name()='see' and string-length(normalize-space(./text()))&amp;gt;0]"&gt;
            &lt;xd:see&gt;
                &lt;xsl:value-of select="child::*[local-name()='see' and string-length(normalize-space(./text()))&amp;gt;0]"/&gt;
            &lt;/xd:see&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:deprecated elements.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="deprecated"&gt;
        &lt;xsl:if test="child::*[local-name()='deprecated' and string-length(normalize-space(./text()))&amp;gt;0]"&gt;
            &lt;xd:deprecated&gt;
                &lt;xsl:value-of select="child::*[local-name()='deprecated' and string-length(normalize-space(./text()))&amp;gt;0]"/&gt;
            &lt;/xd:deprecated&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:import elements.&lt;/xd:short&gt;&lt;xd:detail&gt;Will create empty documentation for imports that are not documented, and removes documentation of imports that does not exist in the code.&lt;/xd:detail&gt;&lt;xd:param name="code"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="import"&gt;
        &lt;xsl:param name="code" required="yes"/&gt;
        &lt;xsl:variable name="doc" select="."/&gt;
        &lt;xsl:for-each select="$code/xsl:import"&gt;
            &lt;xsl:variable name="href" select="@href"/&gt;
            &lt;xd:import href="{@href}"&gt;
                &lt;xsl:if test="$doc/*[local-name()='import' and @href=$href]"&gt;
                    &lt;xsl:value-of select="$doc/*[local-name()='import' and @href=$href]"/&gt;
                &lt;/xsl:if&gt;
            &lt;/xd:import&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:include elements.&lt;/xd:short&gt;&lt;xd:detail&gt;Will create empty documentation for includes that are not documented, and removes documentation of includes that does not exist in the code.&lt;/xd:detail&gt;&lt;xd:param name="code"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="include"&gt;
        &lt;xsl:param name="code" required="yes"/&gt;
        &lt;xsl:variable name="doc" select="."/&gt;
        &lt;xsl:for-each select="$code/xsl:include"&gt;
            &lt;xsl:variable name="href" select="@href"/&gt;
            &lt;xd:include href="{@href}"&gt;
                &lt;xsl:if test="$doc/*[local-name()='include' and @href=$href]"&gt;
                    &lt;xsl:value-of select="$doc/*[local-name()='include' and @href=$href]"/&gt;
                &lt;/xsl:if&gt;
            &lt;/xd:include&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:import elements.&lt;/xd:short&gt;&lt;xd:detail&gt;Will create empty documentation for imports that are not documented, and removes documentation of imports that does not exist in the code.&lt;/xd:detail&gt;&lt;xd:param name="code"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="param"&gt;
        &lt;xsl:param name="code" required="yes"/&gt;
        &lt;xsl:variable name="doc" select="."/&gt;
        &lt;xsl:for-each select="*[local-name()='param']"&gt;
            &lt;xd:param&gt;
                &lt;xsl:apply-templates select="@*"/&gt;
                &lt;xsl:apply-templates mode="section" select="node()"/&gt;
            &lt;/xd:param&gt;
        &lt;/xsl:for-each&gt;
        &lt;xsl:for-each select="$code/xsl:param"&gt;
            &lt;xsl:variable name="name" select="@name"/&gt;
            &lt;xsl:if test="not($doc/*[local-name()='param' and @name=$name])"&gt;
                &lt;xd:param name="{@name}"/&gt;
            &lt;/xsl:if&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Describes the result of the code.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="return"&gt;
        &lt;xsl:variable name="is-empty" select="count(*[local-name()='return']/descendant-or-self::node()[self::text() and string-length(normalize-space())&amp;gt;0 or local-name()='pre'])=0"/&gt;
        &lt;xsl:if test="not($is-empty)"&gt;
            &lt;xd:return&gt;
                &lt;xsl:apply-templates mode="section" select="*[local-name()='return']/node()"/&gt;
            &lt;/xd:return&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Matches all elements when in "section"-mode.&lt;/xd:short&gt;&lt;xd:detail&gt;
        
        Checks all child elements and their descendants and wraps and handles as is
            appropriate. If a child or descendant is placed in a problematic position, then one of
            the unwrap*-templates are called to solve the problem. Otherwise, just make sure that
            the element is in the correct namespace and copy it.
    &lt;/xd:detail&gt;&lt;xd:param name="wrapin-p"/&gt;&lt;xd:param name="wrapin-ul"/&gt;&lt;xd:param name="wrapin-li"/&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template mode="section" match="@*|node()"&gt;
        &lt;xsl:param name="wrapin-p" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-ul" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-li" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:variable name="is-empty" select="count(descendant-or-self::node()[self::text() and string-length(normalize-space())&amp;gt;0 or local-name()='pre'])=0"/&gt;
        &lt;xsl:variable name="contains-section" select="count(descendant::*[local-name()='section'])&amp;gt;0"/&gt;
        &lt;xsl:variable name="contains-block" select="count(descendant::*[local-name()='ul' or local-name()='li' or local-name()='pre' or local-name()='p'])&amp;gt;0"/&gt;
        &lt;xsl:variable name="contains-block-non-li" select="count(descendant::*[local-name()='ul' or local-name()='pre' or local-name()='p'])&amp;gt;0"/&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="local-name()='section'"&gt;
                &lt;xd:section&gt;
                    &lt;xsl:apply-templates mode="section" select="@*|node()"/&gt;
                &lt;/xd:section&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='p'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$contains-section or $contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-p" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:p&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:p&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='pre'"&gt;
                &lt;xd:pre&gt;
                    &lt;xsl:copy-of select="@*|node()"/&gt;
                &lt;/xd:pre&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='ul'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-section"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$contains-block-non-li"&gt;
                        &lt;xd:section&gt;
                            &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                                &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                            &lt;/xsl:call-template&gt;
                        &lt;/xd:section&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="count(descendant::*[local-name()='li'])=0"&gt;
                        &lt;xsl:choose&gt;
                            &lt;xsl:when test="count(child::node()[self::* or self::text() and string-length(normalize-space())&amp;gt;0])&amp;gt;1"&gt;
                                &lt;xd:section&gt;
                                    &lt;xsl:apply-templates mode="section" select="@*|node()"&gt;
                                        &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                                        &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                                    &lt;/xsl:apply-templates&gt;
                                &lt;/xd:section&gt;
                            &lt;/xsl:when&gt;
                            &lt;xsl:otherwise&gt;
                                &lt;xsl:apply-templates mode="section" select="@*|node()"&gt;
                                    &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                                &lt;/xsl:apply-templates&gt;
                            &lt;/xsl:otherwise&gt;
                        &lt;/xsl:choose&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:ul&gt;
                            &lt;xsl:apply-templates mode="list" select="@*|node()"&gt;
                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:ul&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='li'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-section"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:ul&gt;
                            &lt;xd:li&gt;
                                &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                            &lt;/xd:li&gt;
                        &lt;/xd:ul&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='b'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-section"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-b" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-b" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:b&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:b&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='i'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-section"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-i" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-i" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:i&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:i&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='a'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-section"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-a" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-a-elem" select="." tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-a" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-a-elem" select="." tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:a&gt;
                            &lt;xsl:apply-templates select="@*"/&gt;
                            &lt;xsl:apply-templates mode="phrase" select="node()"/&gt;
                        &lt;/xd:a&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="self::*"&gt;
                        &lt;xsl:choose&gt;
                            &lt;xsl:when test="not(preceding-sibling::*) and not(following-sibling::*)"&gt;
                                &lt;xsl:apply-templates mode="section" select="@*|node()"/&gt;
                            &lt;/xsl:when&gt;
                            &lt;xsl:otherwise&gt;
                                &lt;xd:section&gt;
                                    &lt;xsl:apply-templates mode="section" select="@*|node()"/&gt;
                                &lt;/xd:section&gt;
                            &lt;/xsl:otherwise&gt;
                        &lt;/xsl:choose&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="self::text()"&gt;
                        &lt;xsl:copy/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="section" select="@*|node()"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Handles non-problematic lists.&lt;/xd:short&gt;&lt;xd:param name="wrapin-p"/&gt;&lt;xd:param name="wrapin-ul"/&gt;&lt;xd:param name="wrapin-li"/&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template mode="list" match="@*|node()"&gt;
        &lt;xsl:param name="wrapin-p" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-ul" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-li" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:variable name="is-empty" select="count(descendant-or-self::node()[self::text() and string-length(normalize-space())&amp;gt;0 or local-name()='pre'])=0"/&gt;
        &lt;xsl:variable name="contains-block" select="count(descendant::*[local-name()='ul' or local-name()='li' or local-name()='pre' or local-name()='p'])&amp;gt;0"/&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="local-name()='li'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$wrapin-ul"&gt;
                        &lt;xd:ul&gt;
                            &lt;xd:li&gt;
                                &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                            &lt;/xd:li&gt;
                        &lt;/xd:ul&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:li&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:li&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="self::text()"&gt;
                        &lt;xsl:copy/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="list" select="@*|node()"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Handles all elements when in "block" mode and applies fixes where needed.&lt;/xd:short&gt;&lt;xd:param name="wrapin-p"/&gt;&lt;xd:param name="wrapin-ul"/&gt;&lt;xd:param name="wrapin-li"/&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template mode="block" match="@*|node()"&gt;
        &lt;xsl:param name="wrapin-p" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-ul" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-li" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:variable name="element" select="."/&gt;
        &lt;xsl:variable name="is-empty" select="count(descendant-or-self::node()[self::* or self::text() and string-length(normalize-space())&amp;gt;0])=0"/&gt;
        &lt;xsl:variable name="contains-block" select="count(descendant::*[local-name()='ul' or local-name()='li' or local-name()='pre' or local-name()='p'])&amp;gt;0"/&gt;
        &lt;xsl:variable name="contains-block-non-li" select="count(descendant::*[local-name()='ul' or local-name()='pre' or local-name()='p'])&amp;gt;0"/&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="local-name()='p'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:p&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:p&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='pre'"&gt;
                &lt;xd:pre&gt;
                    &lt;xsl:copy-of select="@*|node()"/&gt;
                &lt;/xd:pre&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='ul'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block-non-li"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="count(descendant::*[local-name()='li' and string-length(normalize-space(descendant-or-self::text()))&amp;gt;0])=0"&gt;
                        &lt;xsl:apply-templates mode="block" select="@*|node()"/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:ul&gt;
                            &lt;xsl:apply-templates mode="list" select="@*|node()"&gt;
                                &lt;xsl:with-param name="wrapin-ul" select="false()"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:ul&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='li'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:ul&gt;
                            &lt;xd:li&gt;
                                &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                                    &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                &lt;/xsl:apply-templates&gt;
                            &lt;/xd:li&gt;
                        &lt;/xd:ul&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="not($contains-block) and $wrapin-p"&gt;
                &lt;xd:p&gt;
                    &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                        &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                        &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                        &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                    &lt;/xsl:apply-templates&gt;
                &lt;/xd:p&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="not($contains-block) and $wrapin-li"&gt;
                &lt;xd:ul&gt;
                    &lt;xd:li&gt;
                        &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                            &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xd:li&gt;
                &lt;/xd:ul&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='b'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-b" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:b&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:b&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='i'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-i" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:i&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:i&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='a'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-a" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-a-elem" select="$element" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:a&gt;
                            &lt;xsl:apply-templates mode="phrase" select="$element/@*"/&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:a&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="self::text()"&gt;
                        &lt;xsl:copy/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="block" select="@*|node()"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Phrases are matched with this template (mode="phrase") and handled appropriately.&lt;/xd:short&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template mode="phrase" match="@*|node()"&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="local-name()='b'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='b'])"&gt;
                        &lt;xd:b&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:b&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="$wrapin-b"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='b'])"&gt;
                        &lt;xd:b&gt;
                            &lt;xsl:apply-templates mode="phrase" select="."&gt;
                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:b&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="."&gt;
                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='i'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='i'])"&gt;
                        &lt;xd:i&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:i&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="$wrapin-i"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='i'])"&gt;
                        &lt;xd:i&gt;
                            &lt;xsl:apply-templates mode="phrase" select="."&gt;
                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:i&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="."&gt;
                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='a'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='a'])"&gt;
                        &lt;xd:a&gt;
                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                            &lt;xsl:apply-templates mode="phrase" select="node()"&gt;
                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:a&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="$wrapin-a"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='a'])"&gt;
                        &lt;xd:a&gt;
                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                            &lt;xsl:apply-templates mode="phrase" select="."&gt;
                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:a&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="."&gt;
                            &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="self::text()"&gt;
                        &lt;xsl:copy/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;This template unwraps problematic elements into sections.&lt;/xd:short&gt;&lt;xd:param name="wasWrapped"/&gt;&lt;xd:param name="wrapin-p"/&gt;&lt;xd:param name="wrapin-ul"/&gt;&lt;xd:param name="wrapin-li"/&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="unwrap-to-sections"&gt;
        &lt;xsl:param name="wasWrapped" select="false()"/&gt;
        &lt;xsl:param name="wrapin-p" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-ul" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-li" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:variable name="element" select="."/&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="not($wasWrapped) and count(child::node()[self::* or self::text() and string-length(normalize-space())&amp;gt;0])&amp;gt;1"&gt;
                &lt;xd:section&gt;
                    &lt;xsl:call-template name="unwrap-to-sections"&gt;
                        &lt;xsl:with-param name="wasWrapped" select="true()"/&gt;
                    &lt;/xsl:call-template&gt;
                &lt;/xd:section&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
                &lt;xsl:for-each-group select="child::node()[self::* or self::text() and string-length(normalize-space())&amp;gt;0]" group-adjacent="self::* and not(ancestor::*[local-name()='pre']) and (local-name()='section' or local-name()='ul' or local-name()='li' or local-name()='pre' or local-name()='p')"&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="current-grouping-key()"&gt;
                            &lt;xsl:choose&gt;
                                &lt;xsl:when test="count(current-group())&amp;gt;1 and last()&amp;gt;1"&gt;
                                    &lt;xd:section&gt;
                                        &lt;xsl:apply-templates mode="section" select="current-group()"&gt;
                                            &lt;xsl:with-param name="wrapin-p" tunnel="yes" select="if ($wrapin-p or local-name($element)='p') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-ul" tunnel="yes" select="if ($wrapin-ul or local-name($element)='ul') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-li" tunnel="yes" select="if ($wrapin-li or local-name($element)='li') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-b" tunnel="yes" select="if ($wrapin-b or local-name($element)='b') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-i" tunnel="yes" select="if ($wrapin-i or local-name($element)='i') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-a" tunnel="yes" select="if ($wrapin-a or local-name($element)='a') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-a-elem" tunnel="yes" select="if (not($wrapin-a) and local-name($element)='a') then $element else false()"/&gt;
                                        &lt;/xsl:apply-templates&gt;
                                    &lt;/xd:section&gt;
                                &lt;/xsl:when&gt;
                                &lt;xsl:otherwise&gt;
                                    &lt;xsl:apply-templates mode="section" select="current-group()"&gt;
                                        &lt;xsl:with-param name="wrapin-p" tunnel="yes" select="if ($wrapin-p or local-name($element)='p') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-ul" tunnel="yes" select="if ($wrapin-ul or local-name($element)='ul') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-li" tunnel="yes" select="if ($wrapin-li or local-name($element)='li') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-b" tunnel="yes" select="if ($wrapin-b or local-name($element)='b') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-i" tunnel="yes" select="if ($wrapin-i or local-name($element)='i') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-a" tunnel="yes" select="if ($wrapin-a or local-name($element)='a') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-a-elem" tunnel="yes" select="if (not($wrapin-a) and local-name($element)='a') then $element else false()"/&gt;
                                    &lt;/xsl:apply-templates&gt;
                                &lt;/xsl:otherwise&gt;
                            &lt;/xsl:choose&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:element name="xd:{local-name($element)}"&gt;
                                &lt;xsl:for-each select="$element/@*"&gt;
                                    &lt;xsl:attribute name="xd:{local-name()}" select="."/&gt;
                                &lt;/xsl:for-each&gt;
                                &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                    &lt;xsl:with-param name="wrapin-p" tunnel="yes" select="if ($wrapin-p or local-name($element)='p') then false() else $wrapin-p"/&gt;
                                    &lt;xsl:with-param name="wrapin-ul" tunnel="yes" select="if ($wrapin-ul or local-name($element)='ul') then false() else $wrapin-ul"/&gt;
                                    &lt;xsl:with-param name="wrapin-li" tunnel="yes" select="if ($wrapin-li or local-name($element)='li') then false() else $wrapin-li"/&gt;
                                    &lt;xsl:with-param name="wrapin-b" tunnel="yes" select="if ($wrapin-b or local-name($element)='b') then false() else $wrapin-b"/&gt;
                                    &lt;xsl:with-param name="wrapin-i" tunnel="yes" select="if ($wrapin-i or local-name($element)='i') then false() else $wrapin-i"/&gt;
                                    &lt;xsl:with-param name="wrapin-a" tunnel="yes" select="if ($wrapin-a or local-name($element)='a') then false() else $wrapin-a"/&gt;
                                &lt;/xsl:apply-templates&gt;
                            &lt;/xsl:element&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xsl:for-each-group&gt;
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;This template unwraps problematic elements into blocks.&lt;/xd:short&gt;&lt;xd:param name="wrapin-p"/&gt;&lt;xd:param name="wrapin-ul"/&gt;&lt;xd:param name="wrapin-li"/&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="unwrap-to-blocks"&gt;
        &lt;xsl:param name="wrapin-p" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-ul" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-li" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:variable name="element" select="."/&gt;
        &lt;xsl:for-each-group select="child::node()[self::* or self::text() and string-length(normalize-space())&amp;gt;0]" group-adjacent="count(descendant-or-self::*[local-name()='ul' or local-name()='li' or local-name()='pre' or local-name()='p'])&amp;gt;0"&gt;
            &lt;xsl:choose&gt;
                &lt;xsl:when test="current-grouping-key()"&gt;
                    &lt;xsl:for-each select="current-group()"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-p" select="$wrapin-p or local-name()='p' or local-name($element)='p'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="$wrapin-ul or local-name()='ul' or local-name($element)='ul'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="$wrapin-li or local-name()='li' or local-name($element)='li'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-b" select="$wrapin-b or local-name()='b' or local-name($element)='b'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-i" select="$wrapin-i or local-name()='i' or local-name($element)='i'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-a" select="$wrapin-a or local-name()='a' or local-name($element)='a'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-a-elem" select="if (local-name()='a') then . else (if (local-name($element)='a') then $element else $wrapin-a-elem)" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:for-each&gt;
                &lt;/xsl:when&gt;
                &lt;xsl:otherwise&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="$wrapin-p"&gt;
                            &lt;xd:p&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="$wrapin-b"&gt;
                                        &lt;xd:b&gt;
                                            &lt;xsl:choose&gt;
                                                &lt;xsl:when test="$wrapin-i"&gt;
                                                  &lt;xd:i&gt;
                                                  &lt;xsl:choose&gt;
                                                  &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                  &lt;/xsl:when&gt;
                                                  &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xsl:otherwise&gt;
                                                  &lt;/xsl:choose&gt;
                                                  &lt;/xd:i&gt;
                                                &lt;/xsl:when&gt;
                                                &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                &lt;/xsl:otherwise&gt;
                                            &lt;/xsl:choose&gt;
                                        &lt;/xd:b&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:when test="$wrapin-i"&gt;
                                        &lt;xd:i&gt;
                                            &lt;xsl:choose&gt;
                                                &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                &lt;/xsl:when&gt;
                                                &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                &lt;/xsl:otherwise&gt;
                                            &lt;/xsl:choose&gt;
                                        &lt;/xd:i&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:when test="$wrapin-a"&gt;
                                        &lt;xd:a&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                            &lt;/xsl:apply-templates&gt;
                                        &lt;/xd:a&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                            &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                        &lt;/xsl:apply-templates&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xd:p&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="$wrapin-li"&gt;
                            &lt;xd:ul&gt;
                                &lt;xd:li&gt;
                                    &lt;xsl:choose&gt;
                                        &lt;xsl:when test="$wrapin-b"&gt;
                                            &lt;xd:b&gt;
                                                &lt;xsl:choose&gt;
                                                  &lt;xsl:when test="$wrapin-i"&gt;
                                                  &lt;xd:i&gt;
                                                  &lt;xsl:choose&gt;
                                                  &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                  &lt;/xsl:when&gt;
                                                  &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xsl:otherwise&gt;
                                                  &lt;/xsl:choose&gt;
                                                  &lt;/xd:i&gt;
                                                  &lt;/xsl:when&gt;
                                                  &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xsl:otherwise&gt;
                                                &lt;/xsl:choose&gt;
                                            &lt;/xd:b&gt;
                                        &lt;/xsl:when&gt;
                                        &lt;xsl:when test="$wrapin-i"&gt;
                                            &lt;xd:i&gt;
                                                &lt;xsl:choose&gt;
                                                  &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                  &lt;/xsl:when&gt;
                                                  &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xsl:otherwise&gt;
                                                &lt;/xsl:choose&gt;
                                            &lt;/xd:i&gt;
                                        &lt;/xsl:when&gt;
                                        &lt;xsl:when test="$wrapin-a"&gt;
                                            &lt;xd:a&gt;
                                                &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                &lt;/xsl:apply-templates&gt;
                                            &lt;/xd:a&gt;
                                        &lt;/xsl:when&gt;
                                        &lt;xsl:otherwise&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                            &lt;/xsl:apply-templates&gt;
                                        &lt;/xsl:otherwise&gt;
                                    &lt;/xsl:choose&gt;
                                &lt;/xd:li&gt;
                            &lt;/xd:ul&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="$wrapin-ul"&gt;
                            &lt;xd:p&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="$wrapin-b"&gt;
                                        &lt;xd:b&gt;
                                            &lt;xsl:choose&gt;
                                                &lt;xsl:when test="$wrapin-i"&gt;
                                                  &lt;xd:i&gt;
                                                  &lt;xsl:choose&gt;
                                                  &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                  &lt;/xsl:when&gt;
                                                  &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xsl:otherwise&gt;
                                                  &lt;/xsl:choose&gt;
                                                  &lt;/xd:i&gt;
                                                &lt;/xsl:when&gt;
                                                &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                &lt;/xsl:otherwise&gt;
                                            &lt;/xsl:choose&gt;
                                        &lt;/xd:b&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:when test="$wrapin-i"&gt;
                                        &lt;xd:i&gt;
                                            &lt;xsl:choose&gt;
                                                &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                &lt;/xsl:when&gt;
                                                &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                &lt;/xsl:otherwise&gt;
                                            &lt;/xsl:choose&gt;
                                        &lt;/xd:i&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:when test="$wrapin-a"&gt;
                                        &lt;xd:a&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                            &lt;/xsl:apply-templates&gt;
                                        &lt;/xd:a&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                            &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                        &lt;/xsl:apply-templates&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xd:p&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="$wrapin-b"&gt;
                            &lt;xd:b&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="$wrapin-i"&gt;
                                        &lt;xd:i&gt;
                                            &lt;xsl:choose&gt;
                                                &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                &lt;/xsl:when&gt;
                                                &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                &lt;/xsl:otherwise&gt;
                                            &lt;/xsl:choose&gt;
                                        &lt;/xd:i&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:when test="$wrapin-a"&gt;
                                        &lt;xd:a&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                            &lt;/xsl:apply-templates&gt;
                                        &lt;/xd:a&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                            &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                        &lt;/xsl:apply-templates&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xd:b&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="$wrapin-i"&gt;
                            &lt;xd:i&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="$wrapin-a"&gt;
                                        &lt;xd:a&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                            &lt;/xsl:apply-templates&gt;
                                        &lt;/xd:a&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                            &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                        &lt;/xsl:apply-templates&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xd:i&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="$wrapin-a"&gt;
                            &lt;xd:a&gt;
                                &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                    &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                &lt;/xsl:apply-templates&gt;
                            &lt;/xd:a&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xsl:otherwise&gt;
            &lt;/xsl:choose&gt;
        &lt;/xsl:for-each-group&gt;
    &lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;&lt;/codeblock&gt;
    &lt;xsl:template name="contributors"&gt;
        &lt;xsl:for-each select="*[local-name()='contributor']"&gt;
            &lt;xsl:variable name="is-empty" select="count(descendant-or-self::text()[string-length(normalize-space())&amp;gt;0])=0"/&gt;
            &lt;xsl:if test="not($is-empty)"&gt;
                &lt;xd:contributor&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="count(child::*)=0"&gt;
                            &lt;xd:name&gt;
                                &lt;xsl:value-of select="."/&gt;
                            &lt;/xd:name&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:if test="child::*[local-name()='name']"&gt;
                                &lt;xd:name&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='name']"/&gt;
                                &lt;/xd:name&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='mailto']"&gt;
                                &lt;xd:mailto&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='mailto']"/&gt;
                                &lt;/xd:mailto&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='organization']"&gt;
                                &lt;xd:organization&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='organization']"/&gt;
                                &lt;/xd:organization&gt;
                            &lt;/xsl:if&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xd:contributor&gt;
            &lt;/xsl:if&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;codeblock&gt;&lt;xsl:stylesheet version="2.0"&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Identity template.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template match="@*|node()"&gt;
        &lt;xsl:copy&gt;
            &lt;xsl:apply-templates select="@*|node()"/&gt;
        &lt;/xsl:copy&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Matches each xd:doc element.&lt;/xd:short&gt;&lt;xd:detail&gt;
        
        Determines what code is being documented and calls appropriate templates for: &lt;xd:ul&gt;
                &lt;xd:li&gt;short description (xd:short)&lt;/xd:li&gt;
                &lt;xd:li&gt;detailed description (xd:detail)&lt;/xd:li&gt;
                &lt;xd:li&gt;authors (xd:author)&lt;/xd:li&gt;
                &lt;xd:li&gt;contributors (xd:contributor)&lt;/xd:li&gt;
                &lt;xd:li&gt;maintainers (xd:maintainer)&lt;/xd:li&gt;
                &lt;xd:li&gt;copyright (xd:copyright)&lt;/xd:li&gt;
                &lt;xd:li&gt;version (xd:version)&lt;/xd:li&gt;
                &lt;xd:li&gt;code existed since version (xd:since)&lt;/xd:li&gt;
                &lt;xd:li&gt;see also (xd:see)&lt;/xd:li&gt;
                &lt;xd:li&gt;deprecated since version (xd:deprecated)&lt;/xd:li&gt;
                &lt;xd:li&gt;import statements (xd:import and xsl:import)&lt;/xd:li&gt;
                &lt;xd:li&gt;include statements (xd:include and xsl:include)&lt;/xd:li&gt;
                &lt;xd:li&gt;parameters (xd:param and xsl:param)&lt;/xd:li&gt;
                &lt;xd:li&gt;return values / output (xd:return)&lt;/xd:li&gt;
            &lt;/xd:ul&gt;
        
        
    &lt;/xd:detail&gt;&lt;xd:return&gt;The normalized xd:doc.&lt;/xd:return&gt;&lt;/xd:doc&gt;
    &lt;xsl:template match="xd:doc"&gt;
        &lt;xsl:copy&gt;
            &lt;xsl:variable name="target"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="@target"&gt;
                        &lt;xsl:value-of select="@target"/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="count(preceding-sibling::*)=0"&gt;
                        &lt;xsl:value-of select="'parent'"/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:value-of select="'following'"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:variable&gt;
            &lt;xsl:variable name="code" select="if ($target='parent') then parent::* else following-sibling::*[1]"/&gt;

            &lt;xsl:attribute name="target" select="$target"/&gt;

            &lt;xsl:call-template name="short"/&gt;
            &lt;xsl:call-template name="detail"/&gt;
            &lt;xsl:call-template name="authors"/&gt;
            &lt;xsl:call-template name="contributors"/&gt;
            &lt;xsl:call-template name="maintainers"/&gt;
            &lt;xsl:call-template name="copyright"/&gt;
            &lt;xsl:call-template name="version"/&gt;
            &lt;xsl:call-template name="since"/&gt;
            &lt;xsl:call-template name="see"/&gt;
            &lt;xsl:call-template name="deprecated"/&gt;
            &lt;xsl:call-template name="import"&gt;
                &lt;xsl:with-param name="code" select="$code"/&gt;
            &lt;/xsl:call-template&gt;
            &lt;xsl:call-template name="include"&gt;
                &lt;xsl:with-param name="code" select="$code"/&gt;
            &lt;/xsl:call-template&gt;
            &lt;xsl:call-template name="param"&gt;
                &lt;xsl:with-param name="code" select="$code"/&gt;
            &lt;/xsl:call-template&gt;
            &lt;xsl:call-template name="return"/&gt;
        &lt;/xsl:copy&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Determines the short description.&lt;/xd:short&gt;&lt;xd:detail&gt;
        
        
            &lt;xd:ul&gt;
                &lt;xd:li&gt;If there is no &amp;lt;xd:short/&amp;gt;-element present, but plain text is present as a
                    child of the &amp;lt;xd:doc/&amp;gt;element, then the first sentence from that text (up
                    until the first period (".") will be used as a short description.&lt;/xd:li&gt;
                &lt;xd:li&gt;Else; if there are multiple &amp;lt;xd:short/&amp;gt;-elements, each one of their
                    contents will be wrapped in separate &amp;lt;section/&amp;gt;s.&lt;/xd:li&gt;
                &lt;xd:li&gt;Else; use the one &amp;lt;xd:short/&amp;gt;-element that is present for the short
                    description.&lt;/xd:li&gt;
            &lt;/xd:ul&gt;
        
    &lt;/xd:detail&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="short"&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="count(child::*[local-name()='short'])&amp;gt;1"&gt;
                &lt;xd:short&gt;
                    &lt;xsl:for-each select="child::*[local-name()='short']"&gt;
                        &lt;xd:section&gt;
                            &lt;xsl:apply-templates mode="section"/&gt;
                        &lt;/xd:section&gt;
                    &lt;/xsl:for-each&gt;
                &lt;/xd:short&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="count(child::*[local-name()='short'])=1"&gt;
                &lt;xd:short&gt;
                    &lt;xsl:apply-templates select="child::*[local-name()='short']/node()" mode="section"/&gt;
                &lt;/xd:short&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="child::text()[string-length(normalize-space())&amp;gt;0]"&gt;
                &lt;xsl:variable name="short" select="replace(normalize-space(child::text()[1]),'^([^\.]+\.?)\s?.*$','$1')"/&gt;
                &lt;xd:short&gt;
                    &lt;xsl:value-of select="$short"/&gt;
                &lt;/xd:short&gt;
            &lt;/xsl:when&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Determines the detailed description.&lt;/xd:short&gt;&lt;xd:detail&gt;
        
        The detailed description will be put together based on any number of
            &amp;lt;xd:detail/&amp;gt;-elements, as well as any number of text nodes that are direct
            children of the &amp;lt;xd:doc/&amp;gt;-element. If the xd:short was extracted from the first
            text node, then the first sentence from that text node will be ignored. If there are
            multiple &amp;lt;xd:detail/&amp;gt; and text nodes, then each of them will be wrapped in
            &amp;lt;xd:section/&amp;gt;s.
    &lt;/xd:detail&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="detail"&gt;
        &lt;xsl:variable name="shortInFirstText" select="count(./*[local-name()='short'])=0"/&gt;
        &lt;xsl:variable name="detailCount" select="(if (matches(normalize-space(./text()[1]),'\.[^\.].')) then 1 else 0) + count(*[local-name()='detail' and (descendant-or-self::node()[self::text() and string-length(normalize-space())&amp;gt;0 or local-name()='pre' and not(ancestor::*[local-name()='pre'])])]) + count(./text()[not(position()=1) and string-length(normalize-space())&amp;gt;0])"/&gt;
        &lt;xsl:if test="$detailCount&amp;gt;0"&gt;
            &lt;xd:detail&gt;
                &lt;xsl:for-each select="*|text()"&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="self::text() and count(preceding-sibling::text()[string-length(normalize-space())&amp;gt;0])=0"&gt;
                            &lt;!-- first text --&gt;
                            &lt;xsl:choose&gt;
                                &lt;xsl:when test="$shortInFirstText"&gt;
                                    &lt;xsl:variable name="detail" select="replace(normalize-space(),'^[^\.]+.?\s?(.*)$','$1')"/&gt;
                                    &lt;xsl:choose&gt;
                                        &lt;xsl:when test="$detailCount&amp;gt;1"&gt;
                                            &lt;xd:section&gt;
                                                &lt;xsl:value-of select="$detail"/&gt;
                                            &lt;/xd:section&gt;
                                        &lt;/xsl:when&gt;
                                        &lt;xsl:otherwise&gt;
                                            &lt;xsl:value-of select="$detail"/&gt;
                                        &lt;/xsl:otherwise&gt;
                                    &lt;/xsl:choose&gt;
                                &lt;/xsl:when&gt;
                                &lt;xsl:otherwise&gt;
                                    &lt;xsl:choose&gt;
                                        &lt;xsl:when test="$detailCount&amp;gt;1"&gt;
                                            &lt;xd:section&gt;
                                                &lt;xsl:value-of select="."/&gt;
                                            &lt;/xd:section&gt;
                                        &lt;/xsl:when&gt;
                                        &lt;xsl:otherwise&gt;
                                            &lt;xsl:value-of select="."/&gt;
                                        &lt;/xsl:otherwise&gt;
                                    &lt;/xsl:choose&gt;
                                &lt;/xsl:otherwise&gt;
                            &lt;/xsl:choose&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="self::text()"&gt;
                            &lt;!-- non-first text --&gt;
                            &lt;xsl:choose&gt;
                                &lt;xsl:when test="$detailCount&amp;gt;1"&gt;
                                    &lt;xd:section&gt;
                                        &lt;xsl:value-of select="."/&gt;
                                    &lt;/xd:section&gt;
                                &lt;/xsl:when&gt;
                                &lt;xsl:otherwise&gt;
                                    &lt;xsl:value-of select="."/&gt;
                                &lt;/xsl:otherwise&gt;
                            &lt;/xsl:choose&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="local-name()='detail'"&gt;
                            &lt;!-- detail element --&gt;
                            &lt;xsl:choose&gt;
                                &lt;xsl:when test="$detailCount&amp;gt;1"&gt;
                                    &lt;xd:section&gt;
                                        &lt;xsl:apply-templates select="child::node()" mode="section"/&gt;
                                    &lt;/xd:section&gt;
                                &lt;/xsl:when&gt;
                                &lt;xsl:otherwise&gt;
                                    &lt;xsl:apply-templates select="child::node()" mode="section"/&gt;
                                &lt;/xsl:otherwise&gt;
                            &lt;/xsl:choose&gt;
                        &lt;/xsl:when&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xsl:for-each&gt;
            &lt;/xd:detail&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes the xd:author-elements.&lt;/xd:short&gt;&lt;xd:detail&gt;&amp;gt;xd:author/&amp;lt;s with no text are removed. &amp;lt;xd:author/&amp;gt;s with no child elements will have their text content wrapped in a &amp;lt;xd:name/&amp;gt; element. Children other than xd:name, xd:mailto and xd:organization are ignored.&lt;/xd:detail&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="authors" xml:id="authors"&gt;
        &lt;xsl:for-each select="*[local-name()='author']"&gt;
            &lt;xsl:variable name="is-empty" select="count(descendant-or-self::text()[string-length(normalize-space())&amp;gt;0])=0"/&gt;
            &lt;xsl:if test="not($is-empty)"&gt;
                &lt;xd:author&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="count(child::*)=0"&gt;
                            &lt;xd:name&gt;
                                &lt;xsl:value-of select="."/&gt;
                            &lt;/xd:name&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:if test="child::*[local-name()='name']"&gt;
                                &lt;xd:name&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='name']"/&gt;
                                &lt;/xd:name&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='mailto']"&gt;
                                &lt;xd:mailto&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='mailto']"/&gt;
                                &lt;/xd:mailto&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='organization']"&gt;
                                &lt;xd:organization&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='organization']"/&gt;
                                &lt;/xd:organization&gt;
                            &lt;/xsl:if&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xd:author&gt;
            &lt;/xsl:if&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;&amp;lt;xd:contributor/&amp;gt;s are normalized in the same way as &amp;lt;xd:author/&amp;gt;s&lt;/xd:short&gt;&lt;xd:see&gt;#authors&lt;/xd:see&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="contributors"&gt;
        &lt;xsl:for-each select="*[local-name()='contributor']"&gt;
            &lt;xsl:variable name="is-empty" select="count(descendant-or-self::text()[string-length(normalize-space())&amp;gt;0])=0"/&gt;
            &lt;xsl:if test="not($is-empty)"&gt;
                &lt;xd:contributor&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="count(child::*)=0"&gt;
                            &lt;xd:name&gt;
                                &lt;xsl:value-of select="."/&gt;
                            &lt;/xd:name&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:if test="child::*[local-name()='name']"&gt;
                                &lt;xd:name&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='name']"/&gt;
                                &lt;/xd:name&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='mailto']"&gt;
                                &lt;xd:mailto&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='mailto']"/&gt;
                                &lt;/xd:mailto&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='organization']"&gt;
                                &lt;xd:organization&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='organization']"/&gt;
                                &lt;/xd:organization&gt;
                            &lt;/xsl:if&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xd:contributor&gt;
            &lt;/xsl:if&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;&amp;lt;xd:maintainer/&amp;gt;s are normalized in the same way as &amp;lt;xd:author/&amp;gt;s&lt;/xd:short&gt;&lt;xd:see&gt;#authors&lt;/xd:see&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="maintainers"&gt;
        &lt;xsl:for-each select="*[local-name()='maintainer']"&gt;
            &lt;xsl:variable name="is-empty" select="count(descendant-or-self::text()[string-length(normalize-space())&amp;gt;0])=0"/&gt;
            &lt;xsl:if test="not($is-empty)"&gt;
                &lt;xd:maintainer&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="count(child::*)=0"&gt;
                            &lt;xd:name&gt;
                                &lt;xsl:value-of select="."/&gt;
                            &lt;/xd:name&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:if test="child::*[local-name()='name']"&gt;
                                &lt;xd:name&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='name']"/&gt;
                                &lt;/xd:name&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='mailto']"&gt;
                                &lt;xd:mailto&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='mailto']"/&gt;
                                &lt;/xd:mailto&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='organization']"&gt;
                                &lt;xd:organization&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='organization']"/&gt;
                                &lt;/xd:organization&gt;
                            &lt;/xsl:if&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xd:maintainer&gt;
            &lt;/xsl:if&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes the xd:copyright-element.&lt;/xd:short&gt;&lt;xd:detail&gt;&amp;gt;xd:copyright/&amp;lt;s with no text are removed. &amp;lt;xd:copyright/&amp;gt;s with no child elements will have their text content wrapped in a &amp;lt;xd:name/&amp;gt; element. Children other than xd:year, xd:name, xd:mailto and xd:organization are ignored.&lt;/xd:detail&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="copyright"&gt;
        &lt;xsl:for-each select="*[local-name()='copyright']"&gt;
            &lt;xsl:variable name="is-empty" select="count(descendant-or-self::text()[string-length(normalize-space())&amp;gt;0])=0"/&gt;
            &lt;xsl:if test="not($is-empty)"&gt;
                &lt;xd:copyright&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="count(child::*)=0"&gt;
                            &lt;xd:name&gt;
                                &lt;xsl:value-of select="."/&gt;
                            &lt;/xd:name&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:if test="child::*[local-name()='year']"&gt;
                                &lt;xd:year&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='year']"/&gt;
                                &lt;/xd:year&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='name']"&gt;
                                &lt;xd:name&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='name']"/&gt;
                                &lt;/xd:name&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='mailto']"&gt;
                                &lt;xd:mailto&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='mailto']"/&gt;
                                &lt;/xd:mailto&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='organization']"&gt;
                                &lt;xd:organization&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='organization']"/&gt;
                                &lt;/xd:organization&gt;
                            &lt;/xsl:if&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xd:copyright&gt;
            &lt;/xsl:if&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:version elements.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="version"&gt;
        &lt;xsl:if test="child::*[local-name()='version' and string-length(normalize-space(./text()))&amp;gt;0]"&gt;
            &lt;xd:version&gt;
                &lt;xsl:value-of select="child::*[local-name()='version' and string-length(normalize-space(./text()))&amp;gt;0]"/&gt;
            &lt;/xd:version&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:since elements.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="since"&gt;
        &lt;xsl:if test="child::*[local-name()='since' and string-length(normalize-space(./text()))&amp;gt;0]"&gt;
            &lt;xd:since&gt;
                &lt;xsl:value-of select="child::*[local-name()='since' and string-length(normalize-space(./text()))&amp;gt;0]"/&gt;
            &lt;/xd:since&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:see elements.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="see"&gt;
        &lt;xsl:if test="child::*[local-name()='see' and string-length(normalize-space(./text()))&amp;gt;0]"&gt;
            &lt;xd:see&gt;
                &lt;xsl:value-of select="child::*[local-name()='see' and string-length(normalize-space(./text()))&amp;gt;0]"/&gt;
            &lt;/xd:see&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:deprecated elements.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="deprecated"&gt;
        &lt;xsl:if test="child::*[local-name()='deprecated' and string-length(normalize-space(./text()))&amp;gt;0]"&gt;
            &lt;xd:deprecated&gt;
                &lt;xsl:value-of select="child::*[local-name()='deprecated' and string-length(normalize-space(./text()))&amp;gt;0]"/&gt;
            &lt;/xd:deprecated&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:import elements.&lt;/xd:short&gt;&lt;xd:detail&gt;Will create empty documentation for imports that are not documented, and removes documentation of imports that does not exist in the code.&lt;/xd:detail&gt;&lt;xd:param name="code"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="import"&gt;
        &lt;xsl:param name="code" required="yes"/&gt;
        &lt;xsl:variable name="doc" select="."/&gt;
        &lt;xsl:for-each select="$code/xsl:import"&gt;
            &lt;xsl:variable name="href" select="@href"/&gt;
            &lt;xd:import href="{@href}"&gt;
                &lt;xsl:if test="$doc/*[local-name()='import' and @href=$href]"&gt;
                    &lt;xsl:value-of select="$doc/*[local-name()='import' and @href=$href]"/&gt;
                &lt;/xsl:if&gt;
            &lt;/xd:import&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:include elements.&lt;/xd:short&gt;&lt;xd:detail&gt;Will create empty documentation for includes that are not documented, and removes documentation of includes that does not exist in the code.&lt;/xd:detail&gt;&lt;xd:param name="code"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="include"&gt;
        &lt;xsl:param name="code" required="yes"/&gt;
        &lt;xsl:variable name="doc" select="."/&gt;
        &lt;xsl:for-each select="$code/xsl:include"&gt;
            &lt;xsl:variable name="href" select="@href"/&gt;
            &lt;xd:include href="{@href}"&gt;
                &lt;xsl:if test="$doc/*[local-name()='include' and @href=$href]"&gt;
                    &lt;xsl:value-of select="$doc/*[local-name()='include' and @href=$href]"/&gt;
                &lt;/xsl:if&gt;
            &lt;/xd:include&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:import elements.&lt;/xd:short&gt;&lt;xd:detail&gt;Will create empty documentation for imports that are not documented, and removes documentation of imports that does not exist in the code.&lt;/xd:detail&gt;&lt;xd:param name="code"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="param"&gt;
        &lt;xsl:param name="code" required="yes"/&gt;
        &lt;xsl:variable name="doc" select="."/&gt;
        &lt;xsl:for-each select="*[local-name()='param']"&gt;
            &lt;xd:param&gt;
                &lt;xsl:apply-templates select="@*"/&gt;
                &lt;xsl:apply-templates mode="section" select="node()"/&gt;
            &lt;/xd:param&gt;
        &lt;/xsl:for-each&gt;
        &lt;xsl:for-each select="$code/xsl:param"&gt;
            &lt;xsl:variable name="name" select="@name"/&gt;
            &lt;xsl:if test="not($doc/*[local-name()='param' and @name=$name])"&gt;
                &lt;xd:param name="{@name}"/&gt;
            &lt;/xsl:if&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Describes the result of the code.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="return"&gt;
        &lt;xsl:variable name="is-empty" select="count(*[local-name()='return']/descendant-or-self::node()[self::text() and string-length(normalize-space())&amp;gt;0 or local-name()='pre'])=0"/&gt;
        &lt;xsl:if test="not($is-empty)"&gt;
            &lt;xd:return&gt;
                &lt;xsl:apply-templates mode="section" select="*[local-name()='return']/node()"/&gt;
            &lt;/xd:return&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Matches all elements when in "section"-mode.&lt;/xd:short&gt;&lt;xd:detail&gt;
        
        Checks all child elements and their descendants and wraps and handles as is
            appropriate. If a child or descendant is placed in a problematic position, then one of
            the unwrap*-templates are called to solve the problem. Otherwise, just make sure that
            the element is in the correct namespace and copy it.
    &lt;/xd:detail&gt;&lt;xd:param name="wrapin-p"/&gt;&lt;xd:param name="wrapin-ul"/&gt;&lt;xd:param name="wrapin-li"/&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template mode="section" match="@*|node()"&gt;
        &lt;xsl:param name="wrapin-p" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-ul" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-li" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:variable name="is-empty" select="count(descendant-or-self::node()[self::text() and string-length(normalize-space())&amp;gt;0 or local-name()='pre'])=0"/&gt;
        &lt;xsl:variable name="contains-section" select="count(descendant::*[local-name()='section'])&amp;gt;0"/&gt;
        &lt;xsl:variable name="contains-block" select="count(descendant::*[local-name()='ul' or local-name()='li' or local-name()='pre' or local-name()='p'])&amp;gt;0"/&gt;
        &lt;xsl:variable name="contains-block-non-li" select="count(descendant::*[local-name()='ul' or local-name()='pre' or local-name()='p'])&amp;gt;0"/&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="local-name()='section'"&gt;
                &lt;xd:section&gt;
                    &lt;xsl:apply-templates mode="section" select="@*|node()"/&gt;
                &lt;/xd:section&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='p'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$contains-section or $contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-p" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:p&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:p&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='pre'"&gt;
                &lt;xd:pre&gt;
                    &lt;xsl:copy-of select="@*|node()"/&gt;
                &lt;/xd:pre&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='ul'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-section"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$contains-block-non-li"&gt;
                        &lt;xd:section&gt;
                            &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                                &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                            &lt;/xsl:call-template&gt;
                        &lt;/xd:section&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="count(descendant::*[local-name()='li'])=0"&gt;
                        &lt;xsl:choose&gt;
                            &lt;xsl:when test="count(child::node()[self::* or self::text() and string-length(normalize-space())&amp;gt;0])&amp;gt;1"&gt;
                                &lt;xd:section&gt;
                                    &lt;xsl:apply-templates mode="section" select="@*|node()"&gt;
                                        &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                                        &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                                    &lt;/xsl:apply-templates&gt;
                                &lt;/xd:section&gt;
                            &lt;/xsl:when&gt;
                            &lt;xsl:otherwise&gt;
                                &lt;xsl:apply-templates mode="section" select="@*|node()"&gt;
                                    &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                                &lt;/xsl:apply-templates&gt;
                            &lt;/xsl:otherwise&gt;
                        &lt;/xsl:choose&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:ul&gt;
                            &lt;xsl:apply-templates mode="list" select="@*|node()"&gt;
                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:ul&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='li'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-section"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:ul&gt;
                            &lt;xd:li&gt;
                                &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                            &lt;/xd:li&gt;
                        &lt;/xd:ul&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='b'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-section"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-b" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-b" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:b&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:b&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='i'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-section"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-i" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-i" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:i&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:i&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='a'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-section"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-a" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-a-elem" select="." tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-a" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-a-elem" select="." tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:a&gt;
                            &lt;xsl:apply-templates select="@*"/&gt;
                            &lt;xsl:apply-templates mode="phrase" select="node()"/&gt;
                        &lt;/xd:a&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="self::*"&gt;
                        &lt;xsl:choose&gt;
                            &lt;xsl:when test="not(preceding-sibling::*) and not(following-sibling::*)"&gt;
                                &lt;xsl:apply-templates mode="section" select="@*|node()"/&gt;
                            &lt;/xsl:when&gt;
                            &lt;xsl:otherwise&gt;
                                &lt;xd:section&gt;
                                    &lt;xsl:apply-templates mode="section" select="@*|node()"/&gt;
                                &lt;/xd:section&gt;
                            &lt;/xsl:otherwise&gt;
                        &lt;/xsl:choose&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="self::text()"&gt;
                        &lt;xsl:copy/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="section" select="@*|node()"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Handles non-problematic lists.&lt;/xd:short&gt;&lt;xd:param name="wrapin-p"/&gt;&lt;xd:param name="wrapin-ul"/&gt;&lt;xd:param name="wrapin-li"/&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template mode="list" match="@*|node()"&gt;
        &lt;xsl:param name="wrapin-p" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-ul" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-li" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:variable name="is-empty" select="count(descendant-or-self::node()[self::text() and string-length(normalize-space())&amp;gt;0 or local-name()='pre'])=0"/&gt;
        &lt;xsl:variable name="contains-block" select="count(descendant::*[local-name()='ul' or local-name()='li' or local-name()='pre' or local-name()='p'])&amp;gt;0"/&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="local-name()='li'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$wrapin-ul"&gt;
                        &lt;xd:ul&gt;
                            &lt;xd:li&gt;
                                &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                            &lt;/xd:li&gt;
                        &lt;/xd:ul&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:li&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:li&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="self::text()"&gt;
                        &lt;xsl:copy/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="list" select="@*|node()"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Handles all elements when in "block" mode and applies fixes where needed.&lt;/xd:short&gt;&lt;xd:param name="wrapin-p"/&gt;&lt;xd:param name="wrapin-ul"/&gt;&lt;xd:param name="wrapin-li"/&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template mode="block" match="@*|node()"&gt;
        &lt;xsl:param name="wrapin-p" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-ul" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-li" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:variable name="element" select="."/&gt;
        &lt;xsl:variable name="is-empty" select="count(descendant-or-self::node()[self::* or self::text() and string-length(normalize-space())&amp;gt;0])=0"/&gt;
        &lt;xsl:variable name="contains-block" select="count(descendant::*[local-name()='ul' or local-name()='li' or local-name()='pre' or local-name()='p'])&amp;gt;0"/&gt;
        &lt;xsl:variable name="contains-block-non-li" select="count(descendant::*[local-name()='ul' or local-name()='pre' or local-name()='p'])&amp;gt;0"/&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="local-name()='p'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:p&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:p&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='pre'"&gt;
                &lt;xd:pre&gt;
                    &lt;xsl:copy-of select="@*|node()"/&gt;
                &lt;/xd:pre&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='ul'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block-non-li"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="count(descendant::*[local-name()='li' and string-length(normalize-space(descendant-or-self::text()))&amp;gt;0])=0"&gt;
                        &lt;xsl:apply-templates mode="block" select="@*|node()"/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:ul&gt;
                            &lt;xsl:apply-templates mode="list" select="@*|node()"&gt;
                                &lt;xsl:with-param name="wrapin-ul" select="false()"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:ul&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='li'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:ul&gt;
                            &lt;xd:li&gt;
                                &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                                    &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                &lt;/xsl:apply-templates&gt;
                            &lt;/xd:li&gt;
                        &lt;/xd:ul&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="not($contains-block) and $wrapin-p"&gt;
                &lt;xd:p&gt;
                    &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                        &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                        &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                        &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                    &lt;/xsl:apply-templates&gt;
                &lt;/xd:p&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="not($contains-block) and $wrapin-li"&gt;
                &lt;xd:ul&gt;
                    &lt;xd:li&gt;
                        &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                            &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xd:li&gt;
                &lt;/xd:ul&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='b'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-b" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:b&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:b&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='i'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-i" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:i&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:i&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='a'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-a" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-a-elem" select="$element" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:a&gt;
                            &lt;xsl:apply-templates mode="phrase" select="$element/@*"/&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:a&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="self::text()"&gt;
                        &lt;xsl:copy/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="block" select="@*|node()"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Phrases are matched with this template (mode="phrase") and handled appropriately.&lt;/xd:short&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template mode="phrase" match="@*|node()"&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="local-name()='b'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='b'])"&gt;
                        &lt;xd:b&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:b&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="$wrapin-b"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='b'])"&gt;
                        &lt;xd:b&gt;
                            &lt;xsl:apply-templates mode="phrase" select="."&gt;
                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:b&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="."&gt;
                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='i'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='i'])"&gt;
                        &lt;xd:i&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:i&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="$wrapin-i"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='i'])"&gt;
                        &lt;xd:i&gt;
                            &lt;xsl:apply-templates mode="phrase" select="."&gt;
                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:i&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="."&gt;
                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='a'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='a'])"&gt;
                        &lt;xd:a&gt;
                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                            &lt;xsl:apply-templates mode="phrase" select="node()"&gt;
                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:a&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="$wrapin-a"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='a'])"&gt;
                        &lt;xd:a&gt;
                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                            &lt;xsl:apply-templates mode="phrase" select="."&gt;
                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:a&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="."&gt;
                            &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="self::text()"&gt;
                        &lt;xsl:copy/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;This template unwraps problematic elements into sections.&lt;/xd:short&gt;&lt;xd:param name="wasWrapped"/&gt;&lt;xd:param name="wrapin-p"/&gt;&lt;xd:param name="wrapin-ul"/&gt;&lt;xd:param name="wrapin-li"/&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="unwrap-to-sections"&gt;
        &lt;xsl:param name="wasWrapped" select="false()"/&gt;
        &lt;xsl:param name="wrapin-p" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-ul" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-li" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:variable name="element" select="."/&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="not($wasWrapped) and count(child::node()[self::* or self::text() and string-length(normalize-space())&amp;gt;0])&amp;gt;1"&gt;
                &lt;xd:section&gt;
                    &lt;xsl:call-template name="unwrap-to-sections"&gt;
                        &lt;xsl:with-param name="wasWrapped" select="true()"/&gt;
                    &lt;/xsl:call-template&gt;
                &lt;/xd:section&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
                &lt;xsl:for-each-group select="child::node()[self::* or self::text() and string-length(normalize-space())&amp;gt;0]" group-adjacent="self::* and not(ancestor::*[local-name()='pre']) and (local-name()='section' or local-name()='ul' or local-name()='li' or local-name()='pre' or local-name()='p')"&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="current-grouping-key()"&gt;
                            &lt;xsl:choose&gt;
                                &lt;xsl:when test="count(current-group())&amp;gt;1 and last()&amp;gt;1"&gt;
                                    &lt;xd:section&gt;
                                        &lt;xsl:apply-templates mode="section" select="current-group()"&gt;
                                            &lt;xsl:with-param name="wrapin-p" tunnel="yes" select="if ($wrapin-p or local-name($element)='p') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-ul" tunnel="yes" select="if ($wrapin-ul or local-name($element)='ul') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-li" tunnel="yes" select="if ($wrapin-li or local-name($element)='li') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-b" tunnel="yes" select="if ($wrapin-b or local-name($element)='b') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-i" tunnel="yes" select="if ($wrapin-i or local-name($element)='i') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-a" tunnel="yes" select="if ($wrapin-a or local-name($element)='a') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-a-elem" tunnel="yes" select="if (not($wrapin-a) and local-name($element)='a') then $element else false()"/&gt;
                                        &lt;/xsl:apply-templates&gt;
                                    &lt;/xd:section&gt;
                                &lt;/xsl:when&gt;
                                &lt;xsl:otherwise&gt;
                                    &lt;xsl:apply-templates mode="section" select="current-group()"&gt;
                                        &lt;xsl:with-param name="wrapin-p" tunnel="yes" select="if ($wrapin-p or local-name($element)='p') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-ul" tunnel="yes" select="if ($wrapin-ul or local-name($element)='ul') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-li" tunnel="yes" select="if ($wrapin-li or local-name($element)='li') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-b" tunnel="yes" select="if ($wrapin-b or local-name($element)='b') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-i" tunnel="yes" select="if ($wrapin-i or local-name($element)='i') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-a" tunnel="yes" select="if ($wrapin-a or local-name($element)='a') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-a-elem" tunnel="yes" select="if (not($wrapin-a) and local-name($element)='a') then $element else false()"/&gt;
                                    &lt;/xsl:apply-templates&gt;
                                &lt;/xsl:otherwise&gt;
                            &lt;/xsl:choose&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:element name="xd:{local-name($element)}"&gt;
                                &lt;xsl:for-each select="$element/@*"&gt;
                                    &lt;xsl:attribute name="xd:{local-name()}" select="."/&gt;
                                &lt;/xsl:for-each&gt;
                                &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                    &lt;xsl:with-param name="wrapin-p" tunnel="yes" select="if ($wrapin-p or local-name($element)='p') then false() else $wrapin-p"/&gt;
                                    &lt;xsl:with-param name="wrapin-ul" tunnel="yes" select="if ($wrapin-ul or local-name($element)='ul') then false() else $wrapin-ul"/&gt;
                                    &lt;xsl:with-param name="wrapin-li" tunnel="yes" select="if ($wrapin-li or local-name($element)='li') then false() else $wrapin-li"/&gt;
                                    &lt;xsl:with-param name="wrapin-b" tunnel="yes" select="if ($wrapin-b or local-name($element)='b') then false() else $wrapin-b"/&gt;
                                    &lt;xsl:with-param name="wrapin-i" tunnel="yes" select="if ($wrapin-i or local-name($element)='i') then false() else $wrapin-i"/&gt;
                                    &lt;xsl:with-param name="wrapin-a" tunnel="yes" select="if ($wrapin-a or local-name($element)='a') then false() else $wrapin-a"/&gt;
                                &lt;/xsl:apply-templates&gt;
                            &lt;/xsl:element&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xsl:for-each-group&gt;
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;This template unwraps problematic elements into blocks.&lt;/xd:short&gt;&lt;xd:param name="wrapin-p"/&gt;&lt;xd:param name="wrapin-ul"/&gt;&lt;xd:param name="wrapin-li"/&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="unwrap-to-blocks"&gt;
        &lt;xsl:param name="wrapin-p" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-ul" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-li" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:variable name="element" select="."/&gt;
        &lt;xsl:for-each-group select="child::node()[self::* or self::text() and string-length(normalize-space())&amp;gt;0]" group-adjacent="count(descendant-or-self::*[local-name()='ul' or local-name()='li' or local-name()='pre' or local-name()='p'])&amp;gt;0"&gt;
            &lt;xsl:choose&gt;
                &lt;xsl:when test="current-grouping-key()"&gt;
                    &lt;xsl:for-each select="current-group()"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-p" select="$wrapin-p or local-name()='p' or local-name($element)='p'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="$wrapin-ul or local-name()='ul' or local-name($element)='ul'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="$wrapin-li or local-name()='li' or local-name($element)='li'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-b" select="$wrapin-b or local-name()='b' or local-name($element)='b'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-i" select="$wrapin-i or local-name()='i' or local-name($element)='i'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-a" select="$wrapin-a or local-name()='a' or local-name($element)='a'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-a-elem" select="if (local-name()='a') then . else (if (local-name($element)='a') then $element else $wrapin-a-elem)" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:for-each&gt;
                &lt;/xsl:when&gt;
                &lt;xsl:otherwise&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="$wrapin-p"&gt;
                            &lt;xd:p&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="$wrapin-b"&gt;
                                        &lt;xd:b&gt;
                                            &lt;xsl:choose&gt;
                                                &lt;xsl:when test="$wrapin-i"&gt;
                                                  &lt;xd:i&gt;
                                                  &lt;xsl:choose&gt;
                                                  &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                  &lt;/xsl:when&gt;
                                                  &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xsl:otherwise&gt;
                                                  &lt;/xsl:choose&gt;
                                                  &lt;/xd:i&gt;
                                                &lt;/xsl:when&gt;
                                                &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                &lt;/xsl:otherwise&gt;
                                            &lt;/xsl:choose&gt;
                                        &lt;/xd:b&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:when test="$wrapin-i"&gt;
                                        &lt;xd:i&gt;
                                            &lt;xsl:choose&gt;
                                                &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                &lt;/xsl:when&gt;
                                                &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                &lt;/xsl:otherwise&gt;
                                            &lt;/xsl:choose&gt;
                                        &lt;/xd:i&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:when test="$wrapin-a"&gt;
                                        &lt;xd:a&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                            &lt;/xsl:apply-templates&gt;
                                        &lt;/xd:a&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                            &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                        &lt;/xsl:apply-templates&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xd:p&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="$wrapin-li"&gt;
                            &lt;xd:ul&gt;
                                &lt;xd:li&gt;
                                    &lt;xsl:choose&gt;
                                        &lt;xsl:when test="$wrapin-b"&gt;
                                            &lt;xd:b&gt;
                                                &lt;xsl:choose&gt;
                                                  &lt;xsl:when test="$wrapin-i"&gt;
                                                  &lt;xd:i&gt;
                                                  &lt;xsl:choose&gt;
                                                  &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                  &lt;/xsl:when&gt;
                                                  &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xsl:otherwise&gt;
                                                  &lt;/xsl:choose&gt;
                                                  &lt;/xd:i&gt;
                                                  &lt;/xsl:when&gt;
                                                  &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xsl:otherwise&gt;
                                                &lt;/xsl:choose&gt;
                                            &lt;/xd:b&gt;
                                        &lt;/xsl:when&gt;
                                        &lt;xsl:when test="$wrapin-i"&gt;
                                            &lt;xd:i&gt;
                                                &lt;xsl:choose&gt;
                                                  &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                  &lt;/xsl:when&gt;
                                                  &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xsl:otherwise&gt;
                                                &lt;/xsl:choose&gt;
                                            &lt;/xd:i&gt;
                                        &lt;/xsl:when&gt;
                                        &lt;xsl:when test="$wrapin-a"&gt;
                                            &lt;xd:a&gt;
                                                &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                &lt;/xsl:apply-templates&gt;
                                            &lt;/xd:a&gt;
                                        &lt;/xsl:when&gt;
                                        &lt;xsl:otherwise&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                            &lt;/xsl:apply-templates&gt;
                                        &lt;/xsl:otherwise&gt;
                                    &lt;/xsl:choose&gt;
                                &lt;/xd:li&gt;
                            &lt;/xd:ul&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="$wrapin-ul"&gt;
                            &lt;xd:p&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="$wrapin-b"&gt;
                                        &lt;xd:b&gt;
                                            &lt;xsl:choose&gt;
                                                &lt;xsl:when test="$wrapin-i"&gt;
                                                  &lt;xd:i&gt;
                                                  &lt;xsl:choose&gt;
                                                  &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                  &lt;/xsl:when&gt;
                                                  &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xsl:otherwise&gt;
                                                  &lt;/xsl:choose&gt;
                                                  &lt;/xd:i&gt;
                                                &lt;/xsl:when&gt;
                                                &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                &lt;/xsl:otherwise&gt;
                                            &lt;/xsl:choose&gt;
                                        &lt;/xd:b&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:when test="$wrapin-i"&gt;
                                        &lt;xd:i&gt;
                                            &lt;xsl:choose&gt;
                                                &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                &lt;/xsl:when&gt;
                                                &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                &lt;/xsl:otherwise&gt;
                                            &lt;/xsl:choose&gt;
                                        &lt;/xd:i&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:when test="$wrapin-a"&gt;
                                        &lt;xd:a&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                            &lt;/xsl:apply-templates&gt;
                                        &lt;/xd:a&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                            &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                        &lt;/xsl:apply-templates&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xd:p&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="$wrapin-b"&gt;
                            &lt;xd:b&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="$wrapin-i"&gt;
                                        &lt;xd:i&gt;
                                            &lt;xsl:choose&gt;
                                                &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                &lt;/xsl:when&gt;
                                                &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                &lt;/xsl:otherwise&gt;
                                            &lt;/xsl:choose&gt;
                                        &lt;/xd:i&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:when test="$wrapin-a"&gt;
                                        &lt;xd:a&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                            &lt;/xsl:apply-templates&gt;
                                        &lt;/xd:a&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                            &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                        &lt;/xsl:apply-templates&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xd:b&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="$wrapin-i"&gt;
                            &lt;xd:i&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="$wrapin-a"&gt;
                                        &lt;xd:a&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                            &lt;/xsl:apply-templates&gt;
                                        &lt;/xd:a&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                            &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                        &lt;/xsl:apply-templates&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xd:i&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="$wrapin-a"&gt;
                            &lt;xd:a&gt;
                                &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                    &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                &lt;/xsl:apply-templates&gt;
                            &lt;/xd:a&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xsl:otherwise&gt;
            &lt;/xsl:choose&gt;
        &lt;/xsl:for-each-group&gt;
    &lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;&lt;/codeblock&gt;
    &lt;xsl:template name="maintainers"&gt;
        &lt;xsl:for-each select="*[local-name()='maintainer']"&gt;
            &lt;xsl:variable name="is-empty" select="count(descendant-or-self::text()[string-length(normalize-space())&amp;gt;0])=0"/&gt;
            &lt;xsl:if test="not($is-empty)"&gt;
                &lt;xd:maintainer&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="count(child::*)=0"&gt;
                            &lt;xd:name&gt;
                                &lt;xsl:value-of select="."/&gt;
                            &lt;/xd:name&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:if test="child::*[local-name()='name']"&gt;
                                &lt;xd:name&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='name']"/&gt;
                                &lt;/xd:name&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='mailto']"&gt;
                                &lt;xd:mailto&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='mailto']"/&gt;
                                &lt;/xd:mailto&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='organization']"&gt;
                                &lt;xd:organization&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='organization']"/&gt;
                                &lt;/xd:organization&gt;
                            &lt;/xsl:if&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xd:maintainer&gt;
            &lt;/xsl:if&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;codeblock&gt;&lt;xsl:stylesheet version="2.0"&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Identity template.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template match="@*|node()"&gt;
        &lt;xsl:copy&gt;
            &lt;xsl:apply-templates select="@*|node()"/&gt;
        &lt;/xsl:copy&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Matches each xd:doc element.&lt;/xd:short&gt;&lt;xd:detail&gt;
        
        Determines what code is being documented and calls appropriate templates for: &lt;xd:ul&gt;
                &lt;xd:li&gt;short description (xd:short)&lt;/xd:li&gt;
                &lt;xd:li&gt;detailed description (xd:detail)&lt;/xd:li&gt;
                &lt;xd:li&gt;authors (xd:author)&lt;/xd:li&gt;
                &lt;xd:li&gt;contributors (xd:contributor)&lt;/xd:li&gt;
                &lt;xd:li&gt;maintainers (xd:maintainer)&lt;/xd:li&gt;
                &lt;xd:li&gt;copyright (xd:copyright)&lt;/xd:li&gt;
                &lt;xd:li&gt;version (xd:version)&lt;/xd:li&gt;
                &lt;xd:li&gt;code existed since version (xd:since)&lt;/xd:li&gt;
                &lt;xd:li&gt;see also (xd:see)&lt;/xd:li&gt;
                &lt;xd:li&gt;deprecated since version (xd:deprecated)&lt;/xd:li&gt;
                &lt;xd:li&gt;import statements (xd:import and xsl:import)&lt;/xd:li&gt;
                &lt;xd:li&gt;include statements (xd:include and xsl:include)&lt;/xd:li&gt;
                &lt;xd:li&gt;parameters (xd:param and xsl:param)&lt;/xd:li&gt;
                &lt;xd:li&gt;return values / output (xd:return)&lt;/xd:li&gt;
            &lt;/xd:ul&gt;
        
        
    &lt;/xd:detail&gt;&lt;xd:return&gt;The normalized xd:doc.&lt;/xd:return&gt;&lt;/xd:doc&gt;
    &lt;xsl:template match="xd:doc"&gt;
        &lt;xsl:copy&gt;
            &lt;xsl:variable name="target"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="@target"&gt;
                        &lt;xsl:value-of select="@target"/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="count(preceding-sibling::*)=0"&gt;
                        &lt;xsl:value-of select="'parent'"/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:value-of select="'following'"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:variable&gt;
            &lt;xsl:variable name="code" select="if ($target='parent') then parent::* else following-sibling::*[1]"/&gt;

            &lt;xsl:attribute name="target" select="$target"/&gt;

            &lt;xsl:call-template name="short"/&gt;
            &lt;xsl:call-template name="detail"/&gt;
            &lt;xsl:call-template name="authors"/&gt;
            &lt;xsl:call-template name="contributors"/&gt;
            &lt;xsl:call-template name="maintainers"/&gt;
            &lt;xsl:call-template name="copyright"/&gt;
            &lt;xsl:call-template name="version"/&gt;
            &lt;xsl:call-template name="since"/&gt;
            &lt;xsl:call-template name="see"/&gt;
            &lt;xsl:call-template name="deprecated"/&gt;
            &lt;xsl:call-template name="import"&gt;
                &lt;xsl:with-param name="code" select="$code"/&gt;
            &lt;/xsl:call-template&gt;
            &lt;xsl:call-template name="include"&gt;
                &lt;xsl:with-param name="code" select="$code"/&gt;
            &lt;/xsl:call-template&gt;
            &lt;xsl:call-template name="param"&gt;
                &lt;xsl:with-param name="code" select="$code"/&gt;
            &lt;/xsl:call-template&gt;
            &lt;xsl:call-template name="return"/&gt;
        &lt;/xsl:copy&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Determines the short description.&lt;/xd:short&gt;&lt;xd:detail&gt;
        
        
            &lt;xd:ul&gt;
                &lt;xd:li&gt;If there is no &amp;lt;xd:short/&amp;gt;-element present, but plain text is present as a
                    child of the &amp;lt;xd:doc/&amp;gt;element, then the first sentence from that text (up
                    until the first period (".") will be used as a short description.&lt;/xd:li&gt;
                &lt;xd:li&gt;Else; if there are multiple &amp;lt;xd:short/&amp;gt;-elements, each one of their
                    contents will be wrapped in separate &amp;lt;section/&amp;gt;s.&lt;/xd:li&gt;
                &lt;xd:li&gt;Else; use the one &amp;lt;xd:short/&amp;gt;-element that is present for the short
                    description.&lt;/xd:li&gt;
            &lt;/xd:ul&gt;
        
    &lt;/xd:detail&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="short"&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="count(child::*[local-name()='short'])&amp;gt;1"&gt;
                &lt;xd:short&gt;
                    &lt;xsl:for-each select="child::*[local-name()='short']"&gt;
                        &lt;xd:section&gt;
                            &lt;xsl:apply-templates mode="section"/&gt;
                        &lt;/xd:section&gt;
                    &lt;/xsl:for-each&gt;
                &lt;/xd:short&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="count(child::*[local-name()='short'])=1"&gt;
                &lt;xd:short&gt;
                    &lt;xsl:apply-templates select="child::*[local-name()='short']/node()" mode="section"/&gt;
                &lt;/xd:short&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="child::text()[string-length(normalize-space())&amp;gt;0]"&gt;
                &lt;xsl:variable name="short" select="replace(normalize-space(child::text()[1]),'^([^\.]+\.?)\s?.*$','$1')"/&gt;
                &lt;xd:short&gt;
                    &lt;xsl:value-of select="$short"/&gt;
                &lt;/xd:short&gt;
            &lt;/xsl:when&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Determines the detailed description.&lt;/xd:short&gt;&lt;xd:detail&gt;
        
        The detailed description will be put together based on any number of
            &amp;lt;xd:detail/&amp;gt;-elements, as well as any number of text nodes that are direct
            children of the &amp;lt;xd:doc/&amp;gt;-element. If the xd:short was extracted from the first
            text node, then the first sentence from that text node will be ignored. If there are
            multiple &amp;lt;xd:detail/&amp;gt; and text nodes, then each of them will be wrapped in
            &amp;lt;xd:section/&amp;gt;s.
    &lt;/xd:detail&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="detail"&gt;
        &lt;xsl:variable name="shortInFirstText" select="count(./*[local-name()='short'])=0"/&gt;
        &lt;xsl:variable name="detailCount" select="(if (matches(normalize-space(./text()[1]),'\.[^\.].')) then 1 else 0) + count(*[local-name()='detail' and (descendant-or-self::node()[self::text() and string-length(normalize-space())&amp;gt;0 or local-name()='pre' and not(ancestor::*[local-name()='pre'])])]) + count(./text()[not(position()=1) and string-length(normalize-space())&amp;gt;0])"/&gt;
        &lt;xsl:if test="$detailCount&amp;gt;0"&gt;
            &lt;xd:detail&gt;
                &lt;xsl:for-each select="*|text()"&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="self::text() and count(preceding-sibling::text()[string-length(normalize-space())&amp;gt;0])=0"&gt;
                            &lt;!-- first text --&gt;
                            &lt;xsl:choose&gt;
                                &lt;xsl:when test="$shortInFirstText"&gt;
                                    &lt;xsl:variable name="detail" select="replace(normalize-space(),'^[^\.]+.?\s?(.*)$','$1')"/&gt;
                                    &lt;xsl:choose&gt;
                                        &lt;xsl:when test="$detailCount&amp;gt;1"&gt;
                                            &lt;xd:section&gt;
                                                &lt;xsl:value-of select="$detail"/&gt;
                                            &lt;/xd:section&gt;
                                        &lt;/xsl:when&gt;
                                        &lt;xsl:otherwise&gt;
                                            &lt;xsl:value-of select="$detail"/&gt;
                                        &lt;/xsl:otherwise&gt;
                                    &lt;/xsl:choose&gt;
                                &lt;/xsl:when&gt;
                                &lt;xsl:otherwise&gt;
                                    &lt;xsl:choose&gt;
                                        &lt;xsl:when test="$detailCount&amp;gt;1"&gt;
                                            &lt;xd:section&gt;
                                                &lt;xsl:value-of select="."/&gt;
                                            &lt;/xd:section&gt;
                                        &lt;/xsl:when&gt;
                                        &lt;xsl:otherwise&gt;
                                            &lt;xsl:value-of select="."/&gt;
                                        &lt;/xsl:otherwise&gt;
                                    &lt;/xsl:choose&gt;
                                &lt;/xsl:otherwise&gt;
                            &lt;/xsl:choose&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="self::text()"&gt;
                            &lt;!-- non-first text --&gt;
                            &lt;xsl:choose&gt;
                                &lt;xsl:when test="$detailCount&amp;gt;1"&gt;
                                    &lt;xd:section&gt;
                                        &lt;xsl:value-of select="."/&gt;
                                    &lt;/xd:section&gt;
                                &lt;/xsl:when&gt;
                                &lt;xsl:otherwise&gt;
                                    &lt;xsl:value-of select="."/&gt;
                                &lt;/xsl:otherwise&gt;
                            &lt;/xsl:choose&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="local-name()='detail'"&gt;
                            &lt;!-- detail element --&gt;
                            &lt;xsl:choose&gt;
                                &lt;xsl:when test="$detailCount&amp;gt;1"&gt;
                                    &lt;xd:section&gt;
                                        &lt;xsl:apply-templates select="child::node()" mode="section"/&gt;
                                    &lt;/xd:section&gt;
                                &lt;/xsl:when&gt;
                                &lt;xsl:otherwise&gt;
                                    &lt;xsl:apply-templates select="child::node()" mode="section"/&gt;
                                &lt;/xsl:otherwise&gt;
                            &lt;/xsl:choose&gt;
                        &lt;/xsl:when&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xsl:for-each&gt;
            &lt;/xd:detail&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes the xd:author-elements.&lt;/xd:short&gt;&lt;xd:detail&gt;&amp;gt;xd:author/&amp;lt;s with no text are removed. &amp;lt;xd:author/&amp;gt;s with no child elements will have their text content wrapped in a &amp;lt;xd:name/&amp;gt; element. Children other than xd:name, xd:mailto and xd:organization are ignored.&lt;/xd:detail&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="authors" xml:id="authors"&gt;
        &lt;xsl:for-each select="*[local-name()='author']"&gt;
            &lt;xsl:variable name="is-empty" select="count(descendant-or-self::text()[string-length(normalize-space())&amp;gt;0])=0"/&gt;
            &lt;xsl:if test="not($is-empty)"&gt;
                &lt;xd:author&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="count(child::*)=0"&gt;
                            &lt;xd:name&gt;
                                &lt;xsl:value-of select="."/&gt;
                            &lt;/xd:name&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:if test="child::*[local-name()='name']"&gt;
                                &lt;xd:name&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='name']"/&gt;
                                &lt;/xd:name&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='mailto']"&gt;
                                &lt;xd:mailto&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='mailto']"/&gt;
                                &lt;/xd:mailto&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='organization']"&gt;
                                &lt;xd:organization&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='organization']"/&gt;
                                &lt;/xd:organization&gt;
                            &lt;/xsl:if&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xd:author&gt;
            &lt;/xsl:if&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;&amp;lt;xd:contributor/&amp;gt;s are normalized in the same way as &amp;lt;xd:author/&amp;gt;s&lt;/xd:short&gt;&lt;xd:see&gt;#authors&lt;/xd:see&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="contributors"&gt;
        &lt;xsl:for-each select="*[local-name()='contributor']"&gt;
            &lt;xsl:variable name="is-empty" select="count(descendant-or-self::text()[string-length(normalize-space())&amp;gt;0])=0"/&gt;
            &lt;xsl:if test="not($is-empty)"&gt;
                &lt;xd:contributor&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="count(child::*)=0"&gt;
                            &lt;xd:name&gt;
                                &lt;xsl:value-of select="."/&gt;
                            &lt;/xd:name&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:if test="child::*[local-name()='name']"&gt;
                                &lt;xd:name&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='name']"/&gt;
                                &lt;/xd:name&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='mailto']"&gt;
                                &lt;xd:mailto&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='mailto']"/&gt;
                                &lt;/xd:mailto&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='organization']"&gt;
                                &lt;xd:organization&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='organization']"/&gt;
                                &lt;/xd:organization&gt;
                            &lt;/xsl:if&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xd:contributor&gt;
            &lt;/xsl:if&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;&amp;lt;xd:maintainer/&amp;gt;s are normalized in the same way as &amp;lt;xd:author/&amp;gt;s&lt;/xd:short&gt;&lt;xd:see&gt;#authors&lt;/xd:see&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="maintainers"&gt;
        &lt;xsl:for-each select="*[local-name()='maintainer']"&gt;
            &lt;xsl:variable name="is-empty" select="count(descendant-or-self::text()[string-length(normalize-space())&amp;gt;0])=0"/&gt;
            &lt;xsl:if test="not($is-empty)"&gt;
                &lt;xd:maintainer&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="count(child::*)=0"&gt;
                            &lt;xd:name&gt;
                                &lt;xsl:value-of select="."/&gt;
                            &lt;/xd:name&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:if test="child::*[local-name()='name']"&gt;
                                &lt;xd:name&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='name']"/&gt;
                                &lt;/xd:name&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='mailto']"&gt;
                                &lt;xd:mailto&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='mailto']"/&gt;
                                &lt;/xd:mailto&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='organization']"&gt;
                                &lt;xd:organization&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='organization']"/&gt;
                                &lt;/xd:organization&gt;
                            &lt;/xsl:if&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xd:maintainer&gt;
            &lt;/xsl:if&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes the xd:copyright-element.&lt;/xd:short&gt;&lt;xd:detail&gt;&amp;gt;xd:copyright/&amp;lt;s with no text are removed. &amp;lt;xd:copyright/&amp;gt;s with no child elements will have their text content wrapped in a &amp;lt;xd:name/&amp;gt; element. Children other than xd:year, xd:name, xd:mailto and xd:organization are ignored.&lt;/xd:detail&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="copyright"&gt;
        &lt;xsl:for-each select="*[local-name()='copyright']"&gt;
            &lt;xsl:variable name="is-empty" select="count(descendant-or-self::text()[string-length(normalize-space())&amp;gt;0])=0"/&gt;
            &lt;xsl:if test="not($is-empty)"&gt;
                &lt;xd:copyright&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="count(child::*)=0"&gt;
                            &lt;xd:name&gt;
                                &lt;xsl:value-of select="."/&gt;
                            &lt;/xd:name&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:if test="child::*[local-name()='year']"&gt;
                                &lt;xd:year&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='year']"/&gt;
                                &lt;/xd:year&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='name']"&gt;
                                &lt;xd:name&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='name']"/&gt;
                                &lt;/xd:name&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='mailto']"&gt;
                                &lt;xd:mailto&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='mailto']"/&gt;
                                &lt;/xd:mailto&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='organization']"&gt;
                                &lt;xd:organization&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='organization']"/&gt;
                                &lt;/xd:organization&gt;
                            &lt;/xsl:if&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xd:copyright&gt;
            &lt;/xsl:if&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:version elements.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="version"&gt;
        &lt;xsl:if test="child::*[local-name()='version' and string-length(normalize-space(./text()))&amp;gt;0]"&gt;
            &lt;xd:version&gt;
                &lt;xsl:value-of select="child::*[local-name()='version' and string-length(normalize-space(./text()))&amp;gt;0]"/&gt;
            &lt;/xd:version&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:since elements.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="since"&gt;
        &lt;xsl:if test="child::*[local-name()='since' and string-length(normalize-space(./text()))&amp;gt;0]"&gt;
            &lt;xd:since&gt;
                &lt;xsl:value-of select="child::*[local-name()='since' and string-length(normalize-space(./text()))&amp;gt;0]"/&gt;
            &lt;/xd:since&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:see elements.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="see"&gt;
        &lt;xsl:if test="child::*[local-name()='see' and string-length(normalize-space(./text()))&amp;gt;0]"&gt;
            &lt;xd:see&gt;
                &lt;xsl:value-of select="child::*[local-name()='see' and string-length(normalize-space(./text()))&amp;gt;0]"/&gt;
            &lt;/xd:see&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:deprecated elements.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="deprecated"&gt;
        &lt;xsl:if test="child::*[local-name()='deprecated' and string-length(normalize-space(./text()))&amp;gt;0]"&gt;
            &lt;xd:deprecated&gt;
                &lt;xsl:value-of select="child::*[local-name()='deprecated' and string-length(normalize-space(./text()))&amp;gt;0]"/&gt;
            &lt;/xd:deprecated&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:import elements.&lt;/xd:short&gt;&lt;xd:detail&gt;Will create empty documentation for imports that are not documented, and removes documentation of imports that does not exist in the code.&lt;/xd:detail&gt;&lt;xd:param name="code"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="import"&gt;
        &lt;xsl:param name="code" required="yes"/&gt;
        &lt;xsl:variable name="doc" select="."/&gt;
        &lt;xsl:for-each select="$code/xsl:import"&gt;
            &lt;xsl:variable name="href" select="@href"/&gt;
            &lt;xd:import href="{@href}"&gt;
                &lt;xsl:if test="$doc/*[local-name()='import' and @href=$href]"&gt;
                    &lt;xsl:value-of select="$doc/*[local-name()='import' and @href=$href]"/&gt;
                &lt;/xsl:if&gt;
            &lt;/xd:import&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:include elements.&lt;/xd:short&gt;&lt;xd:detail&gt;Will create empty documentation for includes that are not documented, and removes documentation of includes that does not exist in the code.&lt;/xd:detail&gt;&lt;xd:param name="code"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="include"&gt;
        &lt;xsl:param name="code" required="yes"/&gt;
        &lt;xsl:variable name="doc" select="."/&gt;
        &lt;xsl:for-each select="$code/xsl:include"&gt;
            &lt;xsl:variable name="href" select="@href"/&gt;
            &lt;xd:include href="{@href}"&gt;
                &lt;xsl:if test="$doc/*[local-name()='include' and @href=$href]"&gt;
                    &lt;xsl:value-of select="$doc/*[local-name()='include' and @href=$href]"/&gt;
                &lt;/xsl:if&gt;
            &lt;/xd:include&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:import elements.&lt;/xd:short&gt;&lt;xd:detail&gt;Will create empty documentation for imports that are not documented, and removes documentation of imports that does not exist in the code.&lt;/xd:detail&gt;&lt;xd:param name="code"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="param"&gt;
        &lt;xsl:param name="code" required="yes"/&gt;
        &lt;xsl:variable name="doc" select="."/&gt;
        &lt;xsl:for-each select="*[local-name()='param']"&gt;
            &lt;xd:param&gt;
                &lt;xsl:apply-templates select="@*"/&gt;
                &lt;xsl:apply-templates mode="section" select="node()"/&gt;
            &lt;/xd:param&gt;
        &lt;/xsl:for-each&gt;
        &lt;xsl:for-each select="$code/xsl:param"&gt;
            &lt;xsl:variable name="name" select="@name"/&gt;
            &lt;xsl:if test="not($doc/*[local-name()='param' and @name=$name])"&gt;
                &lt;xd:param name="{@name}"/&gt;
            &lt;/xsl:if&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Describes the result of the code.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="return"&gt;
        &lt;xsl:variable name="is-empty" select="count(*[local-name()='return']/descendant-or-self::node()[self::text() and string-length(normalize-space())&amp;gt;0 or local-name()='pre'])=0"/&gt;
        &lt;xsl:if test="not($is-empty)"&gt;
            &lt;xd:return&gt;
                &lt;xsl:apply-templates mode="section" select="*[local-name()='return']/node()"/&gt;
            &lt;/xd:return&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Matches all elements when in "section"-mode.&lt;/xd:short&gt;&lt;xd:detail&gt;
        
        Checks all child elements and their descendants and wraps and handles as is
            appropriate. If a child or descendant is placed in a problematic position, then one of
            the unwrap*-templates are called to solve the problem. Otherwise, just make sure that
            the element is in the correct namespace and copy it.
    &lt;/xd:detail&gt;&lt;xd:param name="wrapin-p"/&gt;&lt;xd:param name="wrapin-ul"/&gt;&lt;xd:param name="wrapin-li"/&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template mode="section" match="@*|node()"&gt;
        &lt;xsl:param name="wrapin-p" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-ul" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-li" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:variable name="is-empty" select="count(descendant-or-self::node()[self::text() and string-length(normalize-space())&amp;gt;0 or local-name()='pre'])=0"/&gt;
        &lt;xsl:variable name="contains-section" select="count(descendant::*[local-name()='section'])&amp;gt;0"/&gt;
        &lt;xsl:variable name="contains-block" select="count(descendant::*[local-name()='ul' or local-name()='li' or local-name()='pre' or local-name()='p'])&amp;gt;0"/&gt;
        &lt;xsl:variable name="contains-block-non-li" select="count(descendant::*[local-name()='ul' or local-name()='pre' or local-name()='p'])&amp;gt;0"/&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="local-name()='section'"&gt;
                &lt;xd:section&gt;
                    &lt;xsl:apply-templates mode="section" select="@*|node()"/&gt;
                &lt;/xd:section&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='p'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$contains-section or $contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-p" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:p&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:p&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='pre'"&gt;
                &lt;xd:pre&gt;
                    &lt;xsl:copy-of select="@*|node()"/&gt;
                &lt;/xd:pre&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='ul'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-section"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$contains-block-non-li"&gt;
                        &lt;xd:section&gt;
                            &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                                &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                            &lt;/xsl:call-template&gt;
                        &lt;/xd:section&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="count(descendant::*[local-name()='li'])=0"&gt;
                        &lt;xsl:choose&gt;
                            &lt;xsl:when test="count(child::node()[self::* or self::text() and string-length(normalize-space())&amp;gt;0])&amp;gt;1"&gt;
                                &lt;xd:section&gt;
                                    &lt;xsl:apply-templates mode="section" select="@*|node()"&gt;
                                        &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                                        &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                                    &lt;/xsl:apply-templates&gt;
                                &lt;/xd:section&gt;
                            &lt;/xsl:when&gt;
                            &lt;xsl:otherwise&gt;
                                &lt;xsl:apply-templates mode="section" select="@*|node()"&gt;
                                    &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                                &lt;/xsl:apply-templates&gt;
                            &lt;/xsl:otherwise&gt;
                        &lt;/xsl:choose&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:ul&gt;
                            &lt;xsl:apply-templates mode="list" select="@*|node()"&gt;
                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:ul&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='li'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-section"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:ul&gt;
                            &lt;xd:li&gt;
                                &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                            &lt;/xd:li&gt;
                        &lt;/xd:ul&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='b'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-section"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-b" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-b" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:b&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:b&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='i'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-section"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-i" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-i" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:i&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:i&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='a'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-section"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-a" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-a-elem" select="." tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-a" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-a-elem" select="." tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:a&gt;
                            &lt;xsl:apply-templates select="@*"/&gt;
                            &lt;xsl:apply-templates mode="phrase" select="node()"/&gt;
                        &lt;/xd:a&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="self::*"&gt;
                        &lt;xsl:choose&gt;
                            &lt;xsl:when test="not(preceding-sibling::*) and not(following-sibling::*)"&gt;
                                &lt;xsl:apply-templates mode="section" select="@*|node()"/&gt;
                            &lt;/xsl:when&gt;
                            &lt;xsl:otherwise&gt;
                                &lt;xd:section&gt;
                                    &lt;xsl:apply-templates mode="section" select="@*|node()"/&gt;
                                &lt;/xd:section&gt;
                            &lt;/xsl:otherwise&gt;
                        &lt;/xsl:choose&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="self::text()"&gt;
                        &lt;xsl:copy/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="section" select="@*|node()"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Handles non-problematic lists.&lt;/xd:short&gt;&lt;xd:param name="wrapin-p"/&gt;&lt;xd:param name="wrapin-ul"/&gt;&lt;xd:param name="wrapin-li"/&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template mode="list" match="@*|node()"&gt;
        &lt;xsl:param name="wrapin-p" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-ul" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-li" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:variable name="is-empty" select="count(descendant-or-self::node()[self::text() and string-length(normalize-space())&amp;gt;0 or local-name()='pre'])=0"/&gt;
        &lt;xsl:variable name="contains-block" select="count(descendant::*[local-name()='ul' or local-name()='li' or local-name()='pre' or local-name()='p'])&amp;gt;0"/&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="local-name()='li'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$wrapin-ul"&gt;
                        &lt;xd:ul&gt;
                            &lt;xd:li&gt;
                                &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                            &lt;/xd:li&gt;
                        &lt;/xd:ul&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:li&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:li&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="self::text()"&gt;
                        &lt;xsl:copy/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="list" select="@*|node()"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Handles all elements when in "block" mode and applies fixes where needed.&lt;/xd:short&gt;&lt;xd:param name="wrapin-p"/&gt;&lt;xd:param name="wrapin-ul"/&gt;&lt;xd:param name="wrapin-li"/&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template mode="block" match="@*|node()"&gt;
        &lt;xsl:param name="wrapin-p" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-ul" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-li" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:variable name="element" select="."/&gt;
        &lt;xsl:variable name="is-empty" select="count(descendant-or-self::node()[self::* or self::text() and string-length(normalize-space())&amp;gt;0])=0"/&gt;
        &lt;xsl:variable name="contains-block" select="count(descendant::*[local-name()='ul' or local-name()='li' or local-name()='pre' or local-name()='p'])&amp;gt;0"/&gt;
        &lt;xsl:variable name="contains-block-non-li" select="count(descendant::*[local-name()='ul' or local-name()='pre' or local-name()='p'])&amp;gt;0"/&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="local-name()='p'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:p&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:p&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='pre'"&gt;
                &lt;xd:pre&gt;
                    &lt;xsl:copy-of select="@*|node()"/&gt;
                &lt;/xd:pre&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='ul'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block-non-li"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="count(descendant::*[local-name()='li' and string-length(normalize-space(descendant-or-self::text()))&amp;gt;0])=0"&gt;
                        &lt;xsl:apply-templates mode="block" select="@*|node()"/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:ul&gt;
                            &lt;xsl:apply-templates mode="list" select="@*|node()"&gt;
                                &lt;xsl:with-param name="wrapin-ul" select="false()"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:ul&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='li'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:ul&gt;
                            &lt;xd:li&gt;
                                &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                                    &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                &lt;/xsl:apply-templates&gt;
                            &lt;/xd:li&gt;
                        &lt;/xd:ul&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="not($contains-block) and $wrapin-p"&gt;
                &lt;xd:p&gt;
                    &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                        &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                        &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                        &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                    &lt;/xsl:apply-templates&gt;
                &lt;/xd:p&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="not($contains-block) and $wrapin-li"&gt;
                &lt;xd:ul&gt;
                    &lt;xd:li&gt;
                        &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                            &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xd:li&gt;
                &lt;/xd:ul&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='b'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-b" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:b&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:b&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='i'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-i" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:i&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:i&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='a'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-a" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-a-elem" select="$element" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:a&gt;
                            &lt;xsl:apply-templates mode="phrase" select="$element/@*"/&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:a&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="self::text()"&gt;
                        &lt;xsl:copy/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="block" select="@*|node()"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Phrases are matched with this template (mode="phrase") and handled appropriately.&lt;/xd:short&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template mode="phrase" match="@*|node()"&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="local-name()='b'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='b'])"&gt;
                        &lt;xd:b&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:b&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="$wrapin-b"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='b'])"&gt;
                        &lt;xd:b&gt;
                            &lt;xsl:apply-templates mode="phrase" select="."&gt;
                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:b&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="."&gt;
                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='i'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='i'])"&gt;
                        &lt;xd:i&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:i&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="$wrapin-i"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='i'])"&gt;
                        &lt;xd:i&gt;
                            &lt;xsl:apply-templates mode="phrase" select="."&gt;
                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:i&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="."&gt;
                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='a'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='a'])"&gt;
                        &lt;xd:a&gt;
                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                            &lt;xsl:apply-templates mode="phrase" select="node()"&gt;
                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:a&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="$wrapin-a"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='a'])"&gt;
                        &lt;xd:a&gt;
                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                            &lt;xsl:apply-templates mode="phrase" select="."&gt;
                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:a&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="."&gt;
                            &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="self::text()"&gt;
                        &lt;xsl:copy/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;This template unwraps problematic elements into sections.&lt;/xd:short&gt;&lt;xd:param name="wasWrapped"/&gt;&lt;xd:param name="wrapin-p"/&gt;&lt;xd:param name="wrapin-ul"/&gt;&lt;xd:param name="wrapin-li"/&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="unwrap-to-sections"&gt;
        &lt;xsl:param name="wasWrapped" select="false()"/&gt;
        &lt;xsl:param name="wrapin-p" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-ul" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-li" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:variable name="element" select="."/&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="not($wasWrapped) and count(child::node()[self::* or self::text() and string-length(normalize-space())&amp;gt;0])&amp;gt;1"&gt;
                &lt;xd:section&gt;
                    &lt;xsl:call-template name="unwrap-to-sections"&gt;
                        &lt;xsl:with-param name="wasWrapped" select="true()"/&gt;
                    &lt;/xsl:call-template&gt;
                &lt;/xd:section&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
                &lt;xsl:for-each-group select="child::node()[self::* or self::text() and string-length(normalize-space())&amp;gt;0]" group-adjacent="self::* and not(ancestor::*[local-name()='pre']) and (local-name()='section' or local-name()='ul' or local-name()='li' or local-name()='pre' or local-name()='p')"&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="current-grouping-key()"&gt;
                            &lt;xsl:choose&gt;
                                &lt;xsl:when test="count(current-group())&amp;gt;1 and last()&amp;gt;1"&gt;
                                    &lt;xd:section&gt;
                                        &lt;xsl:apply-templates mode="section" select="current-group()"&gt;
                                            &lt;xsl:with-param name="wrapin-p" tunnel="yes" select="if ($wrapin-p or local-name($element)='p') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-ul" tunnel="yes" select="if ($wrapin-ul or local-name($element)='ul') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-li" tunnel="yes" select="if ($wrapin-li or local-name($element)='li') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-b" tunnel="yes" select="if ($wrapin-b or local-name($element)='b') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-i" tunnel="yes" select="if ($wrapin-i or local-name($element)='i') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-a" tunnel="yes" select="if ($wrapin-a or local-name($element)='a') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-a-elem" tunnel="yes" select="if (not($wrapin-a) and local-name($element)='a') then $element else false()"/&gt;
                                        &lt;/xsl:apply-templates&gt;
                                    &lt;/xd:section&gt;
                                &lt;/xsl:when&gt;
                                &lt;xsl:otherwise&gt;
                                    &lt;xsl:apply-templates mode="section" select="current-group()"&gt;
                                        &lt;xsl:with-param name="wrapin-p" tunnel="yes" select="if ($wrapin-p or local-name($element)='p') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-ul" tunnel="yes" select="if ($wrapin-ul or local-name($element)='ul') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-li" tunnel="yes" select="if ($wrapin-li or local-name($element)='li') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-b" tunnel="yes" select="if ($wrapin-b or local-name($element)='b') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-i" tunnel="yes" select="if ($wrapin-i or local-name($element)='i') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-a" tunnel="yes" select="if ($wrapin-a or local-name($element)='a') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-a-elem" tunnel="yes" select="if (not($wrapin-a) and local-name($element)='a') then $element else false()"/&gt;
                                    &lt;/xsl:apply-templates&gt;
                                &lt;/xsl:otherwise&gt;
                            &lt;/xsl:choose&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:element name="xd:{local-name($element)}"&gt;
                                &lt;xsl:for-each select="$element/@*"&gt;
                                    &lt;xsl:attribute name="xd:{local-name()}" select="."/&gt;
                                &lt;/xsl:for-each&gt;
                                &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                    &lt;xsl:with-param name="wrapin-p" tunnel="yes" select="if ($wrapin-p or local-name($element)='p') then false() else $wrapin-p"/&gt;
                                    &lt;xsl:with-param name="wrapin-ul" tunnel="yes" select="if ($wrapin-ul or local-name($element)='ul') then false() else $wrapin-ul"/&gt;
                                    &lt;xsl:with-param name="wrapin-li" tunnel="yes" select="if ($wrapin-li or local-name($element)='li') then false() else $wrapin-li"/&gt;
                                    &lt;xsl:with-param name="wrapin-b" tunnel="yes" select="if ($wrapin-b or local-name($element)='b') then false() else $wrapin-b"/&gt;
                                    &lt;xsl:with-param name="wrapin-i" tunnel="yes" select="if ($wrapin-i or local-name($element)='i') then false() else $wrapin-i"/&gt;
                                    &lt;xsl:with-param name="wrapin-a" tunnel="yes" select="if ($wrapin-a or local-name($element)='a') then false() else $wrapin-a"/&gt;
                                &lt;/xsl:apply-templates&gt;
                            &lt;/xsl:element&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xsl:for-each-group&gt;
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;This template unwraps problematic elements into blocks.&lt;/xd:short&gt;&lt;xd:param name="wrapin-p"/&gt;&lt;xd:param name="wrapin-ul"/&gt;&lt;xd:param name="wrapin-li"/&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="unwrap-to-blocks"&gt;
        &lt;xsl:param name="wrapin-p" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-ul" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-li" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:variable name="element" select="."/&gt;
        &lt;xsl:for-each-group select="child::node()[self::* or self::text() and string-length(normalize-space())&amp;gt;0]" group-adjacent="count(descendant-or-self::*[local-name()='ul' or local-name()='li' or local-name()='pre' or local-name()='p'])&amp;gt;0"&gt;
            &lt;xsl:choose&gt;
                &lt;xsl:when test="current-grouping-key()"&gt;
                    &lt;xsl:for-each select="current-group()"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-p" select="$wrapin-p or local-name()='p' or local-name($element)='p'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="$wrapin-ul or local-name()='ul' or local-name($element)='ul'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="$wrapin-li or local-name()='li' or local-name($element)='li'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-b" select="$wrapin-b or local-name()='b' or local-name($element)='b'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-i" select="$wrapin-i or local-name()='i' or local-name($element)='i'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-a" select="$wrapin-a or local-name()='a' or local-name($element)='a'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-a-elem" select="if (local-name()='a') then . else (if (local-name($element)='a') then $element else $wrapin-a-elem)" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:for-each&gt;
                &lt;/xsl:when&gt;
                &lt;xsl:otherwise&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="$wrapin-p"&gt;
                            &lt;xd:p&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="$wrapin-b"&gt;
                                        &lt;xd:b&gt;
                                            &lt;xsl:choose&gt;
                                                &lt;xsl:when test="$wrapin-i"&gt;
                                                  &lt;xd:i&gt;
                                                  &lt;xsl:choose&gt;
                                                  &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                  &lt;/xsl:when&gt;
                                                  &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xsl:otherwise&gt;
                                                  &lt;/xsl:choose&gt;
                                                  &lt;/xd:i&gt;
                                                &lt;/xsl:when&gt;
                                                &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                &lt;/xsl:otherwise&gt;
                                            &lt;/xsl:choose&gt;
                                        &lt;/xd:b&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:when test="$wrapin-i"&gt;
                                        &lt;xd:i&gt;
                                            &lt;xsl:choose&gt;
                                                &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                &lt;/xsl:when&gt;
                                                &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                &lt;/xsl:otherwise&gt;
                                            &lt;/xsl:choose&gt;
                                        &lt;/xd:i&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:when test="$wrapin-a"&gt;
                                        &lt;xd:a&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                            &lt;/xsl:apply-templates&gt;
                                        &lt;/xd:a&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                            &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                        &lt;/xsl:apply-templates&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xd:p&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="$wrapin-li"&gt;
                            &lt;xd:ul&gt;
                                &lt;xd:li&gt;
                                    &lt;xsl:choose&gt;
                                        &lt;xsl:when test="$wrapin-b"&gt;
                                            &lt;xd:b&gt;
                                                &lt;xsl:choose&gt;
                                                  &lt;xsl:when test="$wrapin-i"&gt;
                                                  &lt;xd:i&gt;
                                                  &lt;xsl:choose&gt;
                                                  &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                  &lt;/xsl:when&gt;
                                                  &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xsl:otherwise&gt;
                                                  &lt;/xsl:choose&gt;
                                                  &lt;/xd:i&gt;
                                                  &lt;/xsl:when&gt;
                                                  &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xsl:otherwise&gt;
                                                &lt;/xsl:choose&gt;
                                            &lt;/xd:b&gt;
                                        &lt;/xsl:when&gt;
                                        &lt;xsl:when test="$wrapin-i"&gt;
                                            &lt;xd:i&gt;
                                                &lt;xsl:choose&gt;
                                                  &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                  &lt;/xsl:when&gt;
                                                  &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xsl:otherwise&gt;
                                                &lt;/xsl:choose&gt;
                                            &lt;/xd:i&gt;
                                        &lt;/xsl:when&gt;
                                        &lt;xsl:when test="$wrapin-a"&gt;
                                            &lt;xd:a&gt;
                                                &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                &lt;/xsl:apply-templates&gt;
                                            &lt;/xd:a&gt;
                                        &lt;/xsl:when&gt;
                                        &lt;xsl:otherwise&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                            &lt;/xsl:apply-templates&gt;
                                        &lt;/xsl:otherwise&gt;
                                    &lt;/xsl:choose&gt;
                                &lt;/xd:li&gt;
                            &lt;/xd:ul&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="$wrapin-ul"&gt;
                            &lt;xd:p&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="$wrapin-b"&gt;
                                        &lt;xd:b&gt;
                                            &lt;xsl:choose&gt;
                                                &lt;xsl:when test="$wrapin-i"&gt;
                                                  &lt;xd:i&gt;
                                                  &lt;xsl:choose&gt;
                                                  &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                  &lt;/xsl:when&gt;
                                                  &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xsl:otherwise&gt;
                                                  &lt;/xsl:choose&gt;
                                                  &lt;/xd:i&gt;
                                                &lt;/xsl:when&gt;
                                                &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                &lt;/xsl:otherwise&gt;
                                            &lt;/xsl:choose&gt;
                                        &lt;/xd:b&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:when test="$wrapin-i"&gt;
                                        &lt;xd:i&gt;
                                            &lt;xsl:choose&gt;
                                                &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                &lt;/xsl:when&gt;
                                                &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                &lt;/xsl:otherwise&gt;
                                            &lt;/xsl:choose&gt;
                                        &lt;/xd:i&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:when test="$wrapin-a"&gt;
                                        &lt;xd:a&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                            &lt;/xsl:apply-templates&gt;
                                        &lt;/xd:a&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                            &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                        &lt;/xsl:apply-templates&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xd:p&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="$wrapin-b"&gt;
                            &lt;xd:b&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="$wrapin-i"&gt;
                                        &lt;xd:i&gt;
                                            &lt;xsl:choose&gt;
                                                &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                &lt;/xsl:when&gt;
                                                &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                &lt;/xsl:otherwise&gt;
                                            &lt;/xsl:choose&gt;
                                        &lt;/xd:i&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:when test="$wrapin-a"&gt;
                                        &lt;xd:a&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                            &lt;/xsl:apply-templates&gt;
                                        &lt;/xd:a&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                            &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                        &lt;/xsl:apply-templates&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xd:b&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="$wrapin-i"&gt;
                            &lt;xd:i&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="$wrapin-a"&gt;
                                        &lt;xd:a&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                            &lt;/xsl:apply-templates&gt;
                                        &lt;/xd:a&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                            &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                        &lt;/xsl:apply-templates&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xd:i&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="$wrapin-a"&gt;
                            &lt;xd:a&gt;
                                &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                    &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                &lt;/xsl:apply-templates&gt;
                            &lt;/xd:a&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xsl:otherwise&gt;
            &lt;/xsl:choose&gt;
        &lt;/xsl:for-each-group&gt;
    &lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;&lt;/codeblock&gt;
    &lt;xsl:template name="copyright"&gt;
        &lt;xsl:for-each select="*[local-name()='copyright']"&gt;
            &lt;xsl:variable name="is-empty" select="count(descendant-or-self::text()[string-length(normalize-space())&amp;gt;0])=0"/&gt;
            &lt;xsl:if test="not($is-empty)"&gt;
                &lt;xd:copyright&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="count(child::*)=0"&gt;
                            &lt;xd:name&gt;
                                &lt;xsl:value-of select="."/&gt;
                            &lt;/xd:name&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:if test="child::*[local-name()='year']"&gt;
                                &lt;xd:year&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='year']"/&gt;
                                &lt;/xd:year&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='name']"&gt;
                                &lt;xd:name&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='name']"/&gt;
                                &lt;/xd:name&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='mailto']"&gt;
                                &lt;xd:mailto&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='mailto']"/&gt;
                                &lt;/xd:mailto&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='organization']"&gt;
                                &lt;xd:organization&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='organization']"/&gt;
                                &lt;/xd:organization&gt;
                            &lt;/xsl:if&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xd:copyright&gt;
            &lt;/xsl:if&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;codeblock&gt;&lt;xsl:stylesheet version="2.0"&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Identity template.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template match="@*|node()"&gt;
        &lt;xsl:copy&gt;
            &lt;xsl:apply-templates select="@*|node()"/&gt;
        &lt;/xsl:copy&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Matches each xd:doc element.&lt;/xd:short&gt;&lt;xd:detail&gt;
        
        Determines what code is being documented and calls appropriate templates for: &lt;xd:ul&gt;
                &lt;xd:li&gt;short description (xd:short)&lt;/xd:li&gt;
                &lt;xd:li&gt;detailed description (xd:detail)&lt;/xd:li&gt;
                &lt;xd:li&gt;authors (xd:author)&lt;/xd:li&gt;
                &lt;xd:li&gt;contributors (xd:contributor)&lt;/xd:li&gt;
                &lt;xd:li&gt;maintainers (xd:maintainer)&lt;/xd:li&gt;
                &lt;xd:li&gt;copyright (xd:copyright)&lt;/xd:li&gt;
                &lt;xd:li&gt;version (xd:version)&lt;/xd:li&gt;
                &lt;xd:li&gt;code existed since version (xd:since)&lt;/xd:li&gt;
                &lt;xd:li&gt;see also (xd:see)&lt;/xd:li&gt;
                &lt;xd:li&gt;deprecated since version (xd:deprecated)&lt;/xd:li&gt;
                &lt;xd:li&gt;import statements (xd:import and xsl:import)&lt;/xd:li&gt;
                &lt;xd:li&gt;include statements (xd:include and xsl:include)&lt;/xd:li&gt;
                &lt;xd:li&gt;parameters (xd:param and xsl:param)&lt;/xd:li&gt;
                &lt;xd:li&gt;return values / output (xd:return)&lt;/xd:li&gt;
            &lt;/xd:ul&gt;
        
        
    &lt;/xd:detail&gt;&lt;xd:return&gt;The normalized xd:doc.&lt;/xd:return&gt;&lt;/xd:doc&gt;
    &lt;xsl:template match="xd:doc"&gt;
        &lt;xsl:copy&gt;
            &lt;xsl:variable name="target"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="@target"&gt;
                        &lt;xsl:value-of select="@target"/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="count(preceding-sibling::*)=0"&gt;
                        &lt;xsl:value-of select="'parent'"/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:value-of select="'following'"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:variable&gt;
            &lt;xsl:variable name="code" select="if ($target='parent') then parent::* else following-sibling::*[1]"/&gt;

            &lt;xsl:attribute name="target" select="$target"/&gt;

            &lt;xsl:call-template name="short"/&gt;
            &lt;xsl:call-template name="detail"/&gt;
            &lt;xsl:call-template name="authors"/&gt;
            &lt;xsl:call-template name="contributors"/&gt;
            &lt;xsl:call-template name="maintainers"/&gt;
            &lt;xsl:call-template name="copyright"/&gt;
            &lt;xsl:call-template name="version"/&gt;
            &lt;xsl:call-template name="since"/&gt;
            &lt;xsl:call-template name="see"/&gt;
            &lt;xsl:call-template name="deprecated"/&gt;
            &lt;xsl:call-template name="import"&gt;
                &lt;xsl:with-param name="code" select="$code"/&gt;
            &lt;/xsl:call-template&gt;
            &lt;xsl:call-template name="include"&gt;
                &lt;xsl:with-param name="code" select="$code"/&gt;
            &lt;/xsl:call-template&gt;
            &lt;xsl:call-template name="param"&gt;
                &lt;xsl:with-param name="code" select="$code"/&gt;
            &lt;/xsl:call-template&gt;
            &lt;xsl:call-template name="return"/&gt;
        &lt;/xsl:copy&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Determines the short description.&lt;/xd:short&gt;&lt;xd:detail&gt;
        
        
            &lt;xd:ul&gt;
                &lt;xd:li&gt;If there is no &amp;lt;xd:short/&amp;gt;-element present, but plain text is present as a
                    child of the &amp;lt;xd:doc/&amp;gt;element, then the first sentence from that text (up
                    until the first period (".") will be used as a short description.&lt;/xd:li&gt;
                &lt;xd:li&gt;Else; if there are multiple &amp;lt;xd:short/&amp;gt;-elements, each one of their
                    contents will be wrapped in separate &amp;lt;section/&amp;gt;s.&lt;/xd:li&gt;
                &lt;xd:li&gt;Else; use the one &amp;lt;xd:short/&amp;gt;-element that is present for the short
                    description.&lt;/xd:li&gt;
            &lt;/xd:ul&gt;
        
    &lt;/xd:detail&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="short"&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="count(child::*[local-name()='short'])&amp;gt;1"&gt;
                &lt;xd:short&gt;
                    &lt;xsl:for-each select="child::*[local-name()='short']"&gt;
                        &lt;xd:section&gt;
                            &lt;xsl:apply-templates mode="section"/&gt;
                        &lt;/xd:section&gt;
                    &lt;/xsl:for-each&gt;
                &lt;/xd:short&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="count(child::*[local-name()='short'])=1"&gt;
                &lt;xd:short&gt;
                    &lt;xsl:apply-templates select="child::*[local-name()='short']/node()" mode="section"/&gt;
                &lt;/xd:short&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="child::text()[string-length(normalize-space())&amp;gt;0]"&gt;
                &lt;xsl:variable name="short" select="replace(normalize-space(child::text()[1]),'^([^\.]+\.?)\s?.*$','$1')"/&gt;
                &lt;xd:short&gt;
                    &lt;xsl:value-of select="$short"/&gt;
                &lt;/xd:short&gt;
            &lt;/xsl:when&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Determines the detailed description.&lt;/xd:short&gt;&lt;xd:detail&gt;
        
        The detailed description will be put together based on any number of
            &amp;lt;xd:detail/&amp;gt;-elements, as well as any number of text nodes that are direct
            children of the &amp;lt;xd:doc/&amp;gt;-element. If the xd:short was extracted from the first
            text node, then the first sentence from that text node will be ignored. If there are
            multiple &amp;lt;xd:detail/&amp;gt; and text nodes, then each of them will be wrapped in
            &amp;lt;xd:section/&amp;gt;s.
    &lt;/xd:detail&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="detail"&gt;
        &lt;xsl:variable name="shortInFirstText" select="count(./*[local-name()='short'])=0"/&gt;
        &lt;xsl:variable name="detailCount" select="(if (matches(normalize-space(./text()[1]),'\.[^\.].')) then 1 else 0) + count(*[local-name()='detail' and (descendant-or-self::node()[self::text() and string-length(normalize-space())&amp;gt;0 or local-name()='pre' and not(ancestor::*[local-name()='pre'])])]) + count(./text()[not(position()=1) and string-length(normalize-space())&amp;gt;0])"/&gt;
        &lt;xsl:if test="$detailCount&amp;gt;0"&gt;
            &lt;xd:detail&gt;
                &lt;xsl:for-each select="*|text()"&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="self::text() and count(preceding-sibling::text()[string-length(normalize-space())&amp;gt;0])=0"&gt;
                            &lt;!-- first text --&gt;
                            &lt;xsl:choose&gt;
                                &lt;xsl:when test="$shortInFirstText"&gt;
                                    &lt;xsl:variable name="detail" select="replace(normalize-space(),'^[^\.]+.?\s?(.*)$','$1')"/&gt;
                                    &lt;xsl:choose&gt;
                                        &lt;xsl:when test="$detailCount&amp;gt;1"&gt;
                                            &lt;xd:section&gt;
                                                &lt;xsl:value-of select="$detail"/&gt;
                                            &lt;/xd:section&gt;
                                        &lt;/xsl:when&gt;
                                        &lt;xsl:otherwise&gt;
                                            &lt;xsl:value-of select="$detail"/&gt;
                                        &lt;/xsl:otherwise&gt;
                                    &lt;/xsl:choose&gt;
                                &lt;/xsl:when&gt;
                                &lt;xsl:otherwise&gt;
                                    &lt;xsl:choose&gt;
                                        &lt;xsl:when test="$detailCount&amp;gt;1"&gt;
                                            &lt;xd:section&gt;
                                                &lt;xsl:value-of select="."/&gt;
                                            &lt;/xd:section&gt;
                                        &lt;/xsl:when&gt;
                                        &lt;xsl:otherwise&gt;
                                            &lt;xsl:value-of select="."/&gt;
                                        &lt;/xsl:otherwise&gt;
                                    &lt;/xsl:choose&gt;
                                &lt;/xsl:otherwise&gt;
                            &lt;/xsl:choose&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="self::text()"&gt;
                            &lt;!-- non-first text --&gt;
                            &lt;xsl:choose&gt;
                                &lt;xsl:when test="$detailCount&amp;gt;1"&gt;
                                    &lt;xd:section&gt;
                                        &lt;xsl:value-of select="."/&gt;
                                    &lt;/xd:section&gt;
                                &lt;/xsl:when&gt;
                                &lt;xsl:otherwise&gt;
                                    &lt;xsl:value-of select="."/&gt;
                                &lt;/xsl:otherwise&gt;
                            &lt;/xsl:choose&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="local-name()='detail'"&gt;
                            &lt;!-- detail element --&gt;
                            &lt;xsl:choose&gt;
                                &lt;xsl:when test="$detailCount&amp;gt;1"&gt;
                                    &lt;xd:section&gt;
                                        &lt;xsl:apply-templates select="child::node()" mode="section"/&gt;
                                    &lt;/xd:section&gt;
                                &lt;/xsl:when&gt;
                                &lt;xsl:otherwise&gt;
                                    &lt;xsl:apply-templates select="child::node()" mode="section"/&gt;
                                &lt;/xsl:otherwise&gt;
                            &lt;/xsl:choose&gt;
                        &lt;/xsl:when&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xsl:for-each&gt;
            &lt;/xd:detail&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes the xd:author-elements.&lt;/xd:short&gt;&lt;xd:detail&gt;&amp;gt;xd:author/&amp;lt;s with no text are removed. &amp;lt;xd:author/&amp;gt;s with no child elements will have their text content wrapped in a &amp;lt;xd:name/&amp;gt; element. Children other than xd:name, xd:mailto and xd:organization are ignored.&lt;/xd:detail&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="authors" xml:id="authors"&gt;
        &lt;xsl:for-each select="*[local-name()='author']"&gt;
            &lt;xsl:variable name="is-empty" select="count(descendant-or-self::text()[string-length(normalize-space())&amp;gt;0])=0"/&gt;
            &lt;xsl:if test="not($is-empty)"&gt;
                &lt;xd:author&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="count(child::*)=0"&gt;
                            &lt;xd:name&gt;
                                &lt;xsl:value-of select="."/&gt;
                            &lt;/xd:name&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:if test="child::*[local-name()='name']"&gt;
                                &lt;xd:name&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='name']"/&gt;
                                &lt;/xd:name&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='mailto']"&gt;
                                &lt;xd:mailto&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='mailto']"/&gt;
                                &lt;/xd:mailto&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='organization']"&gt;
                                &lt;xd:organization&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='organization']"/&gt;
                                &lt;/xd:organization&gt;
                            &lt;/xsl:if&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xd:author&gt;
            &lt;/xsl:if&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;&amp;lt;xd:contributor/&amp;gt;s are normalized in the same way as &amp;lt;xd:author/&amp;gt;s&lt;/xd:short&gt;&lt;xd:see&gt;#authors&lt;/xd:see&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="contributors"&gt;
        &lt;xsl:for-each select="*[local-name()='contributor']"&gt;
            &lt;xsl:variable name="is-empty" select="count(descendant-or-self::text()[string-length(normalize-space())&amp;gt;0])=0"/&gt;
            &lt;xsl:if test="not($is-empty)"&gt;
                &lt;xd:contributor&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="count(child::*)=0"&gt;
                            &lt;xd:name&gt;
                                &lt;xsl:value-of select="."/&gt;
                            &lt;/xd:name&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:if test="child::*[local-name()='name']"&gt;
                                &lt;xd:name&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='name']"/&gt;
                                &lt;/xd:name&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='mailto']"&gt;
                                &lt;xd:mailto&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='mailto']"/&gt;
                                &lt;/xd:mailto&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='organization']"&gt;
                                &lt;xd:organization&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='organization']"/&gt;
                                &lt;/xd:organization&gt;
                            &lt;/xsl:if&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xd:contributor&gt;
            &lt;/xsl:if&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;&amp;lt;xd:maintainer/&amp;gt;s are normalized in the same way as &amp;lt;xd:author/&amp;gt;s&lt;/xd:short&gt;&lt;xd:see&gt;#authors&lt;/xd:see&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="maintainers"&gt;
        &lt;xsl:for-each select="*[local-name()='maintainer']"&gt;
            &lt;xsl:variable name="is-empty" select="count(descendant-or-self::text()[string-length(normalize-space())&amp;gt;0])=0"/&gt;
            &lt;xsl:if test="not($is-empty)"&gt;
                &lt;xd:maintainer&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="count(child::*)=0"&gt;
                            &lt;xd:name&gt;
                                &lt;xsl:value-of select="."/&gt;
                            &lt;/xd:name&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:if test="child::*[local-name()='name']"&gt;
                                &lt;xd:name&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='name']"/&gt;
                                &lt;/xd:name&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='mailto']"&gt;
                                &lt;xd:mailto&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='mailto']"/&gt;
                                &lt;/xd:mailto&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='organization']"&gt;
                                &lt;xd:organization&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='organization']"/&gt;
                                &lt;/xd:organization&gt;
                            &lt;/xsl:if&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xd:maintainer&gt;
            &lt;/xsl:if&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes the xd:copyright-element.&lt;/xd:short&gt;&lt;xd:detail&gt;&amp;gt;xd:copyright/&amp;lt;s with no text are removed. &amp;lt;xd:copyright/&amp;gt;s with no child elements will have their text content wrapped in a &amp;lt;xd:name/&amp;gt; element. Children other than xd:year, xd:name, xd:mailto and xd:organization are ignored.&lt;/xd:detail&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="copyright"&gt;
        &lt;xsl:for-each select="*[local-name()='copyright']"&gt;
            &lt;xsl:variable name="is-empty" select="count(descendant-or-self::text()[string-length(normalize-space())&amp;gt;0])=0"/&gt;
            &lt;xsl:if test="not($is-empty)"&gt;
                &lt;xd:copyright&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="count(child::*)=0"&gt;
                            &lt;xd:name&gt;
                                &lt;xsl:value-of select="."/&gt;
                            &lt;/xd:name&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:if test="child::*[local-name()='year']"&gt;
                                &lt;xd:year&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='year']"/&gt;
                                &lt;/xd:year&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='name']"&gt;
                                &lt;xd:name&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='name']"/&gt;
                                &lt;/xd:name&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='mailto']"&gt;
                                &lt;xd:mailto&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='mailto']"/&gt;
                                &lt;/xd:mailto&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='organization']"&gt;
                                &lt;xd:organization&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='organization']"/&gt;
                                &lt;/xd:organization&gt;
                            &lt;/xsl:if&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xd:copyright&gt;
            &lt;/xsl:if&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:version elements.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="version"&gt;
        &lt;xsl:if test="child::*[local-name()='version' and string-length(normalize-space(./text()))&amp;gt;0]"&gt;
            &lt;xd:version&gt;
                &lt;xsl:value-of select="child::*[local-name()='version' and string-length(normalize-space(./text()))&amp;gt;0]"/&gt;
            &lt;/xd:version&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:since elements.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="since"&gt;
        &lt;xsl:if test="child::*[local-name()='since' and string-length(normalize-space(./text()))&amp;gt;0]"&gt;
            &lt;xd:since&gt;
                &lt;xsl:value-of select="child::*[local-name()='since' and string-length(normalize-space(./text()))&amp;gt;0]"/&gt;
            &lt;/xd:since&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:see elements.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="see"&gt;
        &lt;xsl:if test="child::*[local-name()='see' and string-length(normalize-space(./text()))&amp;gt;0]"&gt;
            &lt;xd:see&gt;
                &lt;xsl:value-of select="child::*[local-name()='see' and string-length(normalize-space(./text()))&amp;gt;0]"/&gt;
            &lt;/xd:see&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:deprecated elements.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="deprecated"&gt;
        &lt;xsl:if test="child::*[local-name()='deprecated' and string-length(normalize-space(./text()))&amp;gt;0]"&gt;
            &lt;xd:deprecated&gt;
                &lt;xsl:value-of select="child::*[local-name()='deprecated' and string-length(normalize-space(./text()))&amp;gt;0]"/&gt;
            &lt;/xd:deprecated&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:import elements.&lt;/xd:short&gt;&lt;xd:detail&gt;Will create empty documentation for imports that are not documented, and removes documentation of imports that does not exist in the code.&lt;/xd:detail&gt;&lt;xd:param name="code"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="import"&gt;
        &lt;xsl:param name="code" required="yes"/&gt;
        &lt;xsl:variable name="doc" select="."/&gt;
        &lt;xsl:for-each select="$code/xsl:import"&gt;
            &lt;xsl:variable name="href" select="@href"/&gt;
            &lt;xd:import href="{@href}"&gt;
                &lt;xsl:if test="$doc/*[local-name()='import' and @href=$href]"&gt;
                    &lt;xsl:value-of select="$doc/*[local-name()='import' and @href=$href]"/&gt;
                &lt;/xsl:if&gt;
            &lt;/xd:import&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:include elements.&lt;/xd:short&gt;&lt;xd:detail&gt;Will create empty documentation for includes that are not documented, and removes documentation of includes that does not exist in the code.&lt;/xd:detail&gt;&lt;xd:param name="code"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="include"&gt;
        &lt;xsl:param name="code" required="yes"/&gt;
        &lt;xsl:variable name="doc" select="."/&gt;
        &lt;xsl:for-each select="$code/xsl:include"&gt;
            &lt;xsl:variable name="href" select="@href"/&gt;
            &lt;xd:include href="{@href}"&gt;
                &lt;xsl:if test="$doc/*[local-name()='include' and @href=$href]"&gt;
                    &lt;xsl:value-of select="$doc/*[local-name()='include' and @href=$href]"/&gt;
                &lt;/xsl:if&gt;
            &lt;/xd:include&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:import elements.&lt;/xd:short&gt;&lt;xd:detail&gt;Will create empty documentation for imports that are not documented, and removes documentation of imports that does not exist in the code.&lt;/xd:detail&gt;&lt;xd:param name="code"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="param"&gt;
        &lt;xsl:param name="code" required="yes"/&gt;
        &lt;xsl:variable name="doc" select="."/&gt;
        &lt;xsl:for-each select="*[local-name()='param']"&gt;
            &lt;xd:param&gt;
                &lt;xsl:apply-templates select="@*"/&gt;
                &lt;xsl:apply-templates mode="section" select="node()"/&gt;
            &lt;/xd:param&gt;
        &lt;/xsl:for-each&gt;
        &lt;xsl:for-each select="$code/xsl:param"&gt;
            &lt;xsl:variable name="name" select="@name"/&gt;
            &lt;xsl:if test="not($doc/*[local-name()='param' and @name=$name])"&gt;
                &lt;xd:param name="{@name}"/&gt;
            &lt;/xsl:if&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Describes the result of the code.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="return"&gt;
        &lt;xsl:variable name="is-empty" select="count(*[local-name()='return']/descendant-or-self::node()[self::text() and string-length(normalize-space())&amp;gt;0 or local-name()='pre'])=0"/&gt;
        &lt;xsl:if test="not($is-empty)"&gt;
            &lt;xd:return&gt;
                &lt;xsl:apply-templates mode="section" select="*[local-name()='return']/node()"/&gt;
            &lt;/xd:return&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Matches all elements when in "section"-mode.&lt;/xd:short&gt;&lt;xd:detail&gt;
        
        Checks all child elements and their descendants and wraps and handles as is
            appropriate. If a child or descendant is placed in a problematic position, then one of
            the unwrap*-templates are called to solve the problem. Otherwise, just make sure that
            the element is in the correct namespace and copy it.
    &lt;/xd:detail&gt;&lt;xd:param name="wrapin-p"/&gt;&lt;xd:param name="wrapin-ul"/&gt;&lt;xd:param name="wrapin-li"/&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template mode="section" match="@*|node()"&gt;
        &lt;xsl:param name="wrapin-p" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-ul" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-li" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:variable name="is-empty" select="count(descendant-or-self::node()[self::text() and string-length(normalize-space())&amp;gt;0 or local-name()='pre'])=0"/&gt;
        &lt;xsl:variable name="contains-section" select="count(descendant::*[local-name()='section'])&amp;gt;0"/&gt;
        &lt;xsl:variable name="contains-block" select="count(descendant::*[local-name()='ul' or local-name()='li' or local-name()='pre' or local-name()='p'])&amp;gt;0"/&gt;
        &lt;xsl:variable name="contains-block-non-li" select="count(descendant::*[local-name()='ul' or local-name()='pre' or local-name()='p'])&amp;gt;0"/&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="local-name()='section'"&gt;
                &lt;xd:section&gt;
                    &lt;xsl:apply-templates mode="section" select="@*|node()"/&gt;
                &lt;/xd:section&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='p'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$contains-section or $contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-p" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:p&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:p&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='pre'"&gt;
                &lt;xd:pre&gt;
                    &lt;xsl:copy-of select="@*|node()"/&gt;
                &lt;/xd:pre&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='ul'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-section"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$contains-block-non-li"&gt;
                        &lt;xd:section&gt;
                            &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                                &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                            &lt;/xsl:call-template&gt;
                        &lt;/xd:section&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="count(descendant::*[local-name()='li'])=0"&gt;
                        &lt;xsl:choose&gt;
                            &lt;xsl:when test="count(child::node()[self::* or self::text() and string-length(normalize-space())&amp;gt;0])&amp;gt;1"&gt;
                                &lt;xd:section&gt;
                                    &lt;xsl:apply-templates mode="section" select="@*|node()"&gt;
                                        &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                                        &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                                    &lt;/xsl:apply-templates&gt;
                                &lt;/xd:section&gt;
                            &lt;/xsl:when&gt;
                            &lt;xsl:otherwise&gt;
                                &lt;xsl:apply-templates mode="section" select="@*|node()"&gt;
                                    &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                                &lt;/xsl:apply-templates&gt;
                            &lt;/xsl:otherwise&gt;
                        &lt;/xsl:choose&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:ul&gt;
                            &lt;xsl:apply-templates mode="list" select="@*|node()"&gt;
                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:ul&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='li'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-section"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:ul&gt;
                            &lt;xd:li&gt;
                                &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                            &lt;/xd:li&gt;
                        &lt;/xd:ul&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='b'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-section"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-b" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-b" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:b&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:b&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='i'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-section"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-i" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-i" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:i&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:i&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='a'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-section"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-a" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-a-elem" select="." tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-a" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-a-elem" select="." tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:a&gt;
                            &lt;xsl:apply-templates select="@*"/&gt;
                            &lt;xsl:apply-templates mode="phrase" select="node()"/&gt;
                        &lt;/xd:a&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="self::*"&gt;
                        &lt;xsl:choose&gt;
                            &lt;xsl:when test="not(preceding-sibling::*) and not(following-sibling::*)"&gt;
                                &lt;xsl:apply-templates mode="section" select="@*|node()"/&gt;
                            &lt;/xsl:when&gt;
                            &lt;xsl:otherwise&gt;
                                &lt;xd:section&gt;
                                    &lt;xsl:apply-templates mode="section" select="@*|node()"/&gt;
                                &lt;/xd:section&gt;
                            &lt;/xsl:otherwise&gt;
                        &lt;/xsl:choose&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="self::text()"&gt;
                        &lt;xsl:copy/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="section" select="@*|node()"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Handles non-problematic lists.&lt;/xd:short&gt;&lt;xd:param name="wrapin-p"/&gt;&lt;xd:param name="wrapin-ul"/&gt;&lt;xd:param name="wrapin-li"/&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template mode="list" match="@*|node()"&gt;
        &lt;xsl:param name="wrapin-p" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-ul" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-li" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:variable name="is-empty" select="count(descendant-or-self::node()[self::text() and string-length(normalize-space())&amp;gt;0 or local-name()='pre'])=0"/&gt;
        &lt;xsl:variable name="contains-block" select="count(descendant::*[local-name()='ul' or local-name()='li' or local-name()='pre' or local-name()='p'])&amp;gt;0"/&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="local-name()='li'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$wrapin-ul"&gt;
                        &lt;xd:ul&gt;
                            &lt;xd:li&gt;
                                &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                            &lt;/xd:li&gt;
                        &lt;/xd:ul&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:li&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:li&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="self::text()"&gt;
                        &lt;xsl:copy/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="list" select="@*|node()"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Handles all elements when in "block" mode and applies fixes where needed.&lt;/xd:short&gt;&lt;xd:param name="wrapin-p"/&gt;&lt;xd:param name="wrapin-ul"/&gt;&lt;xd:param name="wrapin-li"/&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template mode="block" match="@*|node()"&gt;
        &lt;xsl:param name="wrapin-p" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-ul" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-li" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:variable name="element" select="."/&gt;
        &lt;xsl:variable name="is-empty" select="count(descendant-or-self::node()[self::* or self::text() and string-length(normalize-space())&amp;gt;0])=0"/&gt;
        &lt;xsl:variable name="contains-block" select="count(descendant::*[local-name()='ul' or local-name()='li' or local-name()='pre' or local-name()='p'])&amp;gt;0"/&gt;
        &lt;xsl:variable name="contains-block-non-li" select="count(descendant::*[local-name()='ul' or local-name()='pre' or local-name()='p'])&amp;gt;0"/&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="local-name()='p'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:p&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:p&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='pre'"&gt;
                &lt;xd:pre&gt;
                    &lt;xsl:copy-of select="@*|node()"/&gt;
                &lt;/xd:pre&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='ul'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block-non-li"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="count(descendant::*[local-name()='li' and string-length(normalize-space(descendant-or-self::text()))&amp;gt;0])=0"&gt;
                        &lt;xsl:apply-templates mode="block" select="@*|node()"/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:ul&gt;
                            &lt;xsl:apply-templates mode="list" select="@*|node()"&gt;
                                &lt;xsl:with-param name="wrapin-ul" select="false()"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:ul&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='li'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:ul&gt;
                            &lt;xd:li&gt;
                                &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                                    &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                &lt;/xsl:apply-templates&gt;
                            &lt;/xd:li&gt;
                        &lt;/xd:ul&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="not($contains-block) and $wrapin-p"&gt;
                &lt;xd:p&gt;
                    &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                        &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                        &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                        &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                    &lt;/xsl:apply-templates&gt;
                &lt;/xd:p&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="not($contains-block) and $wrapin-li"&gt;
                &lt;xd:ul&gt;
                    &lt;xd:li&gt;
                        &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                            &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xd:li&gt;
                &lt;/xd:ul&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='b'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-b" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:b&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:b&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='i'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-i" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:i&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:i&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='a'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-a" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-a-elem" select="$element" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:a&gt;
                            &lt;xsl:apply-templates mode="phrase" select="$element/@*"/&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:a&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="self::text()"&gt;
                        &lt;xsl:copy/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="block" select="@*|node()"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Phrases are matched with this template (mode="phrase") and handled appropriately.&lt;/xd:short&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template mode="phrase" match="@*|node()"&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="local-name()='b'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='b'])"&gt;
                        &lt;xd:b&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:b&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="$wrapin-b"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='b'])"&gt;
                        &lt;xd:b&gt;
                            &lt;xsl:apply-templates mode="phrase" select="."&gt;
                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:b&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="."&gt;
                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='i'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='i'])"&gt;
                        &lt;xd:i&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:i&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="$wrapin-i"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='i'])"&gt;
                        &lt;xd:i&gt;
                            &lt;xsl:apply-templates mode="phrase" select="."&gt;
                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:i&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="."&gt;
                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='a'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='a'])"&gt;
                        &lt;xd:a&gt;
                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                            &lt;xsl:apply-templates mode="phrase" select="node()"&gt;
                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:a&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="$wrapin-a"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='a'])"&gt;
                        &lt;xd:a&gt;
                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                            &lt;xsl:apply-templates mode="phrase" select="."&gt;
                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:a&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="."&gt;
                            &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="self::text()"&gt;
                        &lt;xsl:copy/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;This template unwraps problematic elements into sections.&lt;/xd:short&gt;&lt;xd:param name="wasWrapped"/&gt;&lt;xd:param name="wrapin-p"/&gt;&lt;xd:param name="wrapin-ul"/&gt;&lt;xd:param name="wrapin-li"/&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="unwrap-to-sections"&gt;
        &lt;xsl:param name="wasWrapped" select="false()"/&gt;
        &lt;xsl:param name="wrapin-p" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-ul" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-li" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:variable name="element" select="."/&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="not($wasWrapped) and count(child::node()[self::* or self::text() and string-length(normalize-space())&amp;gt;0])&amp;gt;1"&gt;
                &lt;xd:section&gt;
                    &lt;xsl:call-template name="unwrap-to-sections"&gt;
                        &lt;xsl:with-param name="wasWrapped" select="true()"/&gt;
                    &lt;/xsl:call-template&gt;
                &lt;/xd:section&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
                &lt;xsl:for-each-group select="child::node()[self::* or self::text() and string-length(normalize-space())&amp;gt;0]" group-adjacent="self::* and not(ancestor::*[local-name()='pre']) and (local-name()='section' or local-name()='ul' or local-name()='li' or local-name()='pre' or local-name()='p')"&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="current-grouping-key()"&gt;
                            &lt;xsl:choose&gt;
                                &lt;xsl:when test="count(current-group())&amp;gt;1 and last()&amp;gt;1"&gt;
                                    &lt;xd:section&gt;
                                        &lt;xsl:apply-templates mode="section" select="current-group()"&gt;
                                            &lt;xsl:with-param name="wrapin-p" tunnel="yes" select="if ($wrapin-p or local-name($element)='p') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-ul" tunnel="yes" select="if ($wrapin-ul or local-name($element)='ul') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-li" tunnel="yes" select="if ($wrapin-li or local-name($element)='li') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-b" tunnel="yes" select="if ($wrapin-b or local-name($element)='b') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-i" tunnel="yes" select="if ($wrapin-i or local-name($element)='i') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-a" tunnel="yes" select="if ($wrapin-a or local-name($element)='a') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-a-elem" tunnel="yes" select="if (not($wrapin-a) and local-name($element)='a') then $element else false()"/&gt;
                                        &lt;/xsl:apply-templates&gt;
                                    &lt;/xd:section&gt;
                                &lt;/xsl:when&gt;
                                &lt;xsl:otherwise&gt;
                                    &lt;xsl:apply-templates mode="section" select="current-group()"&gt;
                                        &lt;xsl:with-param name="wrapin-p" tunnel="yes" select="if ($wrapin-p or local-name($element)='p') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-ul" tunnel="yes" select="if ($wrapin-ul or local-name($element)='ul') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-li" tunnel="yes" select="if ($wrapin-li or local-name($element)='li') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-b" tunnel="yes" select="if ($wrapin-b or local-name($element)='b') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-i" tunnel="yes" select="if ($wrapin-i or local-name($element)='i') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-a" tunnel="yes" select="if ($wrapin-a or local-name($element)='a') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-a-elem" tunnel="yes" select="if (not($wrapin-a) and local-name($element)='a') then $element else false()"/&gt;
                                    &lt;/xsl:apply-templates&gt;
                                &lt;/xsl:otherwise&gt;
                            &lt;/xsl:choose&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:element name="xd:{local-name($element)}"&gt;
                                &lt;xsl:for-each select="$element/@*"&gt;
                                    &lt;xsl:attribute name="xd:{local-name()}" select="."/&gt;
                                &lt;/xsl:for-each&gt;
                                &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                    &lt;xsl:with-param name="wrapin-p" tunnel="yes" select="if ($wrapin-p or local-name($element)='p') then false() else $wrapin-p"/&gt;
                                    &lt;xsl:with-param name="wrapin-ul" tunnel="yes" select="if ($wrapin-ul or local-name($element)='ul') then false() else $wrapin-ul"/&gt;
                                    &lt;xsl:with-param name="wrapin-li" tunnel="yes" select="if ($wrapin-li or local-name($element)='li') then false() else $wrapin-li"/&gt;
                                    &lt;xsl:with-param name="wrapin-b" tunnel="yes" select="if ($wrapin-b or local-name($element)='b') then false() else $wrapin-b"/&gt;
                                    &lt;xsl:with-param name="wrapin-i" tunnel="yes" select="if ($wrapin-i or local-name($element)='i') then false() else $wrapin-i"/&gt;
                                    &lt;xsl:with-param name="wrapin-a" tunnel="yes" select="if ($wrapin-a or local-name($element)='a') then false() else $wrapin-a"/&gt;
                                &lt;/xsl:apply-templates&gt;
                            &lt;/xsl:element&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xsl:for-each-group&gt;
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;This template unwraps problematic elements into blocks.&lt;/xd:short&gt;&lt;xd:param name="wrapin-p"/&gt;&lt;xd:param name="wrapin-ul"/&gt;&lt;xd:param name="wrapin-li"/&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="unwrap-to-blocks"&gt;
        &lt;xsl:param name="wrapin-p" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-ul" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-li" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:variable name="element" select="."/&gt;
        &lt;xsl:for-each-group select="child::node()[self::* or self::text() and string-length(normalize-space())&amp;gt;0]" group-adjacent="count(descendant-or-self::*[local-name()='ul' or local-name()='li' or local-name()='pre' or local-name()='p'])&amp;gt;0"&gt;
            &lt;xsl:choose&gt;
                &lt;xsl:when test="current-grouping-key()"&gt;
                    &lt;xsl:for-each select="current-group()"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-p" select="$wrapin-p or local-name()='p' or local-name($element)='p'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="$wrapin-ul or local-name()='ul' or local-name($element)='ul'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="$wrapin-li or local-name()='li' or local-name($element)='li'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-b" select="$wrapin-b or local-name()='b' or local-name($element)='b'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-i" select="$wrapin-i or local-name()='i' or local-name($element)='i'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-a" select="$wrapin-a or local-name()='a' or local-name($element)='a'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-a-elem" select="if (local-name()='a') then . else (if (local-name($element)='a') then $element else $wrapin-a-elem)" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:for-each&gt;
                &lt;/xsl:when&gt;
                &lt;xsl:otherwise&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="$wrapin-p"&gt;
                            &lt;xd:p&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="$wrapin-b"&gt;
                                        &lt;xd:b&gt;
                                            &lt;xsl:choose&gt;
                                                &lt;xsl:when test="$wrapin-i"&gt;
                                                  &lt;xd:i&gt;
                                                  &lt;xsl:choose&gt;
                                                  &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                  &lt;/xsl:when&gt;
                                                  &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xsl:otherwise&gt;
                                                  &lt;/xsl:choose&gt;
                                                  &lt;/xd:i&gt;
                                                &lt;/xsl:when&gt;
                                                &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                &lt;/xsl:otherwise&gt;
                                            &lt;/xsl:choose&gt;
                                        &lt;/xd:b&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:when test="$wrapin-i"&gt;
                                        &lt;xd:i&gt;
                                            &lt;xsl:choose&gt;
                                                &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                &lt;/xsl:when&gt;
                                                &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                &lt;/xsl:otherwise&gt;
                                            &lt;/xsl:choose&gt;
                                        &lt;/xd:i&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:when test="$wrapin-a"&gt;
                                        &lt;xd:a&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                            &lt;/xsl:apply-templates&gt;
                                        &lt;/xd:a&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                            &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                        &lt;/xsl:apply-templates&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xd:p&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="$wrapin-li"&gt;
                            &lt;xd:ul&gt;
                                &lt;xd:li&gt;
                                    &lt;xsl:choose&gt;
                                        &lt;xsl:when test="$wrapin-b"&gt;
                                            &lt;xd:b&gt;
                                                &lt;xsl:choose&gt;
                                                  &lt;xsl:when test="$wrapin-i"&gt;
                                                  &lt;xd:i&gt;
                                                  &lt;xsl:choose&gt;
                                                  &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                  &lt;/xsl:when&gt;
                                                  &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xsl:otherwise&gt;
                                                  &lt;/xsl:choose&gt;
                                                  &lt;/xd:i&gt;
                                                  &lt;/xsl:when&gt;
                                                  &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xsl:otherwise&gt;
                                                &lt;/xsl:choose&gt;
                                            &lt;/xd:b&gt;
                                        &lt;/xsl:when&gt;
                                        &lt;xsl:when test="$wrapin-i"&gt;
                                            &lt;xd:i&gt;
                                                &lt;xsl:choose&gt;
                                                  &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                  &lt;/xsl:when&gt;
                                                  &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xsl:otherwise&gt;
                                                &lt;/xsl:choose&gt;
                                            &lt;/xd:i&gt;
                                        &lt;/xsl:when&gt;
                                        &lt;xsl:when test="$wrapin-a"&gt;
                                            &lt;xd:a&gt;
                                                &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                &lt;/xsl:apply-templates&gt;
                                            &lt;/xd:a&gt;
                                        &lt;/xsl:when&gt;
                                        &lt;xsl:otherwise&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                            &lt;/xsl:apply-templates&gt;
                                        &lt;/xsl:otherwise&gt;
                                    &lt;/xsl:choose&gt;
                                &lt;/xd:li&gt;
                            &lt;/xd:ul&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="$wrapin-ul"&gt;
                            &lt;xd:p&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="$wrapin-b"&gt;
                                        &lt;xd:b&gt;
                                            &lt;xsl:choose&gt;
                                                &lt;xsl:when test="$wrapin-i"&gt;
                                                  &lt;xd:i&gt;
                                                  &lt;xsl:choose&gt;
                                                  &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                  &lt;/xsl:when&gt;
                                                  &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xsl:otherwise&gt;
                                                  &lt;/xsl:choose&gt;
                                                  &lt;/xd:i&gt;
                                                &lt;/xsl:when&gt;
                                                &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                &lt;/xsl:otherwise&gt;
                                            &lt;/xsl:choose&gt;
                                        &lt;/xd:b&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:when test="$wrapin-i"&gt;
                                        &lt;xd:i&gt;
                                            &lt;xsl:choose&gt;
                                                &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                &lt;/xsl:when&gt;
                                                &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                &lt;/xsl:otherwise&gt;
                                            &lt;/xsl:choose&gt;
                                        &lt;/xd:i&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:when test="$wrapin-a"&gt;
                                        &lt;xd:a&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                            &lt;/xsl:apply-templates&gt;
                                        &lt;/xd:a&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                            &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                        &lt;/xsl:apply-templates&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xd:p&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="$wrapin-b"&gt;
                            &lt;xd:b&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="$wrapin-i"&gt;
                                        &lt;xd:i&gt;
                                            &lt;xsl:choose&gt;
                                                &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                &lt;/xsl:when&gt;
                                                &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                &lt;/xsl:otherwise&gt;
                                            &lt;/xsl:choose&gt;
                                        &lt;/xd:i&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:when test="$wrapin-a"&gt;
                                        &lt;xd:a&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                            &lt;/xsl:apply-templates&gt;
                                        &lt;/xd:a&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                            &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                        &lt;/xsl:apply-templates&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xd:b&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="$wrapin-i"&gt;
                            &lt;xd:i&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="$wrapin-a"&gt;
                                        &lt;xd:a&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                            &lt;/xsl:apply-templates&gt;
                                        &lt;/xd:a&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                            &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                        &lt;/xsl:apply-templates&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xd:i&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="$wrapin-a"&gt;
                            &lt;xd:a&gt;
                                &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                    &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                &lt;/xsl:apply-templates&gt;
                            &lt;/xd:a&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xsl:otherwise&gt;
            &lt;/xsl:choose&gt;
        &lt;/xsl:for-each-group&gt;
    &lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;&lt;/codeblock&gt;
    &lt;xsl:template name="version"&gt;
        &lt;xsl:if test="child::*[local-name()='version' and string-length(normalize-space(./text()))&amp;gt;0]"&gt;
            &lt;xd:version&gt;
                &lt;xsl:value-of select="child::*[local-name()='version' and string-length(normalize-space(./text()))&amp;gt;0]"/&gt;
            &lt;/xd:version&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;codeblock&gt;&lt;xsl:stylesheet version="2.0"&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Identity template.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template match="@*|node()"&gt;
        &lt;xsl:copy&gt;
            &lt;xsl:apply-templates select="@*|node()"/&gt;
        &lt;/xsl:copy&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Matches each xd:doc element.&lt;/xd:short&gt;&lt;xd:detail&gt;
        
        Determines what code is being documented and calls appropriate templates for: &lt;xd:ul&gt;
                &lt;xd:li&gt;short description (xd:short)&lt;/xd:li&gt;
                &lt;xd:li&gt;detailed description (xd:detail)&lt;/xd:li&gt;
                &lt;xd:li&gt;authors (xd:author)&lt;/xd:li&gt;
                &lt;xd:li&gt;contributors (xd:contributor)&lt;/xd:li&gt;
                &lt;xd:li&gt;maintainers (xd:maintainer)&lt;/xd:li&gt;
                &lt;xd:li&gt;copyright (xd:copyright)&lt;/xd:li&gt;
                &lt;xd:li&gt;version (xd:version)&lt;/xd:li&gt;
                &lt;xd:li&gt;code existed since version (xd:since)&lt;/xd:li&gt;
                &lt;xd:li&gt;see also (xd:see)&lt;/xd:li&gt;
                &lt;xd:li&gt;deprecated since version (xd:deprecated)&lt;/xd:li&gt;
                &lt;xd:li&gt;import statements (xd:import and xsl:import)&lt;/xd:li&gt;
                &lt;xd:li&gt;include statements (xd:include and xsl:include)&lt;/xd:li&gt;
                &lt;xd:li&gt;parameters (xd:param and xsl:param)&lt;/xd:li&gt;
                &lt;xd:li&gt;return values / output (xd:return)&lt;/xd:li&gt;
            &lt;/xd:ul&gt;
        
        
    &lt;/xd:detail&gt;&lt;xd:return&gt;The normalized xd:doc.&lt;/xd:return&gt;&lt;/xd:doc&gt;
    &lt;xsl:template match="xd:doc"&gt;
        &lt;xsl:copy&gt;
            &lt;xsl:variable name="target"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="@target"&gt;
                        &lt;xsl:value-of select="@target"/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="count(preceding-sibling::*)=0"&gt;
                        &lt;xsl:value-of select="'parent'"/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:value-of select="'following'"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:variable&gt;
            &lt;xsl:variable name="code" select="if ($target='parent') then parent::* else following-sibling::*[1]"/&gt;

            &lt;xsl:attribute name="target" select="$target"/&gt;

            &lt;xsl:call-template name="short"/&gt;
            &lt;xsl:call-template name="detail"/&gt;
            &lt;xsl:call-template name="authors"/&gt;
            &lt;xsl:call-template name="contributors"/&gt;
            &lt;xsl:call-template name="maintainers"/&gt;
            &lt;xsl:call-template name="copyright"/&gt;
            &lt;xsl:call-template name="version"/&gt;
            &lt;xsl:call-template name="since"/&gt;
            &lt;xsl:call-template name="see"/&gt;
            &lt;xsl:call-template name="deprecated"/&gt;
            &lt;xsl:call-template name="import"&gt;
                &lt;xsl:with-param name="code" select="$code"/&gt;
            &lt;/xsl:call-template&gt;
            &lt;xsl:call-template name="include"&gt;
                &lt;xsl:with-param name="code" select="$code"/&gt;
            &lt;/xsl:call-template&gt;
            &lt;xsl:call-template name="param"&gt;
                &lt;xsl:with-param name="code" select="$code"/&gt;
            &lt;/xsl:call-template&gt;
            &lt;xsl:call-template name="return"/&gt;
        &lt;/xsl:copy&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Determines the short description.&lt;/xd:short&gt;&lt;xd:detail&gt;
        
        
            &lt;xd:ul&gt;
                &lt;xd:li&gt;If there is no &amp;lt;xd:short/&amp;gt;-element present, but plain text is present as a
                    child of the &amp;lt;xd:doc/&amp;gt;element, then the first sentence from that text (up
                    until the first period (".") will be used as a short description.&lt;/xd:li&gt;
                &lt;xd:li&gt;Else; if there are multiple &amp;lt;xd:short/&amp;gt;-elements, each one of their
                    contents will be wrapped in separate &amp;lt;section/&amp;gt;s.&lt;/xd:li&gt;
                &lt;xd:li&gt;Else; use the one &amp;lt;xd:short/&amp;gt;-element that is present for the short
                    description.&lt;/xd:li&gt;
            &lt;/xd:ul&gt;
        
    &lt;/xd:detail&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="short"&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="count(child::*[local-name()='short'])&amp;gt;1"&gt;
                &lt;xd:short&gt;
                    &lt;xsl:for-each select="child::*[local-name()='short']"&gt;
                        &lt;xd:section&gt;
                            &lt;xsl:apply-templates mode="section"/&gt;
                        &lt;/xd:section&gt;
                    &lt;/xsl:for-each&gt;
                &lt;/xd:short&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="count(child::*[local-name()='short'])=1"&gt;
                &lt;xd:short&gt;
                    &lt;xsl:apply-templates select="child::*[local-name()='short']/node()" mode="section"/&gt;
                &lt;/xd:short&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="child::text()[string-length(normalize-space())&amp;gt;0]"&gt;
                &lt;xsl:variable name="short" select="replace(normalize-space(child::text()[1]),'^([^\.]+\.?)\s?.*$','$1')"/&gt;
                &lt;xd:short&gt;
                    &lt;xsl:value-of select="$short"/&gt;
                &lt;/xd:short&gt;
            &lt;/xsl:when&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Determines the detailed description.&lt;/xd:short&gt;&lt;xd:detail&gt;
        
        The detailed description will be put together based on any number of
            &amp;lt;xd:detail/&amp;gt;-elements, as well as any number of text nodes that are direct
            children of the &amp;lt;xd:doc/&amp;gt;-element. If the xd:short was extracted from the first
            text node, then the first sentence from that text node will be ignored. If there are
            multiple &amp;lt;xd:detail/&amp;gt; and text nodes, then each of them will be wrapped in
            &amp;lt;xd:section/&amp;gt;s.
    &lt;/xd:detail&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="detail"&gt;
        &lt;xsl:variable name="shortInFirstText" select="count(./*[local-name()='short'])=0"/&gt;
        &lt;xsl:variable name="detailCount" select="(if (matches(normalize-space(./text()[1]),'\.[^\.].')) then 1 else 0) + count(*[local-name()='detail' and (descendant-or-self::node()[self::text() and string-length(normalize-space())&amp;gt;0 or local-name()='pre' and not(ancestor::*[local-name()='pre'])])]) + count(./text()[not(position()=1) and string-length(normalize-space())&amp;gt;0])"/&gt;
        &lt;xsl:if test="$detailCount&amp;gt;0"&gt;
            &lt;xd:detail&gt;
                &lt;xsl:for-each select="*|text()"&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="self::text() and count(preceding-sibling::text()[string-length(normalize-space())&amp;gt;0])=0"&gt;
                            &lt;!-- first text --&gt;
                            &lt;xsl:choose&gt;
                                &lt;xsl:when test="$shortInFirstText"&gt;
                                    &lt;xsl:variable name="detail" select="replace(normalize-space(),'^[^\.]+.?\s?(.*)$','$1')"/&gt;
                                    &lt;xsl:choose&gt;
                                        &lt;xsl:when test="$detailCount&amp;gt;1"&gt;
                                            &lt;xd:section&gt;
                                                &lt;xsl:value-of select="$detail"/&gt;
                                            &lt;/xd:section&gt;
                                        &lt;/xsl:when&gt;
                                        &lt;xsl:otherwise&gt;
                                            &lt;xsl:value-of select="$detail"/&gt;
                                        &lt;/xsl:otherwise&gt;
                                    &lt;/xsl:choose&gt;
                                &lt;/xsl:when&gt;
                                &lt;xsl:otherwise&gt;
                                    &lt;xsl:choose&gt;
                                        &lt;xsl:when test="$detailCount&amp;gt;1"&gt;
                                            &lt;xd:section&gt;
                                                &lt;xsl:value-of select="."/&gt;
                                            &lt;/xd:section&gt;
                                        &lt;/xsl:when&gt;
                                        &lt;xsl:otherwise&gt;
                                            &lt;xsl:value-of select="."/&gt;
                                        &lt;/xsl:otherwise&gt;
                                    &lt;/xsl:choose&gt;
                                &lt;/xsl:otherwise&gt;
                            &lt;/xsl:choose&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="self::text()"&gt;
                            &lt;!-- non-first text --&gt;
                            &lt;xsl:choose&gt;
                                &lt;xsl:when test="$detailCount&amp;gt;1"&gt;
                                    &lt;xd:section&gt;
                                        &lt;xsl:value-of select="."/&gt;
                                    &lt;/xd:section&gt;
                                &lt;/xsl:when&gt;
                                &lt;xsl:otherwise&gt;
                                    &lt;xsl:value-of select="."/&gt;
                                &lt;/xsl:otherwise&gt;
                            &lt;/xsl:choose&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="local-name()='detail'"&gt;
                            &lt;!-- detail element --&gt;
                            &lt;xsl:choose&gt;
                                &lt;xsl:when test="$detailCount&amp;gt;1"&gt;
                                    &lt;xd:section&gt;
                                        &lt;xsl:apply-templates select="child::node()" mode="section"/&gt;
                                    &lt;/xd:section&gt;
                                &lt;/xsl:when&gt;
                                &lt;xsl:otherwise&gt;
                                    &lt;xsl:apply-templates select="child::node()" mode="section"/&gt;
                                &lt;/xsl:otherwise&gt;
                            &lt;/xsl:choose&gt;
                        &lt;/xsl:when&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xsl:for-each&gt;
            &lt;/xd:detail&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes the xd:author-elements.&lt;/xd:short&gt;&lt;xd:detail&gt;&amp;gt;xd:author/&amp;lt;s with no text are removed. &amp;lt;xd:author/&amp;gt;s with no child elements will have their text content wrapped in a &amp;lt;xd:name/&amp;gt; element. Children other than xd:name, xd:mailto and xd:organization are ignored.&lt;/xd:detail&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="authors" xml:id="authors"&gt;
        &lt;xsl:for-each select="*[local-name()='author']"&gt;
            &lt;xsl:variable name="is-empty" select="count(descendant-or-self::text()[string-length(normalize-space())&amp;gt;0])=0"/&gt;
            &lt;xsl:if test="not($is-empty)"&gt;
                &lt;xd:author&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="count(child::*)=0"&gt;
                            &lt;xd:name&gt;
                                &lt;xsl:value-of select="."/&gt;
                            &lt;/xd:name&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:if test="child::*[local-name()='name']"&gt;
                                &lt;xd:name&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='name']"/&gt;
                                &lt;/xd:name&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='mailto']"&gt;
                                &lt;xd:mailto&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='mailto']"/&gt;
                                &lt;/xd:mailto&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='organization']"&gt;
                                &lt;xd:organization&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='organization']"/&gt;
                                &lt;/xd:organization&gt;
                            &lt;/xsl:if&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xd:author&gt;
            &lt;/xsl:if&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;&amp;lt;xd:contributor/&amp;gt;s are normalized in the same way as &amp;lt;xd:author/&amp;gt;s&lt;/xd:short&gt;&lt;xd:see&gt;#authors&lt;/xd:see&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="contributors"&gt;
        &lt;xsl:for-each select="*[local-name()='contributor']"&gt;
            &lt;xsl:variable name="is-empty" select="count(descendant-or-self::text()[string-length(normalize-space())&amp;gt;0])=0"/&gt;
            &lt;xsl:if test="not($is-empty)"&gt;
                &lt;xd:contributor&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="count(child::*)=0"&gt;
                            &lt;xd:name&gt;
                                &lt;xsl:value-of select="."/&gt;
                            &lt;/xd:name&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:if test="child::*[local-name()='name']"&gt;
                                &lt;xd:name&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='name']"/&gt;
                                &lt;/xd:name&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='mailto']"&gt;
                                &lt;xd:mailto&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='mailto']"/&gt;
                                &lt;/xd:mailto&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='organization']"&gt;
                                &lt;xd:organization&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='organization']"/&gt;
                                &lt;/xd:organization&gt;
                            &lt;/xsl:if&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xd:contributor&gt;
            &lt;/xsl:if&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;&amp;lt;xd:maintainer/&amp;gt;s are normalized in the same way as &amp;lt;xd:author/&amp;gt;s&lt;/xd:short&gt;&lt;xd:see&gt;#authors&lt;/xd:see&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="maintainers"&gt;
        &lt;xsl:for-each select="*[local-name()='maintainer']"&gt;
            &lt;xsl:variable name="is-empty" select="count(descendant-or-self::text()[string-length(normalize-space())&amp;gt;0])=0"/&gt;
            &lt;xsl:if test="not($is-empty)"&gt;
                &lt;xd:maintainer&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="count(child::*)=0"&gt;
                            &lt;xd:name&gt;
                                &lt;xsl:value-of select="."/&gt;
                            &lt;/xd:name&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:if test="child::*[local-name()='name']"&gt;
                                &lt;xd:name&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='name']"/&gt;
                                &lt;/xd:name&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='mailto']"&gt;
                                &lt;xd:mailto&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='mailto']"/&gt;
                                &lt;/xd:mailto&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='organization']"&gt;
                                &lt;xd:organization&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='organization']"/&gt;
                                &lt;/xd:organization&gt;
                            &lt;/xsl:if&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xd:maintainer&gt;
            &lt;/xsl:if&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes the xd:copyright-element.&lt;/xd:short&gt;&lt;xd:detail&gt;&amp;gt;xd:copyright/&amp;lt;s with no text are removed. &amp;lt;xd:copyright/&amp;gt;s with no child elements will have their text content wrapped in a &amp;lt;xd:name/&amp;gt; element. Children other than xd:year, xd:name, xd:mailto and xd:organization are ignored.&lt;/xd:detail&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="copyright"&gt;
        &lt;xsl:for-each select="*[local-name()='copyright']"&gt;
            &lt;xsl:variable name="is-empty" select="count(descendant-or-self::text()[string-length(normalize-space())&amp;gt;0])=0"/&gt;
            &lt;xsl:if test="not($is-empty)"&gt;
                &lt;xd:copyright&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="count(child::*)=0"&gt;
                            &lt;xd:name&gt;
                                &lt;xsl:value-of select="."/&gt;
                            &lt;/xd:name&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:if test="child::*[local-name()='year']"&gt;
                                &lt;xd:year&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='year']"/&gt;
                                &lt;/xd:year&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='name']"&gt;
                                &lt;xd:name&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='name']"/&gt;
                                &lt;/xd:name&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='mailto']"&gt;
                                &lt;xd:mailto&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='mailto']"/&gt;
                                &lt;/xd:mailto&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='organization']"&gt;
                                &lt;xd:organization&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='organization']"/&gt;
                                &lt;/xd:organization&gt;
                            &lt;/xsl:if&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xd:copyright&gt;
            &lt;/xsl:if&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:version elements.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="version"&gt;
        &lt;xsl:if test="child::*[local-name()='version' and string-length(normalize-space(./text()))&amp;gt;0]"&gt;
            &lt;xd:version&gt;
                &lt;xsl:value-of select="child::*[local-name()='version' and string-length(normalize-space(./text()))&amp;gt;0]"/&gt;
            &lt;/xd:version&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:since elements.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="since"&gt;
        &lt;xsl:if test="child::*[local-name()='since' and string-length(normalize-space(./text()))&amp;gt;0]"&gt;
            &lt;xd:since&gt;
                &lt;xsl:value-of select="child::*[local-name()='since' and string-length(normalize-space(./text()))&amp;gt;0]"/&gt;
            &lt;/xd:since&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:see elements.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="see"&gt;
        &lt;xsl:if test="child::*[local-name()='see' and string-length(normalize-space(./text()))&amp;gt;0]"&gt;
            &lt;xd:see&gt;
                &lt;xsl:value-of select="child::*[local-name()='see' and string-length(normalize-space(./text()))&amp;gt;0]"/&gt;
            &lt;/xd:see&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:deprecated elements.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="deprecated"&gt;
        &lt;xsl:if test="child::*[local-name()='deprecated' and string-length(normalize-space(./text()))&amp;gt;0]"&gt;
            &lt;xd:deprecated&gt;
                &lt;xsl:value-of select="child::*[local-name()='deprecated' and string-length(normalize-space(./text()))&amp;gt;0]"/&gt;
            &lt;/xd:deprecated&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:import elements.&lt;/xd:short&gt;&lt;xd:detail&gt;Will create empty documentation for imports that are not documented, and removes documentation of imports that does not exist in the code.&lt;/xd:detail&gt;&lt;xd:param name="code"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="import"&gt;
        &lt;xsl:param name="code" required="yes"/&gt;
        &lt;xsl:variable name="doc" select="."/&gt;
        &lt;xsl:for-each select="$code/xsl:import"&gt;
            &lt;xsl:variable name="href" select="@href"/&gt;
            &lt;xd:import href="{@href}"&gt;
                &lt;xsl:if test="$doc/*[local-name()='import' and @href=$href]"&gt;
                    &lt;xsl:value-of select="$doc/*[local-name()='import' and @href=$href]"/&gt;
                &lt;/xsl:if&gt;
            &lt;/xd:import&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:include elements.&lt;/xd:short&gt;&lt;xd:detail&gt;Will create empty documentation for includes that are not documented, and removes documentation of includes that does not exist in the code.&lt;/xd:detail&gt;&lt;xd:param name="code"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="include"&gt;
        &lt;xsl:param name="code" required="yes"/&gt;
        &lt;xsl:variable name="doc" select="."/&gt;
        &lt;xsl:for-each select="$code/xsl:include"&gt;
            &lt;xsl:variable name="href" select="@href"/&gt;
            &lt;xd:include href="{@href}"&gt;
                &lt;xsl:if test="$doc/*[local-name()='include' and @href=$href]"&gt;
                    &lt;xsl:value-of select="$doc/*[local-name()='include' and @href=$href]"/&gt;
                &lt;/xsl:if&gt;
            &lt;/xd:include&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:import elements.&lt;/xd:short&gt;&lt;xd:detail&gt;Will create empty documentation for imports that are not documented, and removes documentation of imports that does not exist in the code.&lt;/xd:detail&gt;&lt;xd:param name="code"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="param"&gt;
        &lt;xsl:param name="code" required="yes"/&gt;
        &lt;xsl:variable name="doc" select="."/&gt;
        &lt;xsl:for-each select="*[local-name()='param']"&gt;
            &lt;xd:param&gt;
                &lt;xsl:apply-templates select="@*"/&gt;
                &lt;xsl:apply-templates mode="section" select="node()"/&gt;
            &lt;/xd:param&gt;
        &lt;/xsl:for-each&gt;
        &lt;xsl:for-each select="$code/xsl:param"&gt;
            &lt;xsl:variable name="name" select="@name"/&gt;
            &lt;xsl:if test="not($doc/*[local-name()='param' and @name=$name])"&gt;
                &lt;xd:param name="{@name}"/&gt;
            &lt;/xsl:if&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Describes the result of the code.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="return"&gt;
        &lt;xsl:variable name="is-empty" select="count(*[local-name()='return']/descendant-or-self::node()[self::text() and string-length(normalize-space())&amp;gt;0 or local-name()='pre'])=0"/&gt;
        &lt;xsl:if test="not($is-empty)"&gt;
            &lt;xd:return&gt;
                &lt;xsl:apply-templates mode="section" select="*[local-name()='return']/node()"/&gt;
            &lt;/xd:return&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Matches all elements when in "section"-mode.&lt;/xd:short&gt;&lt;xd:detail&gt;
        
        Checks all child elements and their descendants and wraps and handles as is
            appropriate. If a child or descendant is placed in a problematic position, then one of
            the unwrap*-templates are called to solve the problem. Otherwise, just make sure that
            the element is in the correct namespace and copy it.
    &lt;/xd:detail&gt;&lt;xd:param name="wrapin-p"/&gt;&lt;xd:param name="wrapin-ul"/&gt;&lt;xd:param name="wrapin-li"/&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template mode="section" match="@*|node()"&gt;
        &lt;xsl:param name="wrapin-p" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-ul" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-li" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:variable name="is-empty" select="count(descendant-or-self::node()[self::text() and string-length(normalize-space())&amp;gt;0 or local-name()='pre'])=0"/&gt;
        &lt;xsl:variable name="contains-section" select="count(descendant::*[local-name()='section'])&amp;gt;0"/&gt;
        &lt;xsl:variable name="contains-block" select="count(descendant::*[local-name()='ul' or local-name()='li' or local-name()='pre' or local-name()='p'])&amp;gt;0"/&gt;
        &lt;xsl:variable name="contains-block-non-li" select="count(descendant::*[local-name()='ul' or local-name()='pre' or local-name()='p'])&amp;gt;0"/&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="local-name()='section'"&gt;
                &lt;xd:section&gt;
                    &lt;xsl:apply-templates mode="section" select="@*|node()"/&gt;
                &lt;/xd:section&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='p'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$contains-section or $contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-p" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:p&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:p&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='pre'"&gt;
                &lt;xd:pre&gt;
                    &lt;xsl:copy-of select="@*|node()"/&gt;
                &lt;/xd:pre&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='ul'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-section"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$contains-block-non-li"&gt;
                        &lt;xd:section&gt;
                            &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                                &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                            &lt;/xsl:call-template&gt;
                        &lt;/xd:section&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="count(descendant::*[local-name()='li'])=0"&gt;
                        &lt;xsl:choose&gt;
                            &lt;xsl:when test="count(child::node()[self::* or self::text() and string-length(normalize-space())&amp;gt;0])&amp;gt;1"&gt;
                                &lt;xd:section&gt;
                                    &lt;xsl:apply-templates mode="section" select="@*|node()"&gt;
                                        &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                                        &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                                    &lt;/xsl:apply-templates&gt;
                                &lt;/xd:section&gt;
                            &lt;/xsl:when&gt;
                            &lt;xsl:otherwise&gt;
                                &lt;xsl:apply-templates mode="section" select="@*|node()"&gt;
                                    &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                                &lt;/xsl:apply-templates&gt;
                            &lt;/xsl:otherwise&gt;
                        &lt;/xsl:choose&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:ul&gt;
                            &lt;xsl:apply-templates mode="list" select="@*|node()"&gt;
                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:ul&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='li'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-section"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:ul&gt;
                            &lt;xd:li&gt;
                                &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                            &lt;/xd:li&gt;
                        &lt;/xd:ul&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='b'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-section"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-b" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-b" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:b&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:b&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='i'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-section"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-i" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-i" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:i&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:i&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='a'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-section"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-a" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-a-elem" select="." tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-a" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-a-elem" select="." tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:a&gt;
                            &lt;xsl:apply-templates select="@*"/&gt;
                            &lt;xsl:apply-templates mode="phrase" select="node()"/&gt;
                        &lt;/xd:a&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="self::*"&gt;
                        &lt;xsl:choose&gt;
                            &lt;xsl:when test="not(preceding-sibling::*) and not(following-sibling::*)"&gt;
                                &lt;xsl:apply-templates mode="section" select="@*|node()"/&gt;
                            &lt;/xsl:when&gt;
                            &lt;xsl:otherwise&gt;
                                &lt;xd:section&gt;
                                    &lt;xsl:apply-templates mode="section" select="@*|node()"/&gt;
                                &lt;/xd:section&gt;
                            &lt;/xsl:otherwise&gt;
                        &lt;/xsl:choose&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="self::text()"&gt;
                        &lt;xsl:copy/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="section" select="@*|node()"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Handles non-problematic lists.&lt;/xd:short&gt;&lt;xd:param name="wrapin-p"/&gt;&lt;xd:param name="wrapin-ul"/&gt;&lt;xd:param name="wrapin-li"/&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template mode="list" match="@*|node()"&gt;
        &lt;xsl:param name="wrapin-p" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-ul" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-li" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:variable name="is-empty" select="count(descendant-or-self::node()[self::text() and string-length(normalize-space())&amp;gt;0 or local-name()='pre'])=0"/&gt;
        &lt;xsl:variable name="contains-block" select="count(descendant::*[local-name()='ul' or local-name()='li' or local-name()='pre' or local-name()='p'])&amp;gt;0"/&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="local-name()='li'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$wrapin-ul"&gt;
                        &lt;xd:ul&gt;
                            &lt;xd:li&gt;
                                &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                            &lt;/xd:li&gt;
                        &lt;/xd:ul&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:li&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:li&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="self::text()"&gt;
                        &lt;xsl:copy/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="list" select="@*|node()"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Handles all elements when in "block" mode and applies fixes where needed.&lt;/xd:short&gt;&lt;xd:param name="wrapin-p"/&gt;&lt;xd:param name="wrapin-ul"/&gt;&lt;xd:param name="wrapin-li"/&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template mode="block" match="@*|node()"&gt;
        &lt;xsl:param name="wrapin-p" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-ul" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-li" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:variable name="element" select="."/&gt;
        &lt;xsl:variable name="is-empty" select="count(descendant-or-self::node()[self::* or self::text() and string-length(normalize-space())&amp;gt;0])=0"/&gt;
        &lt;xsl:variable name="contains-block" select="count(descendant::*[local-name()='ul' or local-name()='li' or local-name()='pre' or local-name()='p'])&amp;gt;0"/&gt;
        &lt;xsl:variable name="contains-block-non-li" select="count(descendant::*[local-name()='ul' or local-name()='pre' or local-name()='p'])&amp;gt;0"/&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="local-name()='p'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:p&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:p&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='pre'"&gt;
                &lt;xd:pre&gt;
                    &lt;xsl:copy-of select="@*|node()"/&gt;
                &lt;/xd:pre&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='ul'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block-non-li"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="count(descendant::*[local-name()='li' and string-length(normalize-space(descendant-or-self::text()))&amp;gt;0])=0"&gt;
                        &lt;xsl:apply-templates mode="block" select="@*|node()"/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:ul&gt;
                            &lt;xsl:apply-templates mode="list" select="@*|node()"&gt;
                                &lt;xsl:with-param name="wrapin-ul" select="false()"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:ul&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='li'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:ul&gt;
                            &lt;xd:li&gt;
                                &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                                    &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                &lt;/xsl:apply-templates&gt;
                            &lt;/xd:li&gt;
                        &lt;/xd:ul&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="not($contains-block) and $wrapin-p"&gt;
                &lt;xd:p&gt;
                    &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                        &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                        &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                        &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                    &lt;/xsl:apply-templates&gt;
                &lt;/xd:p&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="not($contains-block) and $wrapin-li"&gt;
                &lt;xd:ul&gt;
                    &lt;xd:li&gt;
                        &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                            &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xd:li&gt;
                &lt;/xd:ul&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='b'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-b" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:b&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:b&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='i'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-i" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:i&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:i&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='a'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-a" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-a-elem" select="$element" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:a&gt;
                            &lt;xsl:apply-templates mode="phrase" select="$element/@*"/&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:a&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="self::text()"&gt;
                        &lt;xsl:copy/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="block" select="@*|node()"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Phrases are matched with this template (mode="phrase") and handled appropriately.&lt;/xd:short&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template mode="phrase" match="@*|node()"&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="local-name()='b'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='b'])"&gt;
                        &lt;xd:b&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:b&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="$wrapin-b"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='b'])"&gt;
                        &lt;xd:b&gt;
                            &lt;xsl:apply-templates mode="phrase" select="."&gt;
                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:b&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="."&gt;
                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='i'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='i'])"&gt;
                        &lt;xd:i&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:i&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="$wrapin-i"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='i'])"&gt;
                        &lt;xd:i&gt;
                            &lt;xsl:apply-templates mode="phrase" select="."&gt;
                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:i&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="."&gt;
                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='a'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='a'])"&gt;
                        &lt;xd:a&gt;
                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                            &lt;xsl:apply-templates mode="phrase" select="node()"&gt;
                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:a&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="$wrapin-a"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='a'])"&gt;
                        &lt;xd:a&gt;
                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                            &lt;xsl:apply-templates mode="phrase" select="."&gt;
                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:a&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="."&gt;
                            &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="self::text()"&gt;
                        &lt;xsl:copy/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;This template unwraps problematic elements into sections.&lt;/xd:short&gt;&lt;xd:param name="wasWrapped"/&gt;&lt;xd:param name="wrapin-p"/&gt;&lt;xd:param name="wrapin-ul"/&gt;&lt;xd:param name="wrapin-li"/&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="unwrap-to-sections"&gt;
        &lt;xsl:param name="wasWrapped" select="false()"/&gt;
        &lt;xsl:param name="wrapin-p" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-ul" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-li" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:variable name="element" select="."/&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="not($wasWrapped) and count(child::node()[self::* or self::text() and string-length(normalize-space())&amp;gt;0])&amp;gt;1"&gt;
                &lt;xd:section&gt;
                    &lt;xsl:call-template name="unwrap-to-sections"&gt;
                        &lt;xsl:with-param name="wasWrapped" select="true()"/&gt;
                    &lt;/xsl:call-template&gt;
                &lt;/xd:section&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
                &lt;xsl:for-each-group select="child::node()[self::* or self::text() and string-length(normalize-space())&amp;gt;0]" group-adjacent="self::* and not(ancestor::*[local-name()='pre']) and (local-name()='section' or local-name()='ul' or local-name()='li' or local-name()='pre' or local-name()='p')"&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="current-grouping-key()"&gt;
                            &lt;xsl:choose&gt;
                                &lt;xsl:when test="count(current-group())&amp;gt;1 and last()&amp;gt;1"&gt;
                                    &lt;xd:section&gt;
                                        &lt;xsl:apply-templates mode="section" select="current-group()"&gt;
                                            &lt;xsl:with-param name="wrapin-p" tunnel="yes" select="if ($wrapin-p or local-name($element)='p') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-ul" tunnel="yes" select="if ($wrapin-ul or local-name($element)='ul') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-li" tunnel="yes" select="if ($wrapin-li or local-name($element)='li') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-b" tunnel="yes" select="if ($wrapin-b or local-name($element)='b') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-i" tunnel="yes" select="if ($wrapin-i or local-name($element)='i') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-a" tunnel="yes" select="if ($wrapin-a or local-name($element)='a') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-a-elem" tunnel="yes" select="if (not($wrapin-a) and local-name($element)='a') then $element else false()"/&gt;
                                        &lt;/xsl:apply-templates&gt;
                                    &lt;/xd:section&gt;
                                &lt;/xsl:when&gt;
                                &lt;xsl:otherwise&gt;
                                    &lt;xsl:apply-templates mode="section" select="current-group()"&gt;
                                        &lt;xsl:with-param name="wrapin-p" tunnel="yes" select="if ($wrapin-p or local-name($element)='p') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-ul" tunnel="yes" select="if ($wrapin-ul or local-name($element)='ul') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-li" tunnel="yes" select="if ($wrapin-li or local-name($element)='li') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-b" tunnel="yes" select="if ($wrapin-b or local-name($element)='b') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-i" tunnel="yes" select="if ($wrapin-i or local-name($element)='i') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-a" tunnel="yes" select="if ($wrapin-a or local-name($element)='a') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-a-elem" tunnel="yes" select="if (not($wrapin-a) and local-name($element)='a') then $element else false()"/&gt;
                                    &lt;/xsl:apply-templates&gt;
                                &lt;/xsl:otherwise&gt;
                            &lt;/xsl:choose&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:element name="xd:{local-name($element)}"&gt;
                                &lt;xsl:for-each select="$element/@*"&gt;
                                    &lt;xsl:attribute name="xd:{local-name()}" select="."/&gt;
                                &lt;/xsl:for-each&gt;
                                &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                    &lt;xsl:with-param name="wrapin-p" tunnel="yes" select="if ($wrapin-p or local-name($element)='p') then false() else $wrapin-p"/&gt;
                                    &lt;xsl:with-param name="wrapin-ul" tunnel="yes" select="if ($wrapin-ul or local-name($element)='ul') then false() else $wrapin-ul"/&gt;
                                    &lt;xsl:with-param name="wrapin-li" tunnel="yes" select="if ($wrapin-li or local-name($element)='li') then false() else $wrapin-li"/&gt;
                                    &lt;xsl:with-param name="wrapin-b" tunnel="yes" select="if ($wrapin-b or local-name($element)='b') then false() else $wrapin-b"/&gt;
                                    &lt;xsl:with-param name="wrapin-i" tunnel="yes" select="if ($wrapin-i or local-name($element)='i') then false() else $wrapin-i"/&gt;
                                    &lt;xsl:with-param name="wrapin-a" tunnel="yes" select="if ($wrapin-a or local-name($element)='a') then false() else $wrapin-a"/&gt;
                                &lt;/xsl:apply-templates&gt;
                            &lt;/xsl:element&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xsl:for-each-group&gt;
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;This template unwraps problematic elements into blocks.&lt;/xd:short&gt;&lt;xd:param name="wrapin-p"/&gt;&lt;xd:param name="wrapin-ul"/&gt;&lt;xd:param name="wrapin-li"/&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="unwrap-to-blocks"&gt;
        &lt;xsl:param name="wrapin-p" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-ul" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-li" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:variable name="element" select="."/&gt;
        &lt;xsl:for-each-group select="child::node()[self::* or self::text() and string-length(normalize-space())&amp;gt;0]" group-adjacent="count(descendant-or-self::*[local-name()='ul' or local-name()='li' or local-name()='pre' or local-name()='p'])&amp;gt;0"&gt;
            &lt;xsl:choose&gt;
                &lt;xsl:when test="current-grouping-key()"&gt;
                    &lt;xsl:for-each select="current-group()"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-p" select="$wrapin-p or local-name()='p' or local-name($element)='p'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="$wrapin-ul or local-name()='ul' or local-name($element)='ul'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="$wrapin-li or local-name()='li' or local-name($element)='li'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-b" select="$wrapin-b or local-name()='b' or local-name($element)='b'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-i" select="$wrapin-i or local-name()='i' or local-name($element)='i'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-a" select="$wrapin-a or local-name()='a' or local-name($element)='a'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-a-elem" select="if (local-name()='a') then . else (if (local-name($element)='a') then $element else $wrapin-a-elem)" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:for-each&gt;
                &lt;/xsl:when&gt;
                &lt;xsl:otherwise&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="$wrapin-p"&gt;
                            &lt;xd:p&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="$wrapin-b"&gt;
                                        &lt;xd:b&gt;
                                            &lt;xsl:choose&gt;
                                                &lt;xsl:when test="$wrapin-i"&gt;
                                                  &lt;xd:i&gt;
                                                  &lt;xsl:choose&gt;
                                                  &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                  &lt;/xsl:when&gt;
                                                  &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xsl:otherwise&gt;
                                                  &lt;/xsl:choose&gt;
                                                  &lt;/xd:i&gt;
                                                &lt;/xsl:when&gt;
                                                &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                &lt;/xsl:otherwise&gt;
                                            &lt;/xsl:choose&gt;
                                        &lt;/xd:b&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:when test="$wrapin-i"&gt;
                                        &lt;xd:i&gt;
                                            &lt;xsl:choose&gt;
                                                &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                &lt;/xsl:when&gt;
                                                &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                &lt;/xsl:otherwise&gt;
                                            &lt;/xsl:choose&gt;
                                        &lt;/xd:i&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:when test="$wrapin-a"&gt;
                                        &lt;xd:a&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                            &lt;/xsl:apply-templates&gt;
                                        &lt;/xd:a&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                            &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                        &lt;/xsl:apply-templates&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xd:p&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="$wrapin-li"&gt;
                            &lt;xd:ul&gt;
                                &lt;xd:li&gt;
                                    &lt;xsl:choose&gt;
                                        &lt;xsl:when test="$wrapin-b"&gt;
                                            &lt;xd:b&gt;
                                                &lt;xsl:choose&gt;
                                                  &lt;xsl:when test="$wrapin-i"&gt;
                                                  &lt;xd:i&gt;
                                                  &lt;xsl:choose&gt;
                                                  &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                  &lt;/xsl:when&gt;
                                                  &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xsl:otherwise&gt;
                                                  &lt;/xsl:choose&gt;
                                                  &lt;/xd:i&gt;
                                                  &lt;/xsl:when&gt;
                                                  &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xsl:otherwise&gt;
                                                &lt;/xsl:choose&gt;
                                            &lt;/xd:b&gt;
                                        &lt;/xsl:when&gt;
                                        &lt;xsl:when test="$wrapin-i"&gt;
                                            &lt;xd:i&gt;
                                                &lt;xsl:choose&gt;
                                                  &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                  &lt;/xsl:when&gt;
                                                  &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xsl:otherwise&gt;
                                                &lt;/xsl:choose&gt;
                                            &lt;/xd:i&gt;
                                        &lt;/xsl:when&gt;
                                        &lt;xsl:when test="$wrapin-a"&gt;
                                            &lt;xd:a&gt;
                                                &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                &lt;/xsl:apply-templates&gt;
                                            &lt;/xd:a&gt;
                                        &lt;/xsl:when&gt;
                                        &lt;xsl:otherwise&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                            &lt;/xsl:apply-templates&gt;
                                        &lt;/xsl:otherwise&gt;
                                    &lt;/xsl:choose&gt;
                                &lt;/xd:li&gt;
                            &lt;/xd:ul&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="$wrapin-ul"&gt;
                            &lt;xd:p&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="$wrapin-b"&gt;
                                        &lt;xd:b&gt;
                                            &lt;xsl:choose&gt;
                                                &lt;xsl:when test="$wrapin-i"&gt;
                                                  &lt;xd:i&gt;
                                                  &lt;xsl:choose&gt;
                                                  &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                  &lt;/xsl:when&gt;
                                                  &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xsl:otherwise&gt;
                                                  &lt;/xsl:choose&gt;
                                                  &lt;/xd:i&gt;
                                                &lt;/xsl:when&gt;
                                                &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                &lt;/xsl:otherwise&gt;
                                            &lt;/xsl:choose&gt;
                                        &lt;/xd:b&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:when test="$wrapin-i"&gt;
                                        &lt;xd:i&gt;
                                            &lt;xsl:choose&gt;
                                                &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                &lt;/xsl:when&gt;
                                                &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                &lt;/xsl:otherwise&gt;
                                            &lt;/xsl:choose&gt;
                                        &lt;/xd:i&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:when test="$wrapin-a"&gt;
                                        &lt;xd:a&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                            &lt;/xsl:apply-templates&gt;
                                        &lt;/xd:a&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                            &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                        &lt;/xsl:apply-templates&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xd:p&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="$wrapin-b"&gt;
                            &lt;xd:b&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="$wrapin-i"&gt;
                                        &lt;xd:i&gt;
                                            &lt;xsl:choose&gt;
                                                &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                &lt;/xsl:when&gt;
                                                &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                &lt;/xsl:otherwise&gt;
                                            &lt;/xsl:choose&gt;
                                        &lt;/xd:i&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:when test="$wrapin-a"&gt;
                                        &lt;xd:a&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                            &lt;/xsl:apply-templates&gt;
                                        &lt;/xd:a&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                            &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                        &lt;/xsl:apply-templates&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xd:b&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="$wrapin-i"&gt;
                            &lt;xd:i&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="$wrapin-a"&gt;
                                        &lt;xd:a&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                            &lt;/xsl:apply-templates&gt;
                                        &lt;/xd:a&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                            &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                        &lt;/xsl:apply-templates&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xd:i&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="$wrapin-a"&gt;
                            &lt;xd:a&gt;
                                &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                    &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                &lt;/xsl:apply-templates&gt;
                            &lt;/xd:a&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xsl:otherwise&gt;
            &lt;/xsl:choose&gt;
        &lt;/xsl:for-each-group&gt;
    &lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;&lt;/codeblock&gt;
    &lt;xsl:template name="since"&gt;
        &lt;xsl:if test="child::*[local-name()='since' and string-length(normalize-space(./text()))&amp;gt;0]"&gt;
            &lt;xd:since&gt;
                &lt;xsl:value-of select="child::*[local-name()='since' and string-length(normalize-space(./text()))&amp;gt;0]"/&gt;
            &lt;/xd:since&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;codeblock&gt;&lt;xsl:stylesheet version="2.0"&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Identity template.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template match="@*|node()"&gt;
        &lt;xsl:copy&gt;
            &lt;xsl:apply-templates select="@*|node()"/&gt;
        &lt;/xsl:copy&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Matches each xd:doc element.&lt;/xd:short&gt;&lt;xd:detail&gt;
        
        Determines what code is being documented and calls appropriate templates for: &lt;xd:ul&gt;
                &lt;xd:li&gt;short description (xd:short)&lt;/xd:li&gt;
                &lt;xd:li&gt;detailed description (xd:detail)&lt;/xd:li&gt;
                &lt;xd:li&gt;authors (xd:author)&lt;/xd:li&gt;
                &lt;xd:li&gt;contributors (xd:contributor)&lt;/xd:li&gt;
                &lt;xd:li&gt;maintainers (xd:maintainer)&lt;/xd:li&gt;
                &lt;xd:li&gt;copyright (xd:copyright)&lt;/xd:li&gt;
                &lt;xd:li&gt;version (xd:version)&lt;/xd:li&gt;
                &lt;xd:li&gt;code existed since version (xd:since)&lt;/xd:li&gt;
                &lt;xd:li&gt;see also (xd:see)&lt;/xd:li&gt;
                &lt;xd:li&gt;deprecated since version (xd:deprecated)&lt;/xd:li&gt;
                &lt;xd:li&gt;import statements (xd:import and xsl:import)&lt;/xd:li&gt;
                &lt;xd:li&gt;include statements (xd:include and xsl:include)&lt;/xd:li&gt;
                &lt;xd:li&gt;parameters (xd:param and xsl:param)&lt;/xd:li&gt;
                &lt;xd:li&gt;return values / output (xd:return)&lt;/xd:li&gt;
            &lt;/xd:ul&gt;
        
        
    &lt;/xd:detail&gt;&lt;xd:return&gt;The normalized xd:doc.&lt;/xd:return&gt;&lt;/xd:doc&gt;
    &lt;xsl:template match="xd:doc"&gt;
        &lt;xsl:copy&gt;
            &lt;xsl:variable name="target"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="@target"&gt;
                        &lt;xsl:value-of select="@target"/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="count(preceding-sibling::*)=0"&gt;
                        &lt;xsl:value-of select="'parent'"/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:value-of select="'following'"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:variable&gt;
            &lt;xsl:variable name="code" select="if ($target='parent') then parent::* else following-sibling::*[1]"/&gt;

            &lt;xsl:attribute name="target" select="$target"/&gt;

            &lt;xsl:call-template name="short"/&gt;
            &lt;xsl:call-template name="detail"/&gt;
            &lt;xsl:call-template name="authors"/&gt;
            &lt;xsl:call-template name="contributors"/&gt;
            &lt;xsl:call-template name="maintainers"/&gt;
            &lt;xsl:call-template name="copyright"/&gt;
            &lt;xsl:call-template name="version"/&gt;
            &lt;xsl:call-template name="since"/&gt;
            &lt;xsl:call-template name="see"/&gt;
            &lt;xsl:call-template name="deprecated"/&gt;
            &lt;xsl:call-template name="import"&gt;
                &lt;xsl:with-param name="code" select="$code"/&gt;
            &lt;/xsl:call-template&gt;
            &lt;xsl:call-template name="include"&gt;
                &lt;xsl:with-param name="code" select="$code"/&gt;
            &lt;/xsl:call-template&gt;
            &lt;xsl:call-template name="param"&gt;
                &lt;xsl:with-param name="code" select="$code"/&gt;
            &lt;/xsl:call-template&gt;
            &lt;xsl:call-template name="return"/&gt;
        &lt;/xsl:copy&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Determines the short description.&lt;/xd:short&gt;&lt;xd:detail&gt;
        
        
            &lt;xd:ul&gt;
                &lt;xd:li&gt;If there is no &amp;lt;xd:short/&amp;gt;-element present, but plain text is present as a
                    child of the &amp;lt;xd:doc/&amp;gt;element, then the first sentence from that text (up
                    until the first period (".") will be used as a short description.&lt;/xd:li&gt;
                &lt;xd:li&gt;Else; if there are multiple &amp;lt;xd:short/&amp;gt;-elements, each one of their
                    contents will be wrapped in separate &amp;lt;section/&amp;gt;s.&lt;/xd:li&gt;
                &lt;xd:li&gt;Else; use the one &amp;lt;xd:short/&amp;gt;-element that is present for the short
                    description.&lt;/xd:li&gt;
            &lt;/xd:ul&gt;
        
    &lt;/xd:detail&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="short"&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="count(child::*[local-name()='short'])&amp;gt;1"&gt;
                &lt;xd:short&gt;
                    &lt;xsl:for-each select="child::*[local-name()='short']"&gt;
                        &lt;xd:section&gt;
                            &lt;xsl:apply-templates mode="section"/&gt;
                        &lt;/xd:section&gt;
                    &lt;/xsl:for-each&gt;
                &lt;/xd:short&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="count(child::*[local-name()='short'])=1"&gt;
                &lt;xd:short&gt;
                    &lt;xsl:apply-templates select="child::*[local-name()='short']/node()" mode="section"/&gt;
                &lt;/xd:short&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="child::text()[string-length(normalize-space())&amp;gt;0]"&gt;
                &lt;xsl:variable name="short" select="replace(normalize-space(child::text()[1]),'^([^\.]+\.?)\s?.*$','$1')"/&gt;
                &lt;xd:short&gt;
                    &lt;xsl:value-of select="$short"/&gt;
                &lt;/xd:short&gt;
            &lt;/xsl:when&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Determines the detailed description.&lt;/xd:short&gt;&lt;xd:detail&gt;
        
        The detailed description will be put together based on any number of
            &amp;lt;xd:detail/&amp;gt;-elements, as well as any number of text nodes that are direct
            children of the &amp;lt;xd:doc/&amp;gt;-element. If the xd:short was extracted from the first
            text node, then the first sentence from that text node will be ignored. If there are
            multiple &amp;lt;xd:detail/&amp;gt; and text nodes, then each of them will be wrapped in
            &amp;lt;xd:section/&amp;gt;s.
    &lt;/xd:detail&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="detail"&gt;
        &lt;xsl:variable name="shortInFirstText" select="count(./*[local-name()='short'])=0"/&gt;
        &lt;xsl:variable name="detailCount" select="(if (matches(normalize-space(./text()[1]),'\.[^\.].')) then 1 else 0) + count(*[local-name()='detail' and (descendant-or-self::node()[self::text() and string-length(normalize-space())&amp;gt;0 or local-name()='pre' and not(ancestor::*[local-name()='pre'])])]) + count(./text()[not(position()=1) and string-length(normalize-space())&amp;gt;0])"/&gt;
        &lt;xsl:if test="$detailCount&amp;gt;0"&gt;
            &lt;xd:detail&gt;
                &lt;xsl:for-each select="*|text()"&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="self::text() and count(preceding-sibling::text()[string-length(normalize-space())&amp;gt;0])=0"&gt;
                            &lt;!-- first text --&gt;
                            &lt;xsl:choose&gt;
                                &lt;xsl:when test="$shortInFirstText"&gt;
                                    &lt;xsl:variable name="detail" select="replace(normalize-space(),'^[^\.]+.?\s?(.*)$','$1')"/&gt;
                                    &lt;xsl:choose&gt;
                                        &lt;xsl:when test="$detailCount&amp;gt;1"&gt;
                                            &lt;xd:section&gt;
                                                &lt;xsl:value-of select="$detail"/&gt;
                                            &lt;/xd:section&gt;
                                        &lt;/xsl:when&gt;
                                        &lt;xsl:otherwise&gt;
                                            &lt;xsl:value-of select="$detail"/&gt;
                                        &lt;/xsl:otherwise&gt;
                                    &lt;/xsl:choose&gt;
                                &lt;/xsl:when&gt;
                                &lt;xsl:otherwise&gt;
                                    &lt;xsl:choose&gt;
                                        &lt;xsl:when test="$detailCount&amp;gt;1"&gt;
                                            &lt;xd:section&gt;
                                                &lt;xsl:value-of select="."/&gt;
                                            &lt;/xd:section&gt;
                                        &lt;/xsl:when&gt;
                                        &lt;xsl:otherwise&gt;
                                            &lt;xsl:value-of select="."/&gt;
                                        &lt;/xsl:otherwise&gt;
                                    &lt;/xsl:choose&gt;
                                &lt;/xsl:otherwise&gt;
                            &lt;/xsl:choose&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="self::text()"&gt;
                            &lt;!-- non-first text --&gt;
                            &lt;xsl:choose&gt;
                                &lt;xsl:when test="$detailCount&amp;gt;1"&gt;
                                    &lt;xd:section&gt;
                                        &lt;xsl:value-of select="."/&gt;
                                    &lt;/xd:section&gt;
                                &lt;/xsl:when&gt;
                                &lt;xsl:otherwise&gt;
                                    &lt;xsl:value-of select="."/&gt;
                                &lt;/xsl:otherwise&gt;
                            &lt;/xsl:choose&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="local-name()='detail'"&gt;
                            &lt;!-- detail element --&gt;
                            &lt;xsl:choose&gt;
                                &lt;xsl:when test="$detailCount&amp;gt;1"&gt;
                                    &lt;xd:section&gt;
                                        &lt;xsl:apply-templates select="child::node()" mode="section"/&gt;
                                    &lt;/xd:section&gt;
                                &lt;/xsl:when&gt;
                                &lt;xsl:otherwise&gt;
                                    &lt;xsl:apply-templates select="child::node()" mode="section"/&gt;
                                &lt;/xsl:otherwise&gt;
                            &lt;/xsl:choose&gt;
                        &lt;/xsl:when&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xsl:for-each&gt;
            &lt;/xd:detail&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes the xd:author-elements.&lt;/xd:short&gt;&lt;xd:detail&gt;&amp;gt;xd:author/&amp;lt;s with no text are removed. &amp;lt;xd:author/&amp;gt;s with no child elements will have their text content wrapped in a &amp;lt;xd:name/&amp;gt; element. Children other than xd:name, xd:mailto and xd:organization are ignored.&lt;/xd:detail&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="authors" xml:id="authors"&gt;
        &lt;xsl:for-each select="*[local-name()='author']"&gt;
            &lt;xsl:variable name="is-empty" select="count(descendant-or-self::text()[string-length(normalize-space())&amp;gt;0])=0"/&gt;
            &lt;xsl:if test="not($is-empty)"&gt;
                &lt;xd:author&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="count(child::*)=0"&gt;
                            &lt;xd:name&gt;
                                &lt;xsl:value-of select="."/&gt;
                            &lt;/xd:name&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:if test="child::*[local-name()='name']"&gt;
                                &lt;xd:name&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='name']"/&gt;
                                &lt;/xd:name&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='mailto']"&gt;
                                &lt;xd:mailto&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='mailto']"/&gt;
                                &lt;/xd:mailto&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='organization']"&gt;
                                &lt;xd:organization&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='organization']"/&gt;
                                &lt;/xd:organization&gt;
                            &lt;/xsl:if&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xd:author&gt;
            &lt;/xsl:if&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;&amp;lt;xd:contributor/&amp;gt;s are normalized in the same way as &amp;lt;xd:author/&amp;gt;s&lt;/xd:short&gt;&lt;xd:see&gt;#authors&lt;/xd:see&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="contributors"&gt;
        &lt;xsl:for-each select="*[local-name()='contributor']"&gt;
            &lt;xsl:variable name="is-empty" select="count(descendant-or-self::text()[string-length(normalize-space())&amp;gt;0])=0"/&gt;
            &lt;xsl:if test="not($is-empty)"&gt;
                &lt;xd:contributor&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="count(child::*)=0"&gt;
                            &lt;xd:name&gt;
                                &lt;xsl:value-of select="."/&gt;
                            &lt;/xd:name&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:if test="child::*[local-name()='name']"&gt;
                                &lt;xd:name&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='name']"/&gt;
                                &lt;/xd:name&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='mailto']"&gt;
                                &lt;xd:mailto&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='mailto']"/&gt;
                                &lt;/xd:mailto&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='organization']"&gt;
                                &lt;xd:organization&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='organization']"/&gt;
                                &lt;/xd:organization&gt;
                            &lt;/xsl:if&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xd:contributor&gt;
            &lt;/xsl:if&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;&amp;lt;xd:maintainer/&amp;gt;s are normalized in the same way as &amp;lt;xd:author/&amp;gt;s&lt;/xd:short&gt;&lt;xd:see&gt;#authors&lt;/xd:see&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="maintainers"&gt;
        &lt;xsl:for-each select="*[local-name()='maintainer']"&gt;
            &lt;xsl:variable name="is-empty" select="count(descendant-or-self::text()[string-length(normalize-space())&amp;gt;0])=0"/&gt;
            &lt;xsl:if test="not($is-empty)"&gt;
                &lt;xd:maintainer&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="count(child::*)=0"&gt;
                            &lt;xd:name&gt;
                                &lt;xsl:value-of select="."/&gt;
                            &lt;/xd:name&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:if test="child::*[local-name()='name']"&gt;
                                &lt;xd:name&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='name']"/&gt;
                                &lt;/xd:name&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='mailto']"&gt;
                                &lt;xd:mailto&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='mailto']"/&gt;
                                &lt;/xd:mailto&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='organization']"&gt;
                                &lt;xd:organization&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='organization']"/&gt;
                                &lt;/xd:organization&gt;
                            &lt;/xsl:if&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xd:maintainer&gt;
            &lt;/xsl:if&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes the xd:copyright-element.&lt;/xd:short&gt;&lt;xd:detail&gt;&amp;gt;xd:copyright/&amp;lt;s with no text are removed. &amp;lt;xd:copyright/&amp;gt;s with no child elements will have their text content wrapped in a &amp;lt;xd:name/&amp;gt; element. Children other than xd:year, xd:name, xd:mailto and xd:organization are ignored.&lt;/xd:detail&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="copyright"&gt;
        &lt;xsl:for-each select="*[local-name()='copyright']"&gt;
            &lt;xsl:variable name="is-empty" select="count(descendant-or-self::text()[string-length(normalize-space())&amp;gt;0])=0"/&gt;
            &lt;xsl:if test="not($is-empty)"&gt;
                &lt;xd:copyright&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="count(child::*)=0"&gt;
                            &lt;xd:name&gt;
                                &lt;xsl:value-of select="."/&gt;
                            &lt;/xd:name&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:if test="child::*[local-name()='year']"&gt;
                                &lt;xd:year&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='year']"/&gt;
                                &lt;/xd:year&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='name']"&gt;
                                &lt;xd:name&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='name']"/&gt;
                                &lt;/xd:name&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='mailto']"&gt;
                                &lt;xd:mailto&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='mailto']"/&gt;
                                &lt;/xd:mailto&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='organization']"&gt;
                                &lt;xd:organization&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='organization']"/&gt;
                                &lt;/xd:organization&gt;
                            &lt;/xsl:if&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xd:copyright&gt;
            &lt;/xsl:if&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:version elements.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="version"&gt;
        &lt;xsl:if test="child::*[local-name()='version' and string-length(normalize-space(./text()))&amp;gt;0]"&gt;
            &lt;xd:version&gt;
                &lt;xsl:value-of select="child::*[local-name()='version' and string-length(normalize-space(./text()))&amp;gt;0]"/&gt;
            &lt;/xd:version&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:since elements.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="since"&gt;
        &lt;xsl:if test="child::*[local-name()='since' and string-length(normalize-space(./text()))&amp;gt;0]"&gt;
            &lt;xd:since&gt;
                &lt;xsl:value-of select="child::*[local-name()='since' and string-length(normalize-space(./text()))&amp;gt;0]"/&gt;
            &lt;/xd:since&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:see elements.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="see"&gt;
        &lt;xsl:if test="child::*[local-name()='see' and string-length(normalize-space(./text()))&amp;gt;0]"&gt;
            &lt;xd:see&gt;
                &lt;xsl:value-of select="child::*[local-name()='see' and string-length(normalize-space(./text()))&amp;gt;0]"/&gt;
            &lt;/xd:see&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:deprecated elements.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="deprecated"&gt;
        &lt;xsl:if test="child::*[local-name()='deprecated' and string-length(normalize-space(./text()))&amp;gt;0]"&gt;
            &lt;xd:deprecated&gt;
                &lt;xsl:value-of select="child::*[local-name()='deprecated' and string-length(normalize-space(./text()))&amp;gt;0]"/&gt;
            &lt;/xd:deprecated&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:import elements.&lt;/xd:short&gt;&lt;xd:detail&gt;Will create empty documentation for imports that are not documented, and removes documentation of imports that does not exist in the code.&lt;/xd:detail&gt;&lt;xd:param name="code"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="import"&gt;
        &lt;xsl:param name="code" required="yes"/&gt;
        &lt;xsl:variable name="doc" select="."/&gt;
        &lt;xsl:for-each select="$code/xsl:import"&gt;
            &lt;xsl:variable name="href" select="@href"/&gt;
            &lt;xd:import href="{@href}"&gt;
                &lt;xsl:if test="$doc/*[local-name()='import' and @href=$href]"&gt;
                    &lt;xsl:value-of select="$doc/*[local-name()='import' and @href=$href]"/&gt;
                &lt;/xsl:if&gt;
            &lt;/xd:import&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:include elements.&lt;/xd:short&gt;&lt;xd:detail&gt;Will create empty documentation for includes that are not documented, and removes documentation of includes that does not exist in the code.&lt;/xd:detail&gt;&lt;xd:param name="code"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="include"&gt;
        &lt;xsl:param name="code" required="yes"/&gt;
        &lt;xsl:variable name="doc" select="."/&gt;
        &lt;xsl:for-each select="$code/xsl:include"&gt;
            &lt;xsl:variable name="href" select="@href"/&gt;
            &lt;xd:include href="{@href}"&gt;
                &lt;xsl:if test="$doc/*[local-name()='include' and @href=$href]"&gt;
                    &lt;xsl:value-of select="$doc/*[local-name()='include' and @href=$href]"/&gt;
                &lt;/xsl:if&gt;
            &lt;/xd:include&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:import elements.&lt;/xd:short&gt;&lt;xd:detail&gt;Will create empty documentation for imports that are not documented, and removes documentation of imports that does not exist in the code.&lt;/xd:detail&gt;&lt;xd:param name="code"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="param"&gt;
        &lt;xsl:param name="code" required="yes"/&gt;
        &lt;xsl:variable name="doc" select="."/&gt;
        &lt;xsl:for-each select="*[local-name()='param']"&gt;
            &lt;xd:param&gt;
                &lt;xsl:apply-templates select="@*"/&gt;
                &lt;xsl:apply-templates mode="section" select="node()"/&gt;
            &lt;/xd:param&gt;
        &lt;/xsl:for-each&gt;
        &lt;xsl:for-each select="$code/xsl:param"&gt;
            &lt;xsl:variable name="name" select="@name"/&gt;
            &lt;xsl:if test="not($doc/*[local-name()='param' and @name=$name])"&gt;
                &lt;xd:param name="{@name}"/&gt;
            &lt;/xsl:if&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Describes the result of the code.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="return"&gt;
        &lt;xsl:variable name="is-empty" select="count(*[local-name()='return']/descendant-or-self::node()[self::text() and string-length(normalize-space())&amp;gt;0 or local-name()='pre'])=0"/&gt;
        &lt;xsl:if test="not($is-empty)"&gt;
            &lt;xd:return&gt;
                &lt;xsl:apply-templates mode="section" select="*[local-name()='return']/node()"/&gt;
            &lt;/xd:return&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Matches all elements when in "section"-mode.&lt;/xd:short&gt;&lt;xd:detail&gt;
        
        Checks all child elements and their descendants and wraps and handles as is
            appropriate. If a child or descendant is placed in a problematic position, then one of
            the unwrap*-templates are called to solve the problem. Otherwise, just make sure that
            the element is in the correct namespace and copy it.
    &lt;/xd:detail&gt;&lt;xd:param name="wrapin-p"/&gt;&lt;xd:param name="wrapin-ul"/&gt;&lt;xd:param name="wrapin-li"/&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template mode="section" match="@*|node()"&gt;
        &lt;xsl:param name="wrapin-p" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-ul" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-li" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:variable name="is-empty" select="count(descendant-or-self::node()[self::text() and string-length(normalize-space())&amp;gt;0 or local-name()='pre'])=0"/&gt;
        &lt;xsl:variable name="contains-section" select="count(descendant::*[local-name()='section'])&amp;gt;0"/&gt;
        &lt;xsl:variable name="contains-block" select="count(descendant::*[local-name()='ul' or local-name()='li' or local-name()='pre' or local-name()='p'])&amp;gt;0"/&gt;
        &lt;xsl:variable name="contains-block-non-li" select="count(descendant::*[local-name()='ul' or local-name()='pre' or local-name()='p'])&amp;gt;0"/&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="local-name()='section'"&gt;
                &lt;xd:section&gt;
                    &lt;xsl:apply-templates mode="section" select="@*|node()"/&gt;
                &lt;/xd:section&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='p'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$contains-section or $contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-p" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:p&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:p&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='pre'"&gt;
                &lt;xd:pre&gt;
                    &lt;xsl:copy-of select="@*|node()"/&gt;
                &lt;/xd:pre&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='ul'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-section"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$contains-block-non-li"&gt;
                        &lt;xd:section&gt;
                            &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                                &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                            &lt;/xsl:call-template&gt;
                        &lt;/xd:section&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="count(descendant::*[local-name()='li'])=0"&gt;
                        &lt;xsl:choose&gt;
                            &lt;xsl:when test="count(child::node()[self::* or self::text() and string-length(normalize-space())&amp;gt;0])&amp;gt;1"&gt;
                                &lt;xd:section&gt;
                                    &lt;xsl:apply-templates mode="section" select="@*|node()"&gt;
                                        &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                                        &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                                    &lt;/xsl:apply-templates&gt;
                                &lt;/xd:section&gt;
                            &lt;/xsl:when&gt;
                            &lt;xsl:otherwise&gt;
                                &lt;xsl:apply-templates mode="section" select="@*|node()"&gt;
                                    &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                                &lt;/xsl:apply-templates&gt;
                            &lt;/xsl:otherwise&gt;
                        &lt;/xsl:choose&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:ul&gt;
                            &lt;xsl:apply-templates mode="list" select="@*|node()"&gt;
                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:ul&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='li'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-section"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:ul&gt;
                            &lt;xd:li&gt;
                                &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                            &lt;/xd:li&gt;
                        &lt;/xd:ul&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='b'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-section"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-b" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-b" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:b&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:b&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='i'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-section"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-i" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-i" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:i&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:i&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='a'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-section"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-a" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-a-elem" select="." tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-a" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-a-elem" select="." tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:a&gt;
                            &lt;xsl:apply-templates select="@*"/&gt;
                            &lt;xsl:apply-templates mode="phrase" select="node()"/&gt;
                        &lt;/xd:a&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="self::*"&gt;
                        &lt;xsl:choose&gt;
                            &lt;xsl:when test="not(preceding-sibling::*) and not(following-sibling::*)"&gt;
                                &lt;xsl:apply-templates mode="section" select="@*|node()"/&gt;
                            &lt;/xsl:when&gt;
                            &lt;xsl:otherwise&gt;
                                &lt;xd:section&gt;
                                    &lt;xsl:apply-templates mode="section" select="@*|node()"/&gt;
                                &lt;/xd:section&gt;
                            &lt;/xsl:otherwise&gt;
                        &lt;/xsl:choose&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="self::text()"&gt;
                        &lt;xsl:copy/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="section" select="@*|node()"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Handles non-problematic lists.&lt;/xd:short&gt;&lt;xd:param name="wrapin-p"/&gt;&lt;xd:param name="wrapin-ul"/&gt;&lt;xd:param name="wrapin-li"/&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template mode="list" match="@*|node()"&gt;
        &lt;xsl:param name="wrapin-p" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-ul" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-li" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:variable name="is-empty" select="count(descendant-or-self::node()[self::text() and string-length(normalize-space())&amp;gt;0 or local-name()='pre'])=0"/&gt;
        &lt;xsl:variable name="contains-block" select="count(descendant::*[local-name()='ul' or local-name()='li' or local-name()='pre' or local-name()='p'])&amp;gt;0"/&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="local-name()='li'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$wrapin-ul"&gt;
                        &lt;xd:ul&gt;
                            &lt;xd:li&gt;
                                &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                            &lt;/xd:li&gt;
                        &lt;/xd:ul&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:li&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:li&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="self::text()"&gt;
                        &lt;xsl:copy/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="list" select="@*|node()"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Handles all elements when in "block" mode and applies fixes where needed.&lt;/xd:short&gt;&lt;xd:param name="wrapin-p"/&gt;&lt;xd:param name="wrapin-ul"/&gt;&lt;xd:param name="wrapin-li"/&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template mode="block" match="@*|node()"&gt;
        &lt;xsl:param name="wrapin-p" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-ul" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-li" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:variable name="element" select="."/&gt;
        &lt;xsl:variable name="is-empty" select="count(descendant-or-self::node()[self::* or self::text() and string-length(normalize-space())&amp;gt;0])=0"/&gt;
        &lt;xsl:variable name="contains-block" select="count(descendant::*[local-name()='ul' or local-name()='li' or local-name()='pre' or local-name()='p'])&amp;gt;0"/&gt;
        &lt;xsl:variable name="contains-block-non-li" select="count(descendant::*[local-name()='ul' or local-name()='pre' or local-name()='p'])&amp;gt;0"/&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="local-name()='p'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:p&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:p&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='pre'"&gt;
                &lt;xd:pre&gt;
                    &lt;xsl:copy-of select="@*|node()"/&gt;
                &lt;/xd:pre&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='ul'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block-non-li"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="count(descendant::*[local-name()='li' and string-length(normalize-space(descendant-or-self::text()))&amp;gt;0])=0"&gt;
                        &lt;xsl:apply-templates mode="block" select="@*|node()"/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:ul&gt;
                            &lt;xsl:apply-templates mode="list" select="@*|node()"&gt;
                                &lt;xsl:with-param name="wrapin-ul" select="false()"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:ul&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='li'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:ul&gt;
                            &lt;xd:li&gt;
                                &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                                    &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                &lt;/xsl:apply-templates&gt;
                            &lt;/xd:li&gt;
                        &lt;/xd:ul&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="not($contains-block) and $wrapin-p"&gt;
                &lt;xd:p&gt;
                    &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                        &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                        &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                        &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                    &lt;/xsl:apply-templates&gt;
                &lt;/xd:p&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="not($contains-block) and $wrapin-li"&gt;
                &lt;xd:ul&gt;
                    &lt;xd:li&gt;
                        &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                            &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xd:li&gt;
                &lt;/xd:ul&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='b'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-b" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:b&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:b&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='i'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-i" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:i&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:i&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='a'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-a" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-a-elem" select="$element" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:a&gt;
                            &lt;xsl:apply-templates mode="phrase" select="$element/@*"/&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:a&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="self::text()"&gt;
                        &lt;xsl:copy/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="block" select="@*|node()"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Phrases are matched with this template (mode="phrase") and handled appropriately.&lt;/xd:short&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template mode="phrase" match="@*|node()"&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="local-name()='b'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='b'])"&gt;
                        &lt;xd:b&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:b&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="$wrapin-b"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='b'])"&gt;
                        &lt;xd:b&gt;
                            &lt;xsl:apply-templates mode="phrase" select="."&gt;
                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:b&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="."&gt;
                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='i'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='i'])"&gt;
                        &lt;xd:i&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:i&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="$wrapin-i"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='i'])"&gt;
                        &lt;xd:i&gt;
                            &lt;xsl:apply-templates mode="phrase" select="."&gt;
                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:i&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="."&gt;
                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='a'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='a'])"&gt;
                        &lt;xd:a&gt;
                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                            &lt;xsl:apply-templates mode="phrase" select="node()"&gt;
                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:a&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="$wrapin-a"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='a'])"&gt;
                        &lt;xd:a&gt;
                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                            &lt;xsl:apply-templates mode="phrase" select="."&gt;
                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:a&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="."&gt;
                            &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="self::text()"&gt;
                        &lt;xsl:copy/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;This template unwraps problematic elements into sections.&lt;/xd:short&gt;&lt;xd:param name="wasWrapped"/&gt;&lt;xd:param name="wrapin-p"/&gt;&lt;xd:param name="wrapin-ul"/&gt;&lt;xd:param name="wrapin-li"/&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="unwrap-to-sections"&gt;
        &lt;xsl:param name="wasWrapped" select="false()"/&gt;
        &lt;xsl:param name="wrapin-p" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-ul" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-li" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:variable name="element" select="."/&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="not($wasWrapped) and count(child::node()[self::* or self::text() and string-length(normalize-space())&amp;gt;0])&amp;gt;1"&gt;
                &lt;xd:section&gt;
                    &lt;xsl:call-template name="unwrap-to-sections"&gt;
                        &lt;xsl:with-param name="wasWrapped" select="true()"/&gt;
                    &lt;/xsl:call-template&gt;
                &lt;/xd:section&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
                &lt;xsl:for-each-group select="child::node()[self::* or self::text() and string-length(normalize-space())&amp;gt;0]" group-adjacent="self::* and not(ancestor::*[local-name()='pre']) and (local-name()='section' or local-name()='ul' or local-name()='li' or local-name()='pre' or local-name()='p')"&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="current-grouping-key()"&gt;
                            &lt;xsl:choose&gt;
                                &lt;xsl:when test="count(current-group())&amp;gt;1 and last()&amp;gt;1"&gt;
                                    &lt;xd:section&gt;
                                        &lt;xsl:apply-templates mode="section" select="current-group()"&gt;
                                            &lt;xsl:with-param name="wrapin-p" tunnel="yes" select="if ($wrapin-p or local-name($element)='p') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-ul" tunnel="yes" select="if ($wrapin-ul or local-name($element)='ul') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-li" tunnel="yes" select="if ($wrapin-li or local-name($element)='li') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-b" tunnel="yes" select="if ($wrapin-b or local-name($element)='b') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-i" tunnel="yes" select="if ($wrapin-i or local-name($element)='i') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-a" tunnel="yes" select="if ($wrapin-a or local-name($element)='a') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-a-elem" tunnel="yes" select="if (not($wrapin-a) and local-name($element)='a') then $element else false()"/&gt;
                                        &lt;/xsl:apply-templates&gt;
                                    &lt;/xd:section&gt;
                                &lt;/xsl:when&gt;
                                &lt;xsl:otherwise&gt;
                                    &lt;xsl:apply-templates mode="section" select="current-group()"&gt;
                                        &lt;xsl:with-param name="wrapin-p" tunnel="yes" select="if ($wrapin-p or local-name($element)='p') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-ul" tunnel="yes" select="if ($wrapin-ul or local-name($element)='ul') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-li" tunnel="yes" select="if ($wrapin-li or local-name($element)='li') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-b" tunnel="yes" select="if ($wrapin-b or local-name($element)='b') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-i" tunnel="yes" select="if ($wrapin-i or local-name($element)='i') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-a" tunnel="yes" select="if ($wrapin-a or local-name($element)='a') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-a-elem" tunnel="yes" select="if (not($wrapin-a) and local-name($element)='a') then $element else false()"/&gt;
                                    &lt;/xsl:apply-templates&gt;
                                &lt;/xsl:otherwise&gt;
                            &lt;/xsl:choose&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:element name="xd:{local-name($element)}"&gt;
                                &lt;xsl:for-each select="$element/@*"&gt;
                                    &lt;xsl:attribute name="xd:{local-name()}" select="."/&gt;
                                &lt;/xsl:for-each&gt;
                                &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                    &lt;xsl:with-param name="wrapin-p" tunnel="yes" select="if ($wrapin-p or local-name($element)='p') then false() else $wrapin-p"/&gt;
                                    &lt;xsl:with-param name="wrapin-ul" tunnel="yes" select="if ($wrapin-ul or local-name($element)='ul') then false() else $wrapin-ul"/&gt;
                                    &lt;xsl:with-param name="wrapin-li" tunnel="yes" select="if ($wrapin-li or local-name($element)='li') then false() else $wrapin-li"/&gt;
                                    &lt;xsl:with-param name="wrapin-b" tunnel="yes" select="if ($wrapin-b or local-name($element)='b') then false() else $wrapin-b"/&gt;
                                    &lt;xsl:with-param name="wrapin-i" tunnel="yes" select="if ($wrapin-i or local-name($element)='i') then false() else $wrapin-i"/&gt;
                                    &lt;xsl:with-param name="wrapin-a" tunnel="yes" select="if ($wrapin-a or local-name($element)='a') then false() else $wrapin-a"/&gt;
                                &lt;/xsl:apply-templates&gt;
                            &lt;/xsl:element&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xsl:for-each-group&gt;
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;This template unwraps problematic elements into blocks.&lt;/xd:short&gt;&lt;xd:param name="wrapin-p"/&gt;&lt;xd:param name="wrapin-ul"/&gt;&lt;xd:param name="wrapin-li"/&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="unwrap-to-blocks"&gt;
        &lt;xsl:param name="wrapin-p" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-ul" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-li" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:variable name="element" select="."/&gt;
        &lt;xsl:for-each-group select="child::node()[self::* or self::text() and string-length(normalize-space())&amp;gt;0]" group-adjacent="count(descendant-or-self::*[local-name()='ul' or local-name()='li' or local-name()='pre' or local-name()='p'])&amp;gt;0"&gt;
            &lt;xsl:choose&gt;
                &lt;xsl:when test="current-grouping-key()"&gt;
                    &lt;xsl:for-each select="current-group()"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-p" select="$wrapin-p or local-name()='p' or local-name($element)='p'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="$wrapin-ul or local-name()='ul' or local-name($element)='ul'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="$wrapin-li or local-name()='li' or local-name($element)='li'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-b" select="$wrapin-b or local-name()='b' or local-name($element)='b'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-i" select="$wrapin-i or local-name()='i' or local-name($element)='i'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-a" select="$wrapin-a or local-name()='a' or local-name($element)='a'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-a-elem" select="if (local-name()='a') then . else (if (local-name($element)='a') then $element else $wrapin-a-elem)" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:for-each&gt;
                &lt;/xsl:when&gt;
                &lt;xsl:otherwise&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="$wrapin-p"&gt;
                            &lt;xd:p&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="$wrapin-b"&gt;
                                        &lt;xd:b&gt;
                                            &lt;xsl:choose&gt;
                                                &lt;xsl:when test="$wrapin-i"&gt;
                                                  &lt;xd:i&gt;
                                                  &lt;xsl:choose&gt;
                                                  &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                  &lt;/xsl:when&gt;
                                                  &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xsl:otherwise&gt;
                                                  &lt;/xsl:choose&gt;
                                                  &lt;/xd:i&gt;
                                                &lt;/xsl:when&gt;
                                                &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                &lt;/xsl:otherwise&gt;
                                            &lt;/xsl:choose&gt;
                                        &lt;/xd:b&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:when test="$wrapin-i"&gt;
                                        &lt;xd:i&gt;
                                            &lt;xsl:choose&gt;
                                                &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                &lt;/xsl:when&gt;
                                                &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                &lt;/xsl:otherwise&gt;
                                            &lt;/xsl:choose&gt;
                                        &lt;/xd:i&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:when test="$wrapin-a"&gt;
                                        &lt;xd:a&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                            &lt;/xsl:apply-templates&gt;
                                        &lt;/xd:a&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                            &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                        &lt;/xsl:apply-templates&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xd:p&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="$wrapin-li"&gt;
                            &lt;xd:ul&gt;
                                &lt;xd:li&gt;
                                    &lt;xsl:choose&gt;
                                        &lt;xsl:when test="$wrapin-b"&gt;
                                            &lt;xd:b&gt;
                                                &lt;xsl:choose&gt;
                                                  &lt;xsl:when test="$wrapin-i"&gt;
                                                  &lt;xd:i&gt;
                                                  &lt;xsl:choose&gt;
                                                  &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                  &lt;/xsl:when&gt;
                                                  &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xsl:otherwise&gt;
                                                  &lt;/xsl:choose&gt;
                                                  &lt;/xd:i&gt;
                                                  &lt;/xsl:when&gt;
                                                  &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xsl:otherwise&gt;
                                                &lt;/xsl:choose&gt;
                                            &lt;/xd:b&gt;
                                        &lt;/xsl:when&gt;
                                        &lt;xsl:when test="$wrapin-i"&gt;
                                            &lt;xd:i&gt;
                                                &lt;xsl:choose&gt;
                                                  &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                  &lt;/xsl:when&gt;
                                                  &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xsl:otherwise&gt;
                                                &lt;/xsl:choose&gt;
                                            &lt;/xd:i&gt;
                                        &lt;/xsl:when&gt;
                                        &lt;xsl:when test="$wrapin-a"&gt;
                                            &lt;xd:a&gt;
                                                &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                &lt;/xsl:apply-templates&gt;
                                            &lt;/xd:a&gt;
                                        &lt;/xsl:when&gt;
                                        &lt;xsl:otherwise&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                            &lt;/xsl:apply-templates&gt;
                                        &lt;/xsl:otherwise&gt;
                                    &lt;/xsl:choose&gt;
                                &lt;/xd:li&gt;
                            &lt;/xd:ul&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="$wrapin-ul"&gt;
                            &lt;xd:p&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="$wrapin-b"&gt;
                                        &lt;xd:b&gt;
                                            &lt;xsl:choose&gt;
                                                &lt;xsl:when test="$wrapin-i"&gt;
                                                  &lt;xd:i&gt;
                                                  &lt;xsl:choose&gt;
                                                  &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                  &lt;/xsl:when&gt;
                                                  &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xsl:otherwise&gt;
                                                  &lt;/xsl:choose&gt;
                                                  &lt;/xd:i&gt;
                                                &lt;/xsl:when&gt;
                                                &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                &lt;/xsl:otherwise&gt;
                                            &lt;/xsl:choose&gt;
                                        &lt;/xd:b&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:when test="$wrapin-i"&gt;
                                        &lt;xd:i&gt;
                                            &lt;xsl:choose&gt;
                                                &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                &lt;/xsl:when&gt;
                                                &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                &lt;/xsl:otherwise&gt;
                                            &lt;/xsl:choose&gt;
                                        &lt;/xd:i&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:when test="$wrapin-a"&gt;
                                        &lt;xd:a&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                            &lt;/xsl:apply-templates&gt;
                                        &lt;/xd:a&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                            &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                        &lt;/xsl:apply-templates&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xd:p&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="$wrapin-b"&gt;
                            &lt;xd:b&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="$wrapin-i"&gt;
                                        &lt;xd:i&gt;
                                            &lt;xsl:choose&gt;
                                                &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                &lt;/xsl:when&gt;
                                                &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                &lt;/xsl:otherwise&gt;
                                            &lt;/xsl:choose&gt;
                                        &lt;/xd:i&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:when test="$wrapin-a"&gt;
                                        &lt;xd:a&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                            &lt;/xsl:apply-templates&gt;
                                        &lt;/xd:a&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                            &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                        &lt;/xsl:apply-templates&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xd:b&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="$wrapin-i"&gt;
                            &lt;xd:i&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="$wrapin-a"&gt;
                                        &lt;xd:a&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                            &lt;/xsl:apply-templates&gt;
                                        &lt;/xd:a&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                            &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                        &lt;/xsl:apply-templates&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xd:i&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="$wrapin-a"&gt;
                            &lt;xd:a&gt;
                                &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                    &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                &lt;/xsl:apply-templates&gt;
                            &lt;/xd:a&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xsl:otherwise&gt;
            &lt;/xsl:choose&gt;
        &lt;/xsl:for-each-group&gt;
    &lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;&lt;/codeblock&gt;
    &lt;xsl:template name="see"&gt;
        &lt;xsl:if test="child::*[local-name()='see' and string-length(normalize-space(./text()))&amp;gt;0]"&gt;
            &lt;xd:see&gt;
                &lt;xsl:value-of select="child::*[local-name()='see' and string-length(normalize-space(./text()))&amp;gt;0]"/&gt;
            &lt;/xd:see&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;codeblock&gt;&lt;xsl:stylesheet version="2.0"&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Identity template.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template match="@*|node()"&gt;
        &lt;xsl:copy&gt;
            &lt;xsl:apply-templates select="@*|node()"/&gt;
        &lt;/xsl:copy&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Matches each xd:doc element.&lt;/xd:short&gt;&lt;xd:detail&gt;
        
        Determines what code is being documented and calls appropriate templates for: &lt;xd:ul&gt;
                &lt;xd:li&gt;short description (xd:short)&lt;/xd:li&gt;
                &lt;xd:li&gt;detailed description (xd:detail)&lt;/xd:li&gt;
                &lt;xd:li&gt;authors (xd:author)&lt;/xd:li&gt;
                &lt;xd:li&gt;contributors (xd:contributor)&lt;/xd:li&gt;
                &lt;xd:li&gt;maintainers (xd:maintainer)&lt;/xd:li&gt;
                &lt;xd:li&gt;copyright (xd:copyright)&lt;/xd:li&gt;
                &lt;xd:li&gt;version (xd:version)&lt;/xd:li&gt;
                &lt;xd:li&gt;code existed since version (xd:since)&lt;/xd:li&gt;
                &lt;xd:li&gt;see also (xd:see)&lt;/xd:li&gt;
                &lt;xd:li&gt;deprecated since version (xd:deprecated)&lt;/xd:li&gt;
                &lt;xd:li&gt;import statements (xd:import and xsl:import)&lt;/xd:li&gt;
                &lt;xd:li&gt;include statements (xd:include and xsl:include)&lt;/xd:li&gt;
                &lt;xd:li&gt;parameters (xd:param and xsl:param)&lt;/xd:li&gt;
                &lt;xd:li&gt;return values / output (xd:return)&lt;/xd:li&gt;
            &lt;/xd:ul&gt;
        
        
    &lt;/xd:detail&gt;&lt;xd:return&gt;The normalized xd:doc.&lt;/xd:return&gt;&lt;/xd:doc&gt;
    &lt;xsl:template match="xd:doc"&gt;
        &lt;xsl:copy&gt;
            &lt;xsl:variable name="target"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="@target"&gt;
                        &lt;xsl:value-of select="@target"/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="count(preceding-sibling::*)=0"&gt;
                        &lt;xsl:value-of select="'parent'"/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:value-of select="'following'"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:variable&gt;
            &lt;xsl:variable name="code" select="if ($target='parent') then parent::* else following-sibling::*[1]"/&gt;

            &lt;xsl:attribute name="target" select="$target"/&gt;

            &lt;xsl:call-template name="short"/&gt;
            &lt;xsl:call-template name="detail"/&gt;
            &lt;xsl:call-template name="authors"/&gt;
            &lt;xsl:call-template name="contributors"/&gt;
            &lt;xsl:call-template name="maintainers"/&gt;
            &lt;xsl:call-template name="copyright"/&gt;
            &lt;xsl:call-template name="version"/&gt;
            &lt;xsl:call-template name="since"/&gt;
            &lt;xsl:call-template name="see"/&gt;
            &lt;xsl:call-template name="deprecated"/&gt;
            &lt;xsl:call-template name="import"&gt;
                &lt;xsl:with-param name="code" select="$code"/&gt;
            &lt;/xsl:call-template&gt;
            &lt;xsl:call-template name="include"&gt;
                &lt;xsl:with-param name="code" select="$code"/&gt;
            &lt;/xsl:call-template&gt;
            &lt;xsl:call-template name="param"&gt;
                &lt;xsl:with-param name="code" select="$code"/&gt;
            &lt;/xsl:call-template&gt;
            &lt;xsl:call-template name="return"/&gt;
        &lt;/xsl:copy&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Determines the short description.&lt;/xd:short&gt;&lt;xd:detail&gt;
        
        
            &lt;xd:ul&gt;
                &lt;xd:li&gt;If there is no &amp;lt;xd:short/&amp;gt;-element present, but plain text is present as a
                    child of the &amp;lt;xd:doc/&amp;gt;element, then the first sentence from that text (up
                    until the first period (".") will be used as a short description.&lt;/xd:li&gt;
                &lt;xd:li&gt;Else; if there are multiple &amp;lt;xd:short/&amp;gt;-elements, each one of their
                    contents will be wrapped in separate &amp;lt;section/&amp;gt;s.&lt;/xd:li&gt;
                &lt;xd:li&gt;Else; use the one &amp;lt;xd:short/&amp;gt;-element that is present for the short
                    description.&lt;/xd:li&gt;
            &lt;/xd:ul&gt;
        
    &lt;/xd:detail&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="short"&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="count(child::*[local-name()='short'])&amp;gt;1"&gt;
                &lt;xd:short&gt;
                    &lt;xsl:for-each select="child::*[local-name()='short']"&gt;
                        &lt;xd:section&gt;
                            &lt;xsl:apply-templates mode="section"/&gt;
                        &lt;/xd:section&gt;
                    &lt;/xsl:for-each&gt;
                &lt;/xd:short&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="count(child::*[local-name()='short'])=1"&gt;
                &lt;xd:short&gt;
                    &lt;xsl:apply-templates select="child::*[local-name()='short']/node()" mode="section"/&gt;
                &lt;/xd:short&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="child::text()[string-length(normalize-space())&amp;gt;0]"&gt;
                &lt;xsl:variable name="short" select="replace(normalize-space(child::text()[1]),'^([^\.]+\.?)\s?.*$','$1')"/&gt;
                &lt;xd:short&gt;
                    &lt;xsl:value-of select="$short"/&gt;
                &lt;/xd:short&gt;
            &lt;/xsl:when&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Determines the detailed description.&lt;/xd:short&gt;&lt;xd:detail&gt;
        
        The detailed description will be put together based on any number of
            &amp;lt;xd:detail/&amp;gt;-elements, as well as any number of text nodes that are direct
            children of the &amp;lt;xd:doc/&amp;gt;-element. If the xd:short was extracted from the first
            text node, then the first sentence from that text node will be ignored. If there are
            multiple &amp;lt;xd:detail/&amp;gt; and text nodes, then each of them will be wrapped in
            &amp;lt;xd:section/&amp;gt;s.
    &lt;/xd:detail&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="detail"&gt;
        &lt;xsl:variable name="shortInFirstText" select="count(./*[local-name()='short'])=0"/&gt;
        &lt;xsl:variable name="detailCount" select="(if (matches(normalize-space(./text()[1]),'\.[^\.].')) then 1 else 0) + count(*[local-name()='detail' and (descendant-or-self::node()[self::text() and string-length(normalize-space())&amp;gt;0 or local-name()='pre' and not(ancestor::*[local-name()='pre'])])]) + count(./text()[not(position()=1) and string-length(normalize-space())&amp;gt;0])"/&gt;
        &lt;xsl:if test="$detailCount&amp;gt;0"&gt;
            &lt;xd:detail&gt;
                &lt;xsl:for-each select="*|text()"&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="self::text() and count(preceding-sibling::text()[string-length(normalize-space())&amp;gt;0])=0"&gt;
                            &lt;!-- first text --&gt;
                            &lt;xsl:choose&gt;
                                &lt;xsl:when test="$shortInFirstText"&gt;
                                    &lt;xsl:variable name="detail" select="replace(normalize-space(),'^[^\.]+.?\s?(.*)$','$1')"/&gt;
                                    &lt;xsl:choose&gt;
                                        &lt;xsl:when test="$detailCount&amp;gt;1"&gt;
                                            &lt;xd:section&gt;
                                                &lt;xsl:value-of select="$detail"/&gt;
                                            &lt;/xd:section&gt;
                                        &lt;/xsl:when&gt;
                                        &lt;xsl:otherwise&gt;
                                            &lt;xsl:value-of select="$detail"/&gt;
                                        &lt;/xsl:otherwise&gt;
                                    &lt;/xsl:choose&gt;
                                &lt;/xsl:when&gt;
                                &lt;xsl:otherwise&gt;
                                    &lt;xsl:choose&gt;
                                        &lt;xsl:when test="$detailCount&amp;gt;1"&gt;
                                            &lt;xd:section&gt;
                                                &lt;xsl:value-of select="."/&gt;
                                            &lt;/xd:section&gt;
                                        &lt;/xsl:when&gt;
                                        &lt;xsl:otherwise&gt;
                                            &lt;xsl:value-of select="."/&gt;
                                        &lt;/xsl:otherwise&gt;
                                    &lt;/xsl:choose&gt;
                                &lt;/xsl:otherwise&gt;
                            &lt;/xsl:choose&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="self::text()"&gt;
                            &lt;!-- non-first text --&gt;
                            &lt;xsl:choose&gt;
                                &lt;xsl:when test="$detailCount&amp;gt;1"&gt;
                                    &lt;xd:section&gt;
                                        &lt;xsl:value-of select="."/&gt;
                                    &lt;/xd:section&gt;
                                &lt;/xsl:when&gt;
                                &lt;xsl:otherwise&gt;
                                    &lt;xsl:value-of select="."/&gt;
                                &lt;/xsl:otherwise&gt;
                            &lt;/xsl:choose&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="local-name()='detail'"&gt;
                            &lt;!-- detail element --&gt;
                            &lt;xsl:choose&gt;
                                &lt;xsl:when test="$detailCount&amp;gt;1"&gt;
                                    &lt;xd:section&gt;
                                        &lt;xsl:apply-templates select="child::node()" mode="section"/&gt;
                                    &lt;/xd:section&gt;
                                &lt;/xsl:when&gt;
                                &lt;xsl:otherwise&gt;
                                    &lt;xsl:apply-templates select="child::node()" mode="section"/&gt;
                                &lt;/xsl:otherwise&gt;
                            &lt;/xsl:choose&gt;
                        &lt;/xsl:when&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xsl:for-each&gt;
            &lt;/xd:detail&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes the xd:author-elements.&lt;/xd:short&gt;&lt;xd:detail&gt;&amp;gt;xd:author/&amp;lt;s with no text are removed. &amp;lt;xd:author/&amp;gt;s with no child elements will have their text content wrapped in a &amp;lt;xd:name/&amp;gt; element. Children other than xd:name, xd:mailto and xd:organization are ignored.&lt;/xd:detail&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="authors" xml:id="authors"&gt;
        &lt;xsl:for-each select="*[local-name()='author']"&gt;
            &lt;xsl:variable name="is-empty" select="count(descendant-or-self::text()[string-length(normalize-space())&amp;gt;0])=0"/&gt;
            &lt;xsl:if test="not($is-empty)"&gt;
                &lt;xd:author&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="count(child::*)=0"&gt;
                            &lt;xd:name&gt;
                                &lt;xsl:value-of select="."/&gt;
                            &lt;/xd:name&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:if test="child::*[local-name()='name']"&gt;
                                &lt;xd:name&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='name']"/&gt;
                                &lt;/xd:name&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='mailto']"&gt;
                                &lt;xd:mailto&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='mailto']"/&gt;
                                &lt;/xd:mailto&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='organization']"&gt;
                                &lt;xd:organization&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='organization']"/&gt;
                                &lt;/xd:organization&gt;
                            &lt;/xsl:if&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xd:author&gt;
            &lt;/xsl:if&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;&amp;lt;xd:contributor/&amp;gt;s are normalized in the same way as &amp;lt;xd:author/&amp;gt;s&lt;/xd:short&gt;&lt;xd:see&gt;#authors&lt;/xd:see&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="contributors"&gt;
        &lt;xsl:for-each select="*[local-name()='contributor']"&gt;
            &lt;xsl:variable name="is-empty" select="count(descendant-or-self::text()[string-length(normalize-space())&amp;gt;0])=0"/&gt;
            &lt;xsl:if test="not($is-empty)"&gt;
                &lt;xd:contributor&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="count(child::*)=0"&gt;
                            &lt;xd:name&gt;
                                &lt;xsl:value-of select="."/&gt;
                            &lt;/xd:name&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:if test="child::*[local-name()='name']"&gt;
                                &lt;xd:name&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='name']"/&gt;
                                &lt;/xd:name&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='mailto']"&gt;
                                &lt;xd:mailto&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='mailto']"/&gt;
                                &lt;/xd:mailto&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='organization']"&gt;
                                &lt;xd:organization&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='organization']"/&gt;
                                &lt;/xd:organization&gt;
                            &lt;/xsl:if&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xd:contributor&gt;
            &lt;/xsl:if&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;&amp;lt;xd:maintainer/&amp;gt;s are normalized in the same way as &amp;lt;xd:author/&amp;gt;s&lt;/xd:short&gt;&lt;xd:see&gt;#authors&lt;/xd:see&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="maintainers"&gt;
        &lt;xsl:for-each select="*[local-name()='maintainer']"&gt;
            &lt;xsl:variable name="is-empty" select="count(descendant-or-self::text()[string-length(normalize-space())&amp;gt;0])=0"/&gt;
            &lt;xsl:if test="not($is-empty)"&gt;
                &lt;xd:maintainer&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="count(child::*)=0"&gt;
                            &lt;xd:name&gt;
                                &lt;xsl:value-of select="."/&gt;
                            &lt;/xd:name&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:if test="child::*[local-name()='name']"&gt;
                                &lt;xd:name&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='name']"/&gt;
                                &lt;/xd:name&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='mailto']"&gt;
                                &lt;xd:mailto&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='mailto']"/&gt;
                                &lt;/xd:mailto&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='organization']"&gt;
                                &lt;xd:organization&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='organization']"/&gt;
                                &lt;/xd:organization&gt;
                            &lt;/xsl:if&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xd:maintainer&gt;
            &lt;/xsl:if&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes the xd:copyright-element.&lt;/xd:short&gt;&lt;xd:detail&gt;&amp;gt;xd:copyright/&amp;lt;s with no text are removed. &amp;lt;xd:copyright/&amp;gt;s with no child elements will have their text content wrapped in a &amp;lt;xd:name/&amp;gt; element. Children other than xd:year, xd:name, xd:mailto and xd:organization are ignored.&lt;/xd:detail&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="copyright"&gt;
        &lt;xsl:for-each select="*[local-name()='copyright']"&gt;
            &lt;xsl:variable name="is-empty" select="count(descendant-or-self::text()[string-length(normalize-space())&amp;gt;0])=0"/&gt;
            &lt;xsl:if test="not($is-empty)"&gt;
                &lt;xd:copyright&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="count(child::*)=0"&gt;
                            &lt;xd:name&gt;
                                &lt;xsl:value-of select="."/&gt;
                            &lt;/xd:name&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:if test="child::*[local-name()='year']"&gt;
                                &lt;xd:year&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='year']"/&gt;
                                &lt;/xd:year&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='name']"&gt;
                                &lt;xd:name&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='name']"/&gt;
                                &lt;/xd:name&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='mailto']"&gt;
                                &lt;xd:mailto&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='mailto']"/&gt;
                                &lt;/xd:mailto&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='organization']"&gt;
                                &lt;xd:organization&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='organization']"/&gt;
                                &lt;/xd:organization&gt;
                            &lt;/xsl:if&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xd:copyright&gt;
            &lt;/xsl:if&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:version elements.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="version"&gt;
        &lt;xsl:if test="child::*[local-name()='version' and string-length(normalize-space(./text()))&amp;gt;0]"&gt;
            &lt;xd:version&gt;
                &lt;xsl:value-of select="child::*[local-name()='version' and string-length(normalize-space(./text()))&amp;gt;0]"/&gt;
            &lt;/xd:version&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:since elements.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="since"&gt;
        &lt;xsl:if test="child::*[local-name()='since' and string-length(normalize-space(./text()))&amp;gt;0]"&gt;
            &lt;xd:since&gt;
                &lt;xsl:value-of select="child::*[local-name()='since' and string-length(normalize-space(./text()))&amp;gt;0]"/&gt;
            &lt;/xd:since&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:see elements.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="see"&gt;
        &lt;xsl:if test="child::*[local-name()='see' and string-length(normalize-space(./text()))&amp;gt;0]"&gt;
            &lt;xd:see&gt;
                &lt;xsl:value-of select="child::*[local-name()='see' and string-length(normalize-space(./text()))&amp;gt;0]"/&gt;
            &lt;/xd:see&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:deprecated elements.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="deprecated"&gt;
        &lt;xsl:if test="child::*[local-name()='deprecated' and string-length(normalize-space(./text()))&amp;gt;0]"&gt;
            &lt;xd:deprecated&gt;
                &lt;xsl:value-of select="child::*[local-name()='deprecated' and string-length(normalize-space(./text()))&amp;gt;0]"/&gt;
            &lt;/xd:deprecated&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:import elements.&lt;/xd:short&gt;&lt;xd:detail&gt;Will create empty documentation for imports that are not documented, and removes documentation of imports that does not exist in the code.&lt;/xd:detail&gt;&lt;xd:param name="code"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="import"&gt;
        &lt;xsl:param name="code" required="yes"/&gt;
        &lt;xsl:variable name="doc" select="."/&gt;
        &lt;xsl:for-each select="$code/xsl:import"&gt;
            &lt;xsl:variable name="href" select="@href"/&gt;
            &lt;xd:import href="{@href}"&gt;
                &lt;xsl:if test="$doc/*[local-name()='import' and @href=$href]"&gt;
                    &lt;xsl:value-of select="$doc/*[local-name()='import' and @href=$href]"/&gt;
                &lt;/xsl:if&gt;
            &lt;/xd:import&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:include elements.&lt;/xd:short&gt;&lt;xd:detail&gt;Will create empty documentation for includes that are not documented, and removes documentation of includes that does not exist in the code.&lt;/xd:detail&gt;&lt;xd:param name="code"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="include"&gt;
        &lt;xsl:param name="code" required="yes"/&gt;
        &lt;xsl:variable name="doc" select="."/&gt;
        &lt;xsl:for-each select="$code/xsl:include"&gt;
            &lt;xsl:variable name="href" select="@href"/&gt;
            &lt;xd:include href="{@href}"&gt;
                &lt;xsl:if test="$doc/*[local-name()='include' and @href=$href]"&gt;
                    &lt;xsl:value-of select="$doc/*[local-name()='include' and @href=$href]"/&gt;
                &lt;/xsl:if&gt;
            &lt;/xd:include&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:import elements.&lt;/xd:short&gt;&lt;xd:detail&gt;Will create empty documentation for imports that are not documented, and removes documentation of imports that does not exist in the code.&lt;/xd:detail&gt;&lt;xd:param name="code"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="param"&gt;
        &lt;xsl:param name="code" required="yes"/&gt;
        &lt;xsl:variable name="doc" select="."/&gt;
        &lt;xsl:for-each select="*[local-name()='param']"&gt;
            &lt;xd:param&gt;
                &lt;xsl:apply-templates select="@*"/&gt;
                &lt;xsl:apply-templates mode="section" select="node()"/&gt;
            &lt;/xd:param&gt;
        &lt;/xsl:for-each&gt;
        &lt;xsl:for-each select="$code/xsl:param"&gt;
            &lt;xsl:variable name="name" select="@name"/&gt;
            &lt;xsl:if test="not($doc/*[local-name()='param' and @name=$name])"&gt;
                &lt;xd:param name="{@name}"/&gt;
            &lt;/xsl:if&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Describes the result of the code.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="return"&gt;
        &lt;xsl:variable name="is-empty" select="count(*[local-name()='return']/descendant-or-self::node()[self::text() and string-length(normalize-space())&amp;gt;0 or local-name()='pre'])=0"/&gt;
        &lt;xsl:if test="not($is-empty)"&gt;
            &lt;xd:return&gt;
                &lt;xsl:apply-templates mode="section" select="*[local-name()='return']/node()"/&gt;
            &lt;/xd:return&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Matches all elements when in "section"-mode.&lt;/xd:short&gt;&lt;xd:detail&gt;
        
        Checks all child elements and their descendants and wraps and handles as is
            appropriate. If a child or descendant is placed in a problematic position, then one of
            the unwrap*-templates are called to solve the problem. Otherwise, just make sure that
            the element is in the correct namespace and copy it.
    &lt;/xd:detail&gt;&lt;xd:param name="wrapin-p"/&gt;&lt;xd:param name="wrapin-ul"/&gt;&lt;xd:param name="wrapin-li"/&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template mode="section" match="@*|node()"&gt;
        &lt;xsl:param name="wrapin-p" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-ul" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-li" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:variable name="is-empty" select="count(descendant-or-self::node()[self::text() and string-length(normalize-space())&amp;gt;0 or local-name()='pre'])=0"/&gt;
        &lt;xsl:variable name="contains-section" select="count(descendant::*[local-name()='section'])&amp;gt;0"/&gt;
        &lt;xsl:variable name="contains-block" select="count(descendant::*[local-name()='ul' or local-name()='li' or local-name()='pre' or local-name()='p'])&amp;gt;0"/&gt;
        &lt;xsl:variable name="contains-block-non-li" select="count(descendant::*[local-name()='ul' or local-name()='pre' or local-name()='p'])&amp;gt;0"/&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="local-name()='section'"&gt;
                &lt;xd:section&gt;
                    &lt;xsl:apply-templates mode="section" select="@*|node()"/&gt;
                &lt;/xd:section&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='p'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$contains-section or $contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-p" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:p&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:p&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='pre'"&gt;
                &lt;xd:pre&gt;
                    &lt;xsl:copy-of select="@*|node()"/&gt;
                &lt;/xd:pre&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='ul'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-section"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$contains-block-non-li"&gt;
                        &lt;xd:section&gt;
                            &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                                &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                            &lt;/xsl:call-template&gt;
                        &lt;/xd:section&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="count(descendant::*[local-name()='li'])=0"&gt;
                        &lt;xsl:choose&gt;
                            &lt;xsl:when test="count(child::node()[self::* or self::text() and string-length(normalize-space())&amp;gt;0])&amp;gt;1"&gt;
                                &lt;xd:section&gt;
                                    &lt;xsl:apply-templates mode="section" select="@*|node()"&gt;
                                        &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                                        &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                                    &lt;/xsl:apply-templates&gt;
                                &lt;/xd:section&gt;
                            &lt;/xsl:when&gt;
                            &lt;xsl:otherwise&gt;
                                &lt;xsl:apply-templates mode="section" select="@*|node()"&gt;
                                    &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                                &lt;/xsl:apply-templates&gt;
                            &lt;/xsl:otherwise&gt;
                        &lt;/xsl:choose&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:ul&gt;
                            &lt;xsl:apply-templates mode="list" select="@*|node()"&gt;
                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:ul&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='li'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-section"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:ul&gt;
                            &lt;xd:li&gt;
                                &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                            &lt;/xd:li&gt;
                        &lt;/xd:ul&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='b'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-section"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-b" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-b" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:b&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:b&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='i'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-section"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-i" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-i" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:i&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:i&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='a'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-section"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-a" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-a-elem" select="." tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-a" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-a-elem" select="." tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:a&gt;
                            &lt;xsl:apply-templates select="@*"/&gt;
                            &lt;xsl:apply-templates mode="phrase" select="node()"/&gt;
                        &lt;/xd:a&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="self::*"&gt;
                        &lt;xsl:choose&gt;
                            &lt;xsl:when test="not(preceding-sibling::*) and not(following-sibling::*)"&gt;
                                &lt;xsl:apply-templates mode="section" select="@*|node()"/&gt;
                            &lt;/xsl:when&gt;
                            &lt;xsl:otherwise&gt;
                                &lt;xd:section&gt;
                                    &lt;xsl:apply-templates mode="section" select="@*|node()"/&gt;
                                &lt;/xd:section&gt;
                            &lt;/xsl:otherwise&gt;
                        &lt;/xsl:choose&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="self::text()"&gt;
                        &lt;xsl:copy/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="section" select="@*|node()"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Handles non-problematic lists.&lt;/xd:short&gt;&lt;xd:param name="wrapin-p"/&gt;&lt;xd:param name="wrapin-ul"/&gt;&lt;xd:param name="wrapin-li"/&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template mode="list" match="@*|node()"&gt;
        &lt;xsl:param name="wrapin-p" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-ul" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-li" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:variable name="is-empty" select="count(descendant-or-self::node()[self::text() and string-length(normalize-space())&amp;gt;0 or local-name()='pre'])=0"/&gt;
        &lt;xsl:variable name="contains-block" select="count(descendant::*[local-name()='ul' or local-name()='li' or local-name()='pre' or local-name()='p'])&amp;gt;0"/&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="local-name()='li'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$wrapin-ul"&gt;
                        &lt;xd:ul&gt;
                            &lt;xd:li&gt;
                                &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                            &lt;/xd:li&gt;
                        &lt;/xd:ul&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:li&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:li&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="self::text()"&gt;
                        &lt;xsl:copy/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="list" select="@*|node()"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Handles all elements when in "block" mode and applies fixes where needed.&lt;/xd:short&gt;&lt;xd:param name="wrapin-p"/&gt;&lt;xd:param name="wrapin-ul"/&gt;&lt;xd:param name="wrapin-li"/&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template mode="block" match="@*|node()"&gt;
        &lt;xsl:param name="wrapin-p" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-ul" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-li" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:variable name="element" select="."/&gt;
        &lt;xsl:variable name="is-empty" select="count(descendant-or-self::node()[self::* or self::text() and string-length(normalize-space())&amp;gt;0])=0"/&gt;
        &lt;xsl:variable name="contains-block" select="count(descendant::*[local-name()='ul' or local-name()='li' or local-name()='pre' or local-name()='p'])&amp;gt;0"/&gt;
        &lt;xsl:variable name="contains-block-non-li" select="count(descendant::*[local-name()='ul' or local-name()='pre' or local-name()='p'])&amp;gt;0"/&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="local-name()='p'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:p&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:p&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='pre'"&gt;
                &lt;xd:pre&gt;
                    &lt;xsl:copy-of select="@*|node()"/&gt;
                &lt;/xd:pre&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='ul'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block-non-li"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="count(descendant::*[local-name()='li' and string-length(normalize-space(descendant-or-self::text()))&amp;gt;0])=0"&gt;
                        &lt;xsl:apply-templates mode="block" select="@*|node()"/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:ul&gt;
                            &lt;xsl:apply-templates mode="list" select="@*|node()"&gt;
                                &lt;xsl:with-param name="wrapin-ul" select="false()"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:ul&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='li'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:ul&gt;
                            &lt;xd:li&gt;
                                &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                                    &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                &lt;/xsl:apply-templates&gt;
                            &lt;/xd:li&gt;
                        &lt;/xd:ul&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="not($contains-block) and $wrapin-p"&gt;
                &lt;xd:p&gt;
                    &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                        &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                        &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                        &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                    &lt;/xsl:apply-templates&gt;
                &lt;/xd:p&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="not($contains-block) and $wrapin-li"&gt;
                &lt;xd:ul&gt;
                    &lt;xd:li&gt;
                        &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                            &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xd:li&gt;
                &lt;/xd:ul&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='b'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-b" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:b&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:b&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='i'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-i" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:i&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:i&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='a'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-a" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-a-elem" select="$element" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:a&gt;
                            &lt;xsl:apply-templates mode="phrase" select="$element/@*"/&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:a&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="self::text()"&gt;
                        &lt;xsl:copy/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="block" select="@*|node()"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Phrases are matched with this template (mode="phrase") and handled appropriately.&lt;/xd:short&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template mode="phrase" match="@*|node()"&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="local-name()='b'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='b'])"&gt;
                        &lt;xd:b&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:b&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="$wrapin-b"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='b'])"&gt;
                        &lt;xd:b&gt;
                            &lt;xsl:apply-templates mode="phrase" select="."&gt;
                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:b&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="."&gt;
                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='i'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='i'])"&gt;
                        &lt;xd:i&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:i&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="$wrapin-i"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='i'])"&gt;
                        &lt;xd:i&gt;
                            &lt;xsl:apply-templates mode="phrase" select="."&gt;
                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:i&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="."&gt;
                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='a'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='a'])"&gt;
                        &lt;xd:a&gt;
                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                            &lt;xsl:apply-templates mode="phrase" select="node()"&gt;
                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:a&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="$wrapin-a"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='a'])"&gt;
                        &lt;xd:a&gt;
                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                            &lt;xsl:apply-templates mode="phrase" select="."&gt;
                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:a&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="."&gt;
                            &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="self::text()"&gt;
                        &lt;xsl:copy/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;This template unwraps problematic elements into sections.&lt;/xd:short&gt;&lt;xd:param name="wasWrapped"/&gt;&lt;xd:param name="wrapin-p"/&gt;&lt;xd:param name="wrapin-ul"/&gt;&lt;xd:param name="wrapin-li"/&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="unwrap-to-sections"&gt;
        &lt;xsl:param name="wasWrapped" select="false()"/&gt;
        &lt;xsl:param name="wrapin-p" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-ul" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-li" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:variable name="element" select="."/&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="not($wasWrapped) and count(child::node()[self::* or self::text() and string-length(normalize-space())&amp;gt;0])&amp;gt;1"&gt;
                &lt;xd:section&gt;
                    &lt;xsl:call-template name="unwrap-to-sections"&gt;
                        &lt;xsl:with-param name="wasWrapped" select="true()"/&gt;
                    &lt;/xsl:call-template&gt;
                &lt;/xd:section&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
                &lt;xsl:for-each-group select="child::node()[self::* or self::text() and string-length(normalize-space())&amp;gt;0]" group-adjacent="self::* and not(ancestor::*[local-name()='pre']) and (local-name()='section' or local-name()='ul' or local-name()='li' or local-name()='pre' or local-name()='p')"&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="current-grouping-key()"&gt;
                            &lt;xsl:choose&gt;
                                &lt;xsl:when test="count(current-group())&amp;gt;1 and last()&amp;gt;1"&gt;
                                    &lt;xd:section&gt;
                                        &lt;xsl:apply-templates mode="section" select="current-group()"&gt;
                                            &lt;xsl:with-param name="wrapin-p" tunnel="yes" select="if ($wrapin-p or local-name($element)='p') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-ul" tunnel="yes" select="if ($wrapin-ul or local-name($element)='ul') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-li" tunnel="yes" select="if ($wrapin-li or local-name($element)='li') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-b" tunnel="yes" select="if ($wrapin-b or local-name($element)='b') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-i" tunnel="yes" select="if ($wrapin-i or local-name($element)='i') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-a" tunnel="yes" select="if ($wrapin-a or local-name($element)='a') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-a-elem" tunnel="yes" select="if (not($wrapin-a) and local-name($element)='a') then $element else false()"/&gt;
                                        &lt;/xsl:apply-templates&gt;
                                    &lt;/xd:section&gt;
                                &lt;/xsl:when&gt;
                                &lt;xsl:otherwise&gt;
                                    &lt;xsl:apply-templates mode="section" select="current-group()"&gt;
                                        &lt;xsl:with-param name="wrapin-p" tunnel="yes" select="if ($wrapin-p or local-name($element)='p') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-ul" tunnel="yes" select="if ($wrapin-ul or local-name($element)='ul') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-li" tunnel="yes" select="if ($wrapin-li or local-name($element)='li') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-b" tunnel="yes" select="if ($wrapin-b or local-name($element)='b') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-i" tunnel="yes" select="if ($wrapin-i or local-name($element)='i') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-a" tunnel="yes" select="if ($wrapin-a or local-name($element)='a') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-a-elem" tunnel="yes" select="if (not($wrapin-a) and local-name($element)='a') then $element else false()"/&gt;
                                    &lt;/xsl:apply-templates&gt;
                                &lt;/xsl:otherwise&gt;
                            &lt;/xsl:choose&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:element name="xd:{local-name($element)}"&gt;
                                &lt;xsl:for-each select="$element/@*"&gt;
                                    &lt;xsl:attribute name="xd:{local-name()}" select="."/&gt;
                                &lt;/xsl:for-each&gt;
                                &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                    &lt;xsl:with-param name="wrapin-p" tunnel="yes" select="if ($wrapin-p or local-name($element)='p') then false() else $wrapin-p"/&gt;
                                    &lt;xsl:with-param name="wrapin-ul" tunnel="yes" select="if ($wrapin-ul or local-name($element)='ul') then false() else $wrapin-ul"/&gt;
                                    &lt;xsl:with-param name="wrapin-li" tunnel="yes" select="if ($wrapin-li or local-name($element)='li') then false() else $wrapin-li"/&gt;
                                    &lt;xsl:with-param name="wrapin-b" tunnel="yes" select="if ($wrapin-b or local-name($element)='b') then false() else $wrapin-b"/&gt;
                                    &lt;xsl:with-param name="wrapin-i" tunnel="yes" select="if ($wrapin-i or local-name($element)='i') then false() else $wrapin-i"/&gt;
                                    &lt;xsl:with-param name="wrapin-a" tunnel="yes" select="if ($wrapin-a or local-name($element)='a') then false() else $wrapin-a"/&gt;
                                &lt;/xsl:apply-templates&gt;
                            &lt;/xsl:element&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xsl:for-each-group&gt;
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;This template unwraps problematic elements into blocks.&lt;/xd:short&gt;&lt;xd:param name="wrapin-p"/&gt;&lt;xd:param name="wrapin-ul"/&gt;&lt;xd:param name="wrapin-li"/&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="unwrap-to-blocks"&gt;
        &lt;xsl:param name="wrapin-p" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-ul" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-li" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:variable name="element" select="."/&gt;
        &lt;xsl:for-each-group select="child::node()[self::* or self::text() and string-length(normalize-space())&amp;gt;0]" group-adjacent="count(descendant-or-self::*[local-name()='ul' or local-name()='li' or local-name()='pre' or local-name()='p'])&amp;gt;0"&gt;
            &lt;xsl:choose&gt;
                &lt;xsl:when test="current-grouping-key()"&gt;
                    &lt;xsl:for-each select="current-group()"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-p" select="$wrapin-p or local-name()='p' or local-name($element)='p'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="$wrapin-ul or local-name()='ul' or local-name($element)='ul'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="$wrapin-li or local-name()='li' or local-name($element)='li'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-b" select="$wrapin-b or local-name()='b' or local-name($element)='b'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-i" select="$wrapin-i or local-name()='i' or local-name($element)='i'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-a" select="$wrapin-a or local-name()='a' or local-name($element)='a'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-a-elem" select="if (local-name()='a') then . else (if (local-name($element)='a') then $element else $wrapin-a-elem)" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:for-each&gt;
                &lt;/xsl:when&gt;
                &lt;xsl:otherwise&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="$wrapin-p"&gt;
                            &lt;xd:p&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="$wrapin-b"&gt;
                                        &lt;xd:b&gt;
                                            &lt;xsl:choose&gt;
                                                &lt;xsl:when test="$wrapin-i"&gt;
                                                  &lt;xd:i&gt;
                                                  &lt;xsl:choose&gt;
                                                  &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                  &lt;/xsl:when&gt;
                                                  &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xsl:otherwise&gt;
                                                  &lt;/xsl:choose&gt;
                                                  &lt;/xd:i&gt;
                                                &lt;/xsl:when&gt;
                                                &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                &lt;/xsl:otherwise&gt;
                                            &lt;/xsl:choose&gt;
                                        &lt;/xd:b&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:when test="$wrapin-i"&gt;
                                        &lt;xd:i&gt;
                                            &lt;xsl:choose&gt;
                                                &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                &lt;/xsl:when&gt;
                                                &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                &lt;/xsl:otherwise&gt;
                                            &lt;/xsl:choose&gt;
                                        &lt;/xd:i&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:when test="$wrapin-a"&gt;
                                        &lt;xd:a&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                            &lt;/xsl:apply-templates&gt;
                                        &lt;/xd:a&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                            &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                        &lt;/xsl:apply-templates&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xd:p&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="$wrapin-li"&gt;
                            &lt;xd:ul&gt;
                                &lt;xd:li&gt;
                                    &lt;xsl:choose&gt;
                                        &lt;xsl:when test="$wrapin-b"&gt;
                                            &lt;xd:b&gt;
                                                &lt;xsl:choose&gt;
                                                  &lt;xsl:when test="$wrapin-i"&gt;
                                                  &lt;xd:i&gt;
                                                  &lt;xsl:choose&gt;
                                                  &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                  &lt;/xsl:when&gt;
                                                  &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xsl:otherwise&gt;
                                                  &lt;/xsl:choose&gt;
                                                  &lt;/xd:i&gt;
                                                  &lt;/xsl:when&gt;
                                                  &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xsl:otherwise&gt;
                                                &lt;/xsl:choose&gt;
                                            &lt;/xd:b&gt;
                                        &lt;/xsl:when&gt;
                                        &lt;xsl:when test="$wrapin-i"&gt;
                                            &lt;xd:i&gt;
                                                &lt;xsl:choose&gt;
                                                  &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                  &lt;/xsl:when&gt;
                                                  &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xsl:otherwise&gt;
                                                &lt;/xsl:choose&gt;
                                            &lt;/xd:i&gt;
                                        &lt;/xsl:when&gt;
                                        &lt;xsl:when test="$wrapin-a"&gt;
                                            &lt;xd:a&gt;
                                                &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                &lt;/xsl:apply-templates&gt;
                                            &lt;/xd:a&gt;
                                        &lt;/xsl:when&gt;
                                        &lt;xsl:otherwise&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                            &lt;/xsl:apply-templates&gt;
                                        &lt;/xsl:otherwise&gt;
                                    &lt;/xsl:choose&gt;
                                &lt;/xd:li&gt;
                            &lt;/xd:ul&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="$wrapin-ul"&gt;
                            &lt;xd:p&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="$wrapin-b"&gt;
                                        &lt;xd:b&gt;
                                            &lt;xsl:choose&gt;
                                                &lt;xsl:when test="$wrapin-i"&gt;
                                                  &lt;xd:i&gt;
                                                  &lt;xsl:choose&gt;
                                                  &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                  &lt;/xsl:when&gt;
                                                  &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xsl:otherwise&gt;
                                                  &lt;/xsl:choose&gt;
                                                  &lt;/xd:i&gt;
                                                &lt;/xsl:when&gt;
                                                &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                &lt;/xsl:otherwise&gt;
                                            &lt;/xsl:choose&gt;
                                        &lt;/xd:b&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:when test="$wrapin-i"&gt;
                                        &lt;xd:i&gt;
                                            &lt;xsl:choose&gt;
                                                &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                &lt;/xsl:when&gt;
                                                &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                &lt;/xsl:otherwise&gt;
                                            &lt;/xsl:choose&gt;
                                        &lt;/xd:i&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:when test="$wrapin-a"&gt;
                                        &lt;xd:a&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                            &lt;/xsl:apply-templates&gt;
                                        &lt;/xd:a&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                            &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                        &lt;/xsl:apply-templates&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xd:p&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="$wrapin-b"&gt;
                            &lt;xd:b&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="$wrapin-i"&gt;
                                        &lt;xd:i&gt;
                                            &lt;xsl:choose&gt;
                                                &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                &lt;/xsl:when&gt;
                                                &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                &lt;/xsl:otherwise&gt;
                                            &lt;/xsl:choose&gt;
                                        &lt;/xd:i&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:when test="$wrapin-a"&gt;
                                        &lt;xd:a&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                            &lt;/xsl:apply-templates&gt;
                                        &lt;/xd:a&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                            &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                        &lt;/xsl:apply-templates&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xd:b&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="$wrapin-i"&gt;
                            &lt;xd:i&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="$wrapin-a"&gt;
                                        &lt;xd:a&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                            &lt;/xsl:apply-templates&gt;
                                        &lt;/xd:a&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                            &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                        &lt;/xsl:apply-templates&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xd:i&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="$wrapin-a"&gt;
                            &lt;xd:a&gt;
                                &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                    &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                &lt;/xsl:apply-templates&gt;
                            &lt;/xd:a&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xsl:otherwise&gt;
            &lt;/xsl:choose&gt;
        &lt;/xsl:for-each-group&gt;
    &lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;&lt;/codeblock&gt;
    &lt;xsl:template name="deprecated"&gt;
        &lt;xsl:if test="child::*[local-name()='deprecated' and string-length(normalize-space(./text()))&amp;gt;0]"&gt;
            &lt;xd:deprecated&gt;
                &lt;xsl:value-of select="child::*[local-name()='deprecated' and string-length(normalize-space(./text()))&amp;gt;0]"/&gt;
            &lt;/xd:deprecated&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;codeblock&gt;&lt;xsl:stylesheet version="2.0"&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Identity template.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template match="@*|node()"&gt;
        &lt;xsl:copy&gt;
            &lt;xsl:apply-templates select="@*|node()"/&gt;
        &lt;/xsl:copy&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Matches each xd:doc element.&lt;/xd:short&gt;&lt;xd:detail&gt;
        
        Determines what code is being documented and calls appropriate templates for: &lt;xd:ul&gt;
                &lt;xd:li&gt;short description (xd:short)&lt;/xd:li&gt;
                &lt;xd:li&gt;detailed description (xd:detail)&lt;/xd:li&gt;
                &lt;xd:li&gt;authors (xd:author)&lt;/xd:li&gt;
                &lt;xd:li&gt;contributors (xd:contributor)&lt;/xd:li&gt;
                &lt;xd:li&gt;maintainers (xd:maintainer)&lt;/xd:li&gt;
                &lt;xd:li&gt;copyright (xd:copyright)&lt;/xd:li&gt;
                &lt;xd:li&gt;version (xd:version)&lt;/xd:li&gt;
                &lt;xd:li&gt;code existed since version (xd:since)&lt;/xd:li&gt;
                &lt;xd:li&gt;see also (xd:see)&lt;/xd:li&gt;
                &lt;xd:li&gt;deprecated since version (xd:deprecated)&lt;/xd:li&gt;
                &lt;xd:li&gt;import statements (xd:import and xsl:import)&lt;/xd:li&gt;
                &lt;xd:li&gt;include statements (xd:include and xsl:include)&lt;/xd:li&gt;
                &lt;xd:li&gt;parameters (xd:param and xsl:param)&lt;/xd:li&gt;
                &lt;xd:li&gt;return values / output (xd:return)&lt;/xd:li&gt;
            &lt;/xd:ul&gt;
        
        
    &lt;/xd:detail&gt;&lt;xd:return&gt;The normalized xd:doc.&lt;/xd:return&gt;&lt;/xd:doc&gt;
    &lt;xsl:template match="xd:doc"&gt;
        &lt;xsl:copy&gt;
            &lt;xsl:variable name="target"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="@target"&gt;
                        &lt;xsl:value-of select="@target"/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="count(preceding-sibling::*)=0"&gt;
                        &lt;xsl:value-of select="'parent'"/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:value-of select="'following'"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:variable&gt;
            &lt;xsl:variable name="code" select="if ($target='parent') then parent::* else following-sibling::*[1]"/&gt;

            &lt;xsl:attribute name="target" select="$target"/&gt;

            &lt;xsl:call-template name="short"/&gt;
            &lt;xsl:call-template name="detail"/&gt;
            &lt;xsl:call-template name="authors"/&gt;
            &lt;xsl:call-template name="contributors"/&gt;
            &lt;xsl:call-template name="maintainers"/&gt;
            &lt;xsl:call-template name="copyright"/&gt;
            &lt;xsl:call-template name="version"/&gt;
            &lt;xsl:call-template name="since"/&gt;
            &lt;xsl:call-template name="see"/&gt;
            &lt;xsl:call-template name="deprecated"/&gt;
            &lt;xsl:call-template name="import"&gt;
                &lt;xsl:with-param name="code" select="$code"/&gt;
            &lt;/xsl:call-template&gt;
            &lt;xsl:call-template name="include"&gt;
                &lt;xsl:with-param name="code" select="$code"/&gt;
            &lt;/xsl:call-template&gt;
            &lt;xsl:call-template name="param"&gt;
                &lt;xsl:with-param name="code" select="$code"/&gt;
            &lt;/xsl:call-template&gt;
            &lt;xsl:call-template name="return"/&gt;
        &lt;/xsl:copy&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Determines the short description.&lt;/xd:short&gt;&lt;xd:detail&gt;
        
        
            &lt;xd:ul&gt;
                &lt;xd:li&gt;If there is no &amp;lt;xd:short/&amp;gt;-element present, but plain text is present as a
                    child of the &amp;lt;xd:doc/&amp;gt;element, then the first sentence from that text (up
                    until the first period (".") will be used as a short description.&lt;/xd:li&gt;
                &lt;xd:li&gt;Else; if there are multiple &amp;lt;xd:short/&amp;gt;-elements, each one of their
                    contents will be wrapped in separate &amp;lt;section/&amp;gt;s.&lt;/xd:li&gt;
                &lt;xd:li&gt;Else; use the one &amp;lt;xd:short/&amp;gt;-element that is present for the short
                    description.&lt;/xd:li&gt;
            &lt;/xd:ul&gt;
        
    &lt;/xd:detail&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="short"&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="count(child::*[local-name()='short'])&amp;gt;1"&gt;
                &lt;xd:short&gt;
                    &lt;xsl:for-each select="child::*[local-name()='short']"&gt;
                        &lt;xd:section&gt;
                            &lt;xsl:apply-templates mode="section"/&gt;
                        &lt;/xd:section&gt;
                    &lt;/xsl:for-each&gt;
                &lt;/xd:short&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="count(child::*[local-name()='short'])=1"&gt;
                &lt;xd:short&gt;
                    &lt;xsl:apply-templates select="child::*[local-name()='short']/node()" mode="section"/&gt;
                &lt;/xd:short&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="child::text()[string-length(normalize-space())&amp;gt;0]"&gt;
                &lt;xsl:variable name="short" select="replace(normalize-space(child::text()[1]),'^([^\.]+\.?)\s?.*$','$1')"/&gt;
                &lt;xd:short&gt;
                    &lt;xsl:value-of select="$short"/&gt;
                &lt;/xd:short&gt;
            &lt;/xsl:when&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Determines the detailed description.&lt;/xd:short&gt;&lt;xd:detail&gt;
        
        The detailed description will be put together based on any number of
            &amp;lt;xd:detail/&amp;gt;-elements, as well as any number of text nodes that are direct
            children of the &amp;lt;xd:doc/&amp;gt;-element. If the xd:short was extracted from the first
            text node, then the first sentence from that text node will be ignored. If there are
            multiple &amp;lt;xd:detail/&amp;gt; and text nodes, then each of them will be wrapped in
            &amp;lt;xd:section/&amp;gt;s.
    &lt;/xd:detail&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="detail"&gt;
        &lt;xsl:variable name="shortInFirstText" select="count(./*[local-name()='short'])=0"/&gt;
        &lt;xsl:variable name="detailCount" select="(if (matches(normalize-space(./text()[1]),'\.[^\.].')) then 1 else 0) + count(*[local-name()='detail' and (descendant-or-self::node()[self::text() and string-length(normalize-space())&amp;gt;0 or local-name()='pre' and not(ancestor::*[local-name()='pre'])])]) + count(./text()[not(position()=1) and string-length(normalize-space())&amp;gt;0])"/&gt;
        &lt;xsl:if test="$detailCount&amp;gt;0"&gt;
            &lt;xd:detail&gt;
                &lt;xsl:for-each select="*|text()"&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="self::text() and count(preceding-sibling::text()[string-length(normalize-space())&amp;gt;0])=0"&gt;
                            &lt;!-- first text --&gt;
                            &lt;xsl:choose&gt;
                                &lt;xsl:when test="$shortInFirstText"&gt;
                                    &lt;xsl:variable name="detail" select="replace(normalize-space(),'^[^\.]+.?\s?(.*)$','$1')"/&gt;
                                    &lt;xsl:choose&gt;
                                        &lt;xsl:when test="$detailCount&amp;gt;1"&gt;
                                            &lt;xd:section&gt;
                                                &lt;xsl:value-of select="$detail"/&gt;
                                            &lt;/xd:section&gt;
                                        &lt;/xsl:when&gt;
                                        &lt;xsl:otherwise&gt;
                                            &lt;xsl:value-of select="$detail"/&gt;
                                        &lt;/xsl:otherwise&gt;
                                    &lt;/xsl:choose&gt;
                                &lt;/xsl:when&gt;
                                &lt;xsl:otherwise&gt;
                                    &lt;xsl:choose&gt;
                                        &lt;xsl:when test="$detailCount&amp;gt;1"&gt;
                                            &lt;xd:section&gt;
                                                &lt;xsl:value-of select="."/&gt;
                                            &lt;/xd:section&gt;
                                        &lt;/xsl:when&gt;
                                        &lt;xsl:otherwise&gt;
                                            &lt;xsl:value-of select="."/&gt;
                                        &lt;/xsl:otherwise&gt;
                                    &lt;/xsl:choose&gt;
                                &lt;/xsl:otherwise&gt;
                            &lt;/xsl:choose&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="self::text()"&gt;
                            &lt;!-- non-first text --&gt;
                            &lt;xsl:choose&gt;
                                &lt;xsl:when test="$detailCount&amp;gt;1"&gt;
                                    &lt;xd:section&gt;
                                        &lt;xsl:value-of select="."/&gt;
                                    &lt;/xd:section&gt;
                                &lt;/xsl:when&gt;
                                &lt;xsl:otherwise&gt;
                                    &lt;xsl:value-of select="."/&gt;
                                &lt;/xsl:otherwise&gt;
                            &lt;/xsl:choose&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="local-name()='detail'"&gt;
                            &lt;!-- detail element --&gt;
                            &lt;xsl:choose&gt;
                                &lt;xsl:when test="$detailCount&amp;gt;1"&gt;
                                    &lt;xd:section&gt;
                                        &lt;xsl:apply-templates select="child::node()" mode="section"/&gt;
                                    &lt;/xd:section&gt;
                                &lt;/xsl:when&gt;
                                &lt;xsl:otherwise&gt;
                                    &lt;xsl:apply-templates select="child::node()" mode="section"/&gt;
                                &lt;/xsl:otherwise&gt;
                            &lt;/xsl:choose&gt;
                        &lt;/xsl:when&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xsl:for-each&gt;
            &lt;/xd:detail&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes the xd:author-elements.&lt;/xd:short&gt;&lt;xd:detail&gt;&amp;gt;xd:author/&amp;lt;s with no text are removed. &amp;lt;xd:author/&amp;gt;s with no child elements will have their text content wrapped in a &amp;lt;xd:name/&amp;gt; element. Children other than xd:name, xd:mailto and xd:organization are ignored.&lt;/xd:detail&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="authors" xml:id="authors"&gt;
        &lt;xsl:for-each select="*[local-name()='author']"&gt;
            &lt;xsl:variable name="is-empty" select="count(descendant-or-self::text()[string-length(normalize-space())&amp;gt;0])=0"/&gt;
            &lt;xsl:if test="not($is-empty)"&gt;
                &lt;xd:author&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="count(child::*)=0"&gt;
                            &lt;xd:name&gt;
                                &lt;xsl:value-of select="."/&gt;
                            &lt;/xd:name&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:if test="child::*[local-name()='name']"&gt;
                                &lt;xd:name&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='name']"/&gt;
                                &lt;/xd:name&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='mailto']"&gt;
                                &lt;xd:mailto&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='mailto']"/&gt;
                                &lt;/xd:mailto&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='organization']"&gt;
                                &lt;xd:organization&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='organization']"/&gt;
                                &lt;/xd:organization&gt;
                            &lt;/xsl:if&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xd:author&gt;
            &lt;/xsl:if&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;&amp;lt;xd:contributor/&amp;gt;s are normalized in the same way as &amp;lt;xd:author/&amp;gt;s&lt;/xd:short&gt;&lt;xd:see&gt;#authors&lt;/xd:see&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="contributors"&gt;
        &lt;xsl:for-each select="*[local-name()='contributor']"&gt;
            &lt;xsl:variable name="is-empty" select="count(descendant-or-self::text()[string-length(normalize-space())&amp;gt;0])=0"/&gt;
            &lt;xsl:if test="not($is-empty)"&gt;
                &lt;xd:contributor&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="count(child::*)=0"&gt;
                            &lt;xd:name&gt;
                                &lt;xsl:value-of select="."/&gt;
                            &lt;/xd:name&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:if test="child::*[local-name()='name']"&gt;
                                &lt;xd:name&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='name']"/&gt;
                                &lt;/xd:name&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='mailto']"&gt;
                                &lt;xd:mailto&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='mailto']"/&gt;
                                &lt;/xd:mailto&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='organization']"&gt;
                                &lt;xd:organization&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='organization']"/&gt;
                                &lt;/xd:organization&gt;
                            &lt;/xsl:if&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xd:contributor&gt;
            &lt;/xsl:if&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;&amp;lt;xd:maintainer/&amp;gt;s are normalized in the same way as &amp;lt;xd:author/&amp;gt;s&lt;/xd:short&gt;&lt;xd:see&gt;#authors&lt;/xd:see&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="maintainers"&gt;
        &lt;xsl:for-each select="*[local-name()='maintainer']"&gt;
            &lt;xsl:variable name="is-empty" select="count(descendant-or-self::text()[string-length(normalize-space())&amp;gt;0])=0"/&gt;
            &lt;xsl:if test="not($is-empty)"&gt;
                &lt;xd:maintainer&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="count(child::*)=0"&gt;
                            &lt;xd:name&gt;
                                &lt;xsl:value-of select="."/&gt;
                            &lt;/xd:name&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:if test="child::*[local-name()='name']"&gt;
                                &lt;xd:name&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='name']"/&gt;
                                &lt;/xd:name&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='mailto']"&gt;
                                &lt;xd:mailto&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='mailto']"/&gt;
                                &lt;/xd:mailto&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='organization']"&gt;
                                &lt;xd:organization&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='organization']"/&gt;
                                &lt;/xd:organization&gt;
                            &lt;/xsl:if&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xd:maintainer&gt;
            &lt;/xsl:if&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes the xd:copyright-element.&lt;/xd:short&gt;&lt;xd:detail&gt;&amp;gt;xd:copyright/&amp;lt;s with no text are removed. &amp;lt;xd:copyright/&amp;gt;s with no child elements will have their text content wrapped in a &amp;lt;xd:name/&amp;gt; element. Children other than xd:year, xd:name, xd:mailto and xd:organization are ignored.&lt;/xd:detail&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="copyright"&gt;
        &lt;xsl:for-each select="*[local-name()='copyright']"&gt;
            &lt;xsl:variable name="is-empty" select="count(descendant-or-self::text()[string-length(normalize-space())&amp;gt;0])=0"/&gt;
            &lt;xsl:if test="not($is-empty)"&gt;
                &lt;xd:copyright&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="count(child::*)=0"&gt;
                            &lt;xd:name&gt;
                                &lt;xsl:value-of select="."/&gt;
                            &lt;/xd:name&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:if test="child::*[local-name()='year']"&gt;
                                &lt;xd:year&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='year']"/&gt;
                                &lt;/xd:year&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='name']"&gt;
                                &lt;xd:name&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='name']"/&gt;
                                &lt;/xd:name&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='mailto']"&gt;
                                &lt;xd:mailto&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='mailto']"/&gt;
                                &lt;/xd:mailto&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='organization']"&gt;
                                &lt;xd:organization&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='organization']"/&gt;
                                &lt;/xd:organization&gt;
                            &lt;/xsl:if&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xd:copyright&gt;
            &lt;/xsl:if&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:version elements.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="version"&gt;
        &lt;xsl:if test="child::*[local-name()='version' and string-length(normalize-space(./text()))&amp;gt;0]"&gt;
            &lt;xd:version&gt;
                &lt;xsl:value-of select="child::*[local-name()='version' and string-length(normalize-space(./text()))&amp;gt;0]"/&gt;
            &lt;/xd:version&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:since elements.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="since"&gt;
        &lt;xsl:if test="child::*[local-name()='since' and string-length(normalize-space(./text()))&amp;gt;0]"&gt;
            &lt;xd:since&gt;
                &lt;xsl:value-of select="child::*[local-name()='since' and string-length(normalize-space(./text()))&amp;gt;0]"/&gt;
            &lt;/xd:since&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:see elements.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="see"&gt;
        &lt;xsl:if test="child::*[local-name()='see' and string-length(normalize-space(./text()))&amp;gt;0]"&gt;
            &lt;xd:see&gt;
                &lt;xsl:value-of select="child::*[local-name()='see' and string-length(normalize-space(./text()))&amp;gt;0]"/&gt;
            &lt;/xd:see&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:deprecated elements.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="deprecated"&gt;
        &lt;xsl:if test="child::*[local-name()='deprecated' and string-length(normalize-space(./text()))&amp;gt;0]"&gt;
            &lt;xd:deprecated&gt;
                &lt;xsl:value-of select="child::*[local-name()='deprecated' and string-length(normalize-space(./text()))&amp;gt;0]"/&gt;
            &lt;/xd:deprecated&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:import elements.&lt;/xd:short&gt;&lt;xd:detail&gt;Will create empty documentation for imports that are not documented, and removes documentation of imports that does not exist in the code.&lt;/xd:detail&gt;&lt;xd:param name="code"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="import"&gt;
        &lt;xsl:param name="code" required="yes"/&gt;
        &lt;xsl:variable name="doc" select="."/&gt;
        &lt;xsl:for-each select="$code/xsl:import"&gt;
            &lt;xsl:variable name="href" select="@href"/&gt;
            &lt;xd:import href="{@href}"&gt;
                &lt;xsl:if test="$doc/*[local-name()='import' and @href=$href]"&gt;
                    &lt;xsl:value-of select="$doc/*[local-name()='import' and @href=$href]"/&gt;
                &lt;/xsl:if&gt;
            &lt;/xd:import&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:include elements.&lt;/xd:short&gt;&lt;xd:detail&gt;Will create empty documentation for includes that are not documented, and removes documentation of includes that does not exist in the code.&lt;/xd:detail&gt;&lt;xd:param name="code"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="include"&gt;
        &lt;xsl:param name="code" required="yes"/&gt;
        &lt;xsl:variable name="doc" select="."/&gt;
        &lt;xsl:for-each select="$code/xsl:include"&gt;
            &lt;xsl:variable name="href" select="@href"/&gt;
            &lt;xd:include href="{@href}"&gt;
                &lt;xsl:if test="$doc/*[local-name()='include' and @href=$href]"&gt;
                    &lt;xsl:value-of select="$doc/*[local-name()='include' and @href=$href]"/&gt;
                &lt;/xsl:if&gt;
            &lt;/xd:include&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:import elements.&lt;/xd:short&gt;&lt;xd:detail&gt;Will create empty documentation for imports that are not documented, and removes documentation of imports that does not exist in the code.&lt;/xd:detail&gt;&lt;xd:param name="code"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="param"&gt;
        &lt;xsl:param name="code" required="yes"/&gt;
        &lt;xsl:variable name="doc" select="."/&gt;
        &lt;xsl:for-each select="*[local-name()='param']"&gt;
            &lt;xd:param&gt;
                &lt;xsl:apply-templates select="@*"/&gt;
                &lt;xsl:apply-templates mode="section" select="node()"/&gt;
            &lt;/xd:param&gt;
        &lt;/xsl:for-each&gt;
        &lt;xsl:for-each select="$code/xsl:param"&gt;
            &lt;xsl:variable name="name" select="@name"/&gt;
            &lt;xsl:if test="not($doc/*[local-name()='param' and @name=$name])"&gt;
                &lt;xd:param name="{@name}"/&gt;
            &lt;/xsl:if&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Describes the result of the code.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="return"&gt;
        &lt;xsl:variable name="is-empty" select="count(*[local-name()='return']/descendant-or-self::node()[self::text() and string-length(normalize-space())&amp;gt;0 or local-name()='pre'])=0"/&gt;
        &lt;xsl:if test="not($is-empty)"&gt;
            &lt;xd:return&gt;
                &lt;xsl:apply-templates mode="section" select="*[local-name()='return']/node()"/&gt;
            &lt;/xd:return&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Matches all elements when in "section"-mode.&lt;/xd:short&gt;&lt;xd:detail&gt;
        
        Checks all child elements and their descendants and wraps and handles as is
            appropriate. If a child or descendant is placed in a problematic position, then one of
            the unwrap*-templates are called to solve the problem. Otherwise, just make sure that
            the element is in the correct namespace and copy it.
    &lt;/xd:detail&gt;&lt;xd:param name="wrapin-p"/&gt;&lt;xd:param name="wrapin-ul"/&gt;&lt;xd:param name="wrapin-li"/&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template mode="section" match="@*|node()"&gt;
        &lt;xsl:param name="wrapin-p" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-ul" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-li" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:variable name="is-empty" select="count(descendant-or-self::node()[self::text() and string-length(normalize-space())&amp;gt;0 or local-name()='pre'])=0"/&gt;
        &lt;xsl:variable name="contains-section" select="count(descendant::*[local-name()='section'])&amp;gt;0"/&gt;
        &lt;xsl:variable name="contains-block" select="count(descendant::*[local-name()='ul' or local-name()='li' or local-name()='pre' or local-name()='p'])&amp;gt;0"/&gt;
        &lt;xsl:variable name="contains-block-non-li" select="count(descendant::*[local-name()='ul' or local-name()='pre' or local-name()='p'])&amp;gt;0"/&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="local-name()='section'"&gt;
                &lt;xd:section&gt;
                    &lt;xsl:apply-templates mode="section" select="@*|node()"/&gt;
                &lt;/xd:section&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='p'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$contains-section or $contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-p" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:p&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:p&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='pre'"&gt;
                &lt;xd:pre&gt;
                    &lt;xsl:copy-of select="@*|node()"/&gt;
                &lt;/xd:pre&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='ul'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-section"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$contains-block-non-li"&gt;
                        &lt;xd:section&gt;
                            &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                                &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                            &lt;/xsl:call-template&gt;
                        &lt;/xd:section&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="count(descendant::*[local-name()='li'])=0"&gt;
                        &lt;xsl:choose&gt;
                            &lt;xsl:when test="count(child::node()[self::* or self::text() and string-length(normalize-space())&amp;gt;0])&amp;gt;1"&gt;
                                &lt;xd:section&gt;
                                    &lt;xsl:apply-templates mode="section" select="@*|node()"&gt;
                                        &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                                        &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                                    &lt;/xsl:apply-templates&gt;
                                &lt;/xd:section&gt;
                            &lt;/xsl:when&gt;
                            &lt;xsl:otherwise&gt;
                                &lt;xsl:apply-templates mode="section" select="@*|node()"&gt;
                                    &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                                &lt;/xsl:apply-templates&gt;
                            &lt;/xsl:otherwise&gt;
                        &lt;/xsl:choose&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:ul&gt;
                            &lt;xsl:apply-templates mode="list" select="@*|node()"&gt;
                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:ul&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='li'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-section"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:ul&gt;
                            &lt;xd:li&gt;
                                &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                            &lt;/xd:li&gt;
                        &lt;/xd:ul&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='b'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-section"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-b" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-b" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:b&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:b&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='i'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-section"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-i" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-i" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:i&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:i&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='a'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-section"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-a" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-a-elem" select="." tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-a" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-a-elem" select="." tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:a&gt;
                            &lt;xsl:apply-templates select="@*"/&gt;
                            &lt;xsl:apply-templates mode="phrase" select="node()"/&gt;
                        &lt;/xd:a&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="self::*"&gt;
                        &lt;xsl:choose&gt;
                            &lt;xsl:when test="not(preceding-sibling::*) and not(following-sibling::*)"&gt;
                                &lt;xsl:apply-templates mode="section" select="@*|node()"/&gt;
                            &lt;/xsl:when&gt;
                            &lt;xsl:otherwise&gt;
                                &lt;xd:section&gt;
                                    &lt;xsl:apply-templates mode="section" select="@*|node()"/&gt;
                                &lt;/xd:section&gt;
                            &lt;/xsl:otherwise&gt;
                        &lt;/xsl:choose&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="self::text()"&gt;
                        &lt;xsl:copy/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="section" select="@*|node()"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Handles non-problematic lists.&lt;/xd:short&gt;&lt;xd:param name="wrapin-p"/&gt;&lt;xd:param name="wrapin-ul"/&gt;&lt;xd:param name="wrapin-li"/&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template mode="list" match="@*|node()"&gt;
        &lt;xsl:param name="wrapin-p" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-ul" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-li" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:variable name="is-empty" select="count(descendant-or-self::node()[self::text() and string-length(normalize-space())&amp;gt;0 or local-name()='pre'])=0"/&gt;
        &lt;xsl:variable name="contains-block" select="count(descendant::*[local-name()='ul' or local-name()='li' or local-name()='pre' or local-name()='p'])&amp;gt;0"/&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="local-name()='li'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$wrapin-ul"&gt;
                        &lt;xd:ul&gt;
                            &lt;xd:li&gt;
                                &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                            &lt;/xd:li&gt;
                        &lt;/xd:ul&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:li&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:li&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="self::text()"&gt;
                        &lt;xsl:copy/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="list" select="@*|node()"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Handles all elements when in "block" mode and applies fixes where needed.&lt;/xd:short&gt;&lt;xd:param name="wrapin-p"/&gt;&lt;xd:param name="wrapin-ul"/&gt;&lt;xd:param name="wrapin-li"/&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template mode="block" match="@*|node()"&gt;
        &lt;xsl:param name="wrapin-p" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-ul" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-li" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:variable name="element" select="."/&gt;
        &lt;xsl:variable name="is-empty" select="count(descendant-or-self::node()[self::* or self::text() and string-length(normalize-space())&amp;gt;0])=0"/&gt;
        &lt;xsl:variable name="contains-block" select="count(descendant::*[local-name()='ul' or local-name()='li' or local-name()='pre' or local-name()='p'])&amp;gt;0"/&gt;
        &lt;xsl:variable name="contains-block-non-li" select="count(descendant::*[local-name()='ul' or local-name()='pre' or local-name()='p'])&amp;gt;0"/&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="local-name()='p'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:p&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:p&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='pre'"&gt;
                &lt;xd:pre&gt;
                    &lt;xsl:copy-of select="@*|node()"/&gt;
                &lt;/xd:pre&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='ul'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block-non-li"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="count(descendant::*[local-name()='li' and string-length(normalize-space(descendant-or-self::text()))&amp;gt;0])=0"&gt;
                        &lt;xsl:apply-templates mode="block" select="@*|node()"/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:ul&gt;
                            &lt;xsl:apply-templates mode="list" select="@*|node()"&gt;
                                &lt;xsl:with-param name="wrapin-ul" select="false()"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:ul&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='li'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:ul&gt;
                            &lt;xd:li&gt;
                                &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                                    &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                &lt;/xsl:apply-templates&gt;
                            &lt;/xd:li&gt;
                        &lt;/xd:ul&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="not($contains-block) and $wrapin-p"&gt;
                &lt;xd:p&gt;
                    &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                        &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                        &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                        &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                    &lt;/xsl:apply-templates&gt;
                &lt;/xd:p&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="not($contains-block) and $wrapin-li"&gt;
                &lt;xd:ul&gt;
                    &lt;xd:li&gt;
                        &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                            &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xd:li&gt;
                &lt;/xd:ul&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='b'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-b" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:b&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:b&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='i'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-i" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:i&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:i&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='a'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-a" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-a-elem" select="$element" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:a&gt;
                            &lt;xsl:apply-templates mode="phrase" select="$element/@*"/&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:a&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="self::text()"&gt;
                        &lt;xsl:copy/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="block" select="@*|node()"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Phrases are matched with this template (mode="phrase") and handled appropriately.&lt;/xd:short&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template mode="phrase" match="@*|node()"&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="local-name()='b'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='b'])"&gt;
                        &lt;xd:b&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:b&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="$wrapin-b"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='b'])"&gt;
                        &lt;xd:b&gt;
                            &lt;xsl:apply-templates mode="phrase" select="."&gt;
                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:b&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="."&gt;
                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='i'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='i'])"&gt;
                        &lt;xd:i&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:i&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="$wrapin-i"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='i'])"&gt;
                        &lt;xd:i&gt;
                            &lt;xsl:apply-templates mode="phrase" select="."&gt;
                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:i&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="."&gt;
                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='a'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='a'])"&gt;
                        &lt;xd:a&gt;
                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                            &lt;xsl:apply-templates mode="phrase" select="node()"&gt;
                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:a&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="$wrapin-a"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='a'])"&gt;
                        &lt;xd:a&gt;
                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                            &lt;xsl:apply-templates mode="phrase" select="."&gt;
                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:a&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="."&gt;
                            &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="self::text()"&gt;
                        &lt;xsl:copy/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;This template unwraps problematic elements into sections.&lt;/xd:short&gt;&lt;xd:param name="wasWrapped"/&gt;&lt;xd:param name="wrapin-p"/&gt;&lt;xd:param name="wrapin-ul"/&gt;&lt;xd:param name="wrapin-li"/&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="unwrap-to-sections"&gt;
        &lt;xsl:param name="wasWrapped" select="false()"/&gt;
        &lt;xsl:param name="wrapin-p" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-ul" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-li" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:variable name="element" select="."/&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="not($wasWrapped) and count(child::node()[self::* or self::text() and string-length(normalize-space())&amp;gt;0])&amp;gt;1"&gt;
                &lt;xd:section&gt;
                    &lt;xsl:call-template name="unwrap-to-sections"&gt;
                        &lt;xsl:with-param name="wasWrapped" select="true()"/&gt;
                    &lt;/xsl:call-template&gt;
                &lt;/xd:section&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
                &lt;xsl:for-each-group select="child::node()[self::* or self::text() and string-length(normalize-space())&amp;gt;0]" group-adjacent="self::* and not(ancestor::*[local-name()='pre']) and (local-name()='section' or local-name()='ul' or local-name()='li' or local-name()='pre' or local-name()='p')"&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="current-grouping-key()"&gt;
                            &lt;xsl:choose&gt;
                                &lt;xsl:when test="count(current-group())&amp;gt;1 and last()&amp;gt;1"&gt;
                                    &lt;xd:section&gt;
                                        &lt;xsl:apply-templates mode="section" select="current-group()"&gt;
                                            &lt;xsl:with-param name="wrapin-p" tunnel="yes" select="if ($wrapin-p or local-name($element)='p') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-ul" tunnel="yes" select="if ($wrapin-ul or local-name($element)='ul') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-li" tunnel="yes" select="if ($wrapin-li or local-name($element)='li') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-b" tunnel="yes" select="if ($wrapin-b or local-name($element)='b') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-i" tunnel="yes" select="if ($wrapin-i or local-name($element)='i') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-a" tunnel="yes" select="if ($wrapin-a or local-name($element)='a') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-a-elem" tunnel="yes" select="if (not($wrapin-a) and local-name($element)='a') then $element else false()"/&gt;
                                        &lt;/xsl:apply-templates&gt;
                                    &lt;/xd:section&gt;
                                &lt;/xsl:when&gt;
                                &lt;xsl:otherwise&gt;
                                    &lt;xsl:apply-templates mode="section" select="current-group()"&gt;
                                        &lt;xsl:with-param name="wrapin-p" tunnel="yes" select="if ($wrapin-p or local-name($element)='p') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-ul" tunnel="yes" select="if ($wrapin-ul or local-name($element)='ul') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-li" tunnel="yes" select="if ($wrapin-li or local-name($element)='li') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-b" tunnel="yes" select="if ($wrapin-b or local-name($element)='b') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-i" tunnel="yes" select="if ($wrapin-i or local-name($element)='i') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-a" tunnel="yes" select="if ($wrapin-a or local-name($element)='a') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-a-elem" tunnel="yes" select="if (not($wrapin-a) and local-name($element)='a') then $element else false()"/&gt;
                                    &lt;/xsl:apply-templates&gt;
                                &lt;/xsl:otherwise&gt;
                            &lt;/xsl:choose&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:element name="xd:{local-name($element)}"&gt;
                                &lt;xsl:for-each select="$element/@*"&gt;
                                    &lt;xsl:attribute name="xd:{local-name()}" select="."/&gt;
                                &lt;/xsl:for-each&gt;
                                &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                    &lt;xsl:with-param name="wrapin-p" tunnel="yes" select="if ($wrapin-p or local-name($element)='p') then false() else $wrapin-p"/&gt;
                                    &lt;xsl:with-param name="wrapin-ul" tunnel="yes" select="if ($wrapin-ul or local-name($element)='ul') then false() else $wrapin-ul"/&gt;
                                    &lt;xsl:with-param name="wrapin-li" tunnel="yes" select="if ($wrapin-li or local-name($element)='li') then false() else $wrapin-li"/&gt;
                                    &lt;xsl:with-param name="wrapin-b" tunnel="yes" select="if ($wrapin-b or local-name($element)='b') then false() else $wrapin-b"/&gt;
                                    &lt;xsl:with-param name="wrapin-i" tunnel="yes" select="if ($wrapin-i or local-name($element)='i') then false() else $wrapin-i"/&gt;
                                    &lt;xsl:with-param name="wrapin-a" tunnel="yes" select="if ($wrapin-a or local-name($element)='a') then false() else $wrapin-a"/&gt;
                                &lt;/xsl:apply-templates&gt;
                            &lt;/xsl:element&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xsl:for-each-group&gt;
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;This template unwraps problematic elements into blocks.&lt;/xd:short&gt;&lt;xd:param name="wrapin-p"/&gt;&lt;xd:param name="wrapin-ul"/&gt;&lt;xd:param name="wrapin-li"/&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="unwrap-to-blocks"&gt;
        &lt;xsl:param name="wrapin-p" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-ul" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-li" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:variable name="element" select="."/&gt;
        &lt;xsl:for-each-group select="child::node()[self::* or self::text() and string-length(normalize-space())&amp;gt;0]" group-adjacent="count(descendant-or-self::*[local-name()='ul' or local-name()='li' or local-name()='pre' or local-name()='p'])&amp;gt;0"&gt;
            &lt;xsl:choose&gt;
                &lt;xsl:when test="current-grouping-key()"&gt;
                    &lt;xsl:for-each select="current-group()"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-p" select="$wrapin-p or local-name()='p' or local-name($element)='p'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="$wrapin-ul or local-name()='ul' or local-name($element)='ul'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="$wrapin-li or local-name()='li' or local-name($element)='li'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-b" select="$wrapin-b or local-name()='b' or local-name($element)='b'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-i" select="$wrapin-i or local-name()='i' or local-name($element)='i'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-a" select="$wrapin-a or local-name()='a' or local-name($element)='a'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-a-elem" select="if (local-name()='a') then . else (if (local-name($element)='a') then $element else $wrapin-a-elem)" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:for-each&gt;
                &lt;/xsl:when&gt;
                &lt;xsl:otherwise&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="$wrapin-p"&gt;
                            &lt;xd:p&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="$wrapin-b"&gt;
                                        &lt;xd:b&gt;
                                            &lt;xsl:choose&gt;
                                                &lt;xsl:when test="$wrapin-i"&gt;
                                                  &lt;xd:i&gt;
                                                  &lt;xsl:choose&gt;
                                                  &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                  &lt;/xsl:when&gt;
                                                  &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xsl:otherwise&gt;
                                                  &lt;/xsl:choose&gt;
                                                  &lt;/xd:i&gt;
                                                &lt;/xsl:when&gt;
                                                &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                &lt;/xsl:otherwise&gt;
                                            &lt;/xsl:choose&gt;
                                        &lt;/xd:b&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:when test="$wrapin-i"&gt;
                                        &lt;xd:i&gt;
                                            &lt;xsl:choose&gt;
                                                &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                &lt;/xsl:when&gt;
                                                &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                &lt;/xsl:otherwise&gt;
                                            &lt;/xsl:choose&gt;
                                        &lt;/xd:i&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:when test="$wrapin-a"&gt;
                                        &lt;xd:a&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                            &lt;/xsl:apply-templates&gt;
                                        &lt;/xd:a&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                            &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                        &lt;/xsl:apply-templates&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xd:p&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="$wrapin-li"&gt;
                            &lt;xd:ul&gt;
                                &lt;xd:li&gt;
                                    &lt;xsl:choose&gt;
                                        &lt;xsl:when test="$wrapin-b"&gt;
                                            &lt;xd:b&gt;
                                                &lt;xsl:choose&gt;
                                                  &lt;xsl:when test="$wrapin-i"&gt;
                                                  &lt;xd:i&gt;
                                                  &lt;xsl:choose&gt;
                                                  &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                  &lt;/xsl:when&gt;
                                                  &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xsl:otherwise&gt;
                                                  &lt;/xsl:choose&gt;
                                                  &lt;/xd:i&gt;
                                                  &lt;/xsl:when&gt;
                                                  &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xsl:otherwise&gt;
                                                &lt;/xsl:choose&gt;
                                            &lt;/xd:b&gt;
                                        &lt;/xsl:when&gt;
                                        &lt;xsl:when test="$wrapin-i"&gt;
                                            &lt;xd:i&gt;
                                                &lt;xsl:choose&gt;
                                                  &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                  &lt;/xsl:when&gt;
                                                  &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xsl:otherwise&gt;
                                                &lt;/xsl:choose&gt;
                                            &lt;/xd:i&gt;
                                        &lt;/xsl:when&gt;
                                        &lt;xsl:when test="$wrapin-a"&gt;
                                            &lt;xd:a&gt;
                                                &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                &lt;/xsl:apply-templates&gt;
                                            &lt;/xd:a&gt;
                                        &lt;/xsl:when&gt;
                                        &lt;xsl:otherwise&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                            &lt;/xsl:apply-templates&gt;
                                        &lt;/xsl:otherwise&gt;
                                    &lt;/xsl:choose&gt;
                                &lt;/xd:li&gt;
                            &lt;/xd:ul&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="$wrapin-ul"&gt;
                            &lt;xd:p&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="$wrapin-b"&gt;
                                        &lt;xd:b&gt;
                                            &lt;xsl:choose&gt;
                                                &lt;xsl:when test="$wrapin-i"&gt;
                                                  &lt;xd:i&gt;
                                                  &lt;xsl:choose&gt;
                                                  &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                  &lt;/xsl:when&gt;
                                                  &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xsl:otherwise&gt;
                                                  &lt;/xsl:choose&gt;
                                                  &lt;/xd:i&gt;
                                                &lt;/xsl:when&gt;
                                                &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                &lt;/xsl:otherwise&gt;
                                            &lt;/xsl:choose&gt;
                                        &lt;/xd:b&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:when test="$wrapin-i"&gt;
                                        &lt;xd:i&gt;
                                            &lt;xsl:choose&gt;
                                                &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                &lt;/xsl:when&gt;
                                                &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                &lt;/xsl:otherwise&gt;
                                            &lt;/xsl:choose&gt;
                                        &lt;/xd:i&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:when test="$wrapin-a"&gt;
                                        &lt;xd:a&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                            &lt;/xsl:apply-templates&gt;
                                        &lt;/xd:a&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                            &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                        &lt;/xsl:apply-templates&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xd:p&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="$wrapin-b"&gt;
                            &lt;xd:b&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="$wrapin-i"&gt;
                                        &lt;xd:i&gt;
                                            &lt;xsl:choose&gt;
                                                &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                &lt;/xsl:when&gt;
                                                &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                &lt;/xsl:otherwise&gt;
                                            &lt;/xsl:choose&gt;
                                        &lt;/xd:i&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:when test="$wrapin-a"&gt;
                                        &lt;xd:a&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                            &lt;/xsl:apply-templates&gt;
                                        &lt;/xd:a&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                            &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                        &lt;/xsl:apply-templates&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xd:b&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="$wrapin-i"&gt;
                            &lt;xd:i&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="$wrapin-a"&gt;
                                        &lt;xd:a&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                            &lt;/xsl:apply-templates&gt;
                                        &lt;/xd:a&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                            &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                        &lt;/xsl:apply-templates&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xd:i&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="$wrapin-a"&gt;
                            &lt;xd:a&gt;
                                &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                    &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                &lt;/xsl:apply-templates&gt;
                            &lt;/xd:a&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xsl:otherwise&gt;
            &lt;/xsl:choose&gt;
        &lt;/xsl:for-each-group&gt;
    &lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;&lt;/codeblock&gt;
    &lt;xsl:template name="import"&gt;
        &lt;xsl:param name="code" required="yes"/&gt;
        &lt;xsl:variable name="doc" select="."/&gt;
        &lt;xsl:for-each select="$code/xsl:import"&gt;
            &lt;xsl:variable name="href" select="@href"/&gt;
            &lt;xd:import href="{@href}"&gt;
                &lt;xsl:if test="$doc/*[local-name()='import' and @href=$href]"&gt;
                    &lt;xsl:value-of select="$doc/*[local-name()='import' and @href=$href]"/&gt;
                &lt;/xsl:if&gt;
            &lt;/xd:import&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;codeblock&gt;&lt;xsl:stylesheet version="2.0"&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Identity template.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template match="@*|node()"&gt;
        &lt;xsl:copy&gt;
            &lt;xsl:apply-templates select="@*|node()"/&gt;
        &lt;/xsl:copy&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Matches each xd:doc element.&lt;/xd:short&gt;&lt;xd:detail&gt;
        
        Determines what code is being documented and calls appropriate templates for: &lt;xd:ul&gt;
                &lt;xd:li&gt;short description (xd:short)&lt;/xd:li&gt;
                &lt;xd:li&gt;detailed description (xd:detail)&lt;/xd:li&gt;
                &lt;xd:li&gt;authors (xd:author)&lt;/xd:li&gt;
                &lt;xd:li&gt;contributors (xd:contributor)&lt;/xd:li&gt;
                &lt;xd:li&gt;maintainers (xd:maintainer)&lt;/xd:li&gt;
                &lt;xd:li&gt;copyright (xd:copyright)&lt;/xd:li&gt;
                &lt;xd:li&gt;version (xd:version)&lt;/xd:li&gt;
                &lt;xd:li&gt;code existed since version (xd:since)&lt;/xd:li&gt;
                &lt;xd:li&gt;see also (xd:see)&lt;/xd:li&gt;
                &lt;xd:li&gt;deprecated since version (xd:deprecated)&lt;/xd:li&gt;
                &lt;xd:li&gt;import statements (xd:import and xsl:import)&lt;/xd:li&gt;
                &lt;xd:li&gt;include statements (xd:include and xsl:include)&lt;/xd:li&gt;
                &lt;xd:li&gt;parameters (xd:param and xsl:param)&lt;/xd:li&gt;
                &lt;xd:li&gt;return values / output (xd:return)&lt;/xd:li&gt;
            &lt;/xd:ul&gt;
        
        
    &lt;/xd:detail&gt;&lt;xd:return&gt;The normalized xd:doc.&lt;/xd:return&gt;&lt;/xd:doc&gt;
    &lt;xsl:template match="xd:doc"&gt;
        &lt;xsl:copy&gt;
            &lt;xsl:variable name="target"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="@target"&gt;
                        &lt;xsl:value-of select="@target"/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="count(preceding-sibling::*)=0"&gt;
                        &lt;xsl:value-of select="'parent'"/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:value-of select="'following'"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:variable&gt;
            &lt;xsl:variable name="code" select="if ($target='parent') then parent::* else following-sibling::*[1]"/&gt;

            &lt;xsl:attribute name="target" select="$target"/&gt;

            &lt;xsl:call-template name="short"/&gt;
            &lt;xsl:call-template name="detail"/&gt;
            &lt;xsl:call-template name="authors"/&gt;
            &lt;xsl:call-template name="contributors"/&gt;
            &lt;xsl:call-template name="maintainers"/&gt;
            &lt;xsl:call-template name="copyright"/&gt;
            &lt;xsl:call-template name="version"/&gt;
            &lt;xsl:call-template name="since"/&gt;
            &lt;xsl:call-template name="see"/&gt;
            &lt;xsl:call-template name="deprecated"/&gt;
            &lt;xsl:call-template name="import"&gt;
                &lt;xsl:with-param name="code" select="$code"/&gt;
            &lt;/xsl:call-template&gt;
            &lt;xsl:call-template name="include"&gt;
                &lt;xsl:with-param name="code" select="$code"/&gt;
            &lt;/xsl:call-template&gt;
            &lt;xsl:call-template name="param"&gt;
                &lt;xsl:with-param name="code" select="$code"/&gt;
            &lt;/xsl:call-template&gt;
            &lt;xsl:call-template name="return"/&gt;
        &lt;/xsl:copy&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Determines the short description.&lt;/xd:short&gt;&lt;xd:detail&gt;
        
        
            &lt;xd:ul&gt;
                &lt;xd:li&gt;If there is no &amp;lt;xd:short/&amp;gt;-element present, but plain text is present as a
                    child of the &amp;lt;xd:doc/&amp;gt;element, then the first sentence from that text (up
                    until the first period (".") will be used as a short description.&lt;/xd:li&gt;
                &lt;xd:li&gt;Else; if there are multiple &amp;lt;xd:short/&amp;gt;-elements, each one of their
                    contents will be wrapped in separate &amp;lt;section/&amp;gt;s.&lt;/xd:li&gt;
                &lt;xd:li&gt;Else; use the one &amp;lt;xd:short/&amp;gt;-element that is present for the short
                    description.&lt;/xd:li&gt;
            &lt;/xd:ul&gt;
        
    &lt;/xd:detail&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="short"&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="count(child::*[local-name()='short'])&amp;gt;1"&gt;
                &lt;xd:short&gt;
                    &lt;xsl:for-each select="child::*[local-name()='short']"&gt;
                        &lt;xd:section&gt;
                            &lt;xsl:apply-templates mode="section"/&gt;
                        &lt;/xd:section&gt;
                    &lt;/xsl:for-each&gt;
                &lt;/xd:short&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="count(child::*[local-name()='short'])=1"&gt;
                &lt;xd:short&gt;
                    &lt;xsl:apply-templates select="child::*[local-name()='short']/node()" mode="section"/&gt;
                &lt;/xd:short&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="child::text()[string-length(normalize-space())&amp;gt;0]"&gt;
                &lt;xsl:variable name="short" select="replace(normalize-space(child::text()[1]),'^([^\.]+\.?)\s?.*$','$1')"/&gt;
                &lt;xd:short&gt;
                    &lt;xsl:value-of select="$short"/&gt;
                &lt;/xd:short&gt;
            &lt;/xsl:when&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Determines the detailed description.&lt;/xd:short&gt;&lt;xd:detail&gt;
        
        The detailed description will be put together based on any number of
            &amp;lt;xd:detail/&amp;gt;-elements, as well as any number of text nodes that are direct
            children of the &amp;lt;xd:doc/&amp;gt;-element. If the xd:short was extracted from the first
            text node, then the first sentence from that text node will be ignored. If there are
            multiple &amp;lt;xd:detail/&amp;gt; and text nodes, then each of them will be wrapped in
            &amp;lt;xd:section/&amp;gt;s.
    &lt;/xd:detail&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="detail"&gt;
        &lt;xsl:variable name="shortInFirstText" select="count(./*[local-name()='short'])=0"/&gt;
        &lt;xsl:variable name="detailCount" select="(if (matches(normalize-space(./text()[1]),'\.[^\.].')) then 1 else 0) + count(*[local-name()='detail' and (descendant-or-self::node()[self::text() and string-length(normalize-space())&amp;gt;0 or local-name()='pre' and not(ancestor::*[local-name()='pre'])])]) + count(./text()[not(position()=1) and string-length(normalize-space())&amp;gt;0])"/&gt;
        &lt;xsl:if test="$detailCount&amp;gt;0"&gt;
            &lt;xd:detail&gt;
                &lt;xsl:for-each select="*|text()"&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="self::text() and count(preceding-sibling::text()[string-length(normalize-space())&amp;gt;0])=0"&gt;
                            &lt;!-- first text --&gt;
                            &lt;xsl:choose&gt;
                                &lt;xsl:when test="$shortInFirstText"&gt;
                                    &lt;xsl:variable name="detail" select="replace(normalize-space(),'^[^\.]+.?\s?(.*)$','$1')"/&gt;
                                    &lt;xsl:choose&gt;
                                        &lt;xsl:when test="$detailCount&amp;gt;1"&gt;
                                            &lt;xd:section&gt;
                                                &lt;xsl:value-of select="$detail"/&gt;
                                            &lt;/xd:section&gt;
                                        &lt;/xsl:when&gt;
                                        &lt;xsl:otherwise&gt;
                                            &lt;xsl:value-of select="$detail"/&gt;
                                        &lt;/xsl:otherwise&gt;
                                    &lt;/xsl:choose&gt;
                                &lt;/xsl:when&gt;
                                &lt;xsl:otherwise&gt;
                                    &lt;xsl:choose&gt;
                                        &lt;xsl:when test="$detailCount&amp;gt;1"&gt;
                                            &lt;xd:section&gt;
                                                &lt;xsl:value-of select="."/&gt;
                                            &lt;/xd:section&gt;
                                        &lt;/xsl:when&gt;
                                        &lt;xsl:otherwise&gt;
                                            &lt;xsl:value-of select="."/&gt;
                                        &lt;/xsl:otherwise&gt;
                                    &lt;/xsl:choose&gt;
                                &lt;/xsl:otherwise&gt;
                            &lt;/xsl:choose&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="self::text()"&gt;
                            &lt;!-- non-first text --&gt;
                            &lt;xsl:choose&gt;
                                &lt;xsl:when test="$detailCount&amp;gt;1"&gt;
                                    &lt;xd:section&gt;
                                        &lt;xsl:value-of select="."/&gt;
                                    &lt;/xd:section&gt;
                                &lt;/xsl:when&gt;
                                &lt;xsl:otherwise&gt;
                                    &lt;xsl:value-of select="."/&gt;
                                &lt;/xsl:otherwise&gt;
                            &lt;/xsl:choose&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="local-name()='detail'"&gt;
                            &lt;!-- detail element --&gt;
                            &lt;xsl:choose&gt;
                                &lt;xsl:when test="$detailCount&amp;gt;1"&gt;
                                    &lt;xd:section&gt;
                                        &lt;xsl:apply-templates select="child::node()" mode="section"/&gt;
                                    &lt;/xd:section&gt;
                                &lt;/xsl:when&gt;
                                &lt;xsl:otherwise&gt;
                                    &lt;xsl:apply-templates select="child::node()" mode="section"/&gt;
                                &lt;/xsl:otherwise&gt;
                            &lt;/xsl:choose&gt;
                        &lt;/xsl:when&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xsl:for-each&gt;
            &lt;/xd:detail&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes the xd:author-elements.&lt;/xd:short&gt;&lt;xd:detail&gt;&amp;gt;xd:author/&amp;lt;s with no text are removed. &amp;lt;xd:author/&amp;gt;s with no child elements will have their text content wrapped in a &amp;lt;xd:name/&amp;gt; element. Children other than xd:name, xd:mailto and xd:organization are ignored.&lt;/xd:detail&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="authors" xml:id="authors"&gt;
        &lt;xsl:for-each select="*[local-name()='author']"&gt;
            &lt;xsl:variable name="is-empty" select="count(descendant-or-self::text()[string-length(normalize-space())&amp;gt;0])=0"/&gt;
            &lt;xsl:if test="not($is-empty)"&gt;
                &lt;xd:author&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="count(child::*)=0"&gt;
                            &lt;xd:name&gt;
                                &lt;xsl:value-of select="."/&gt;
                            &lt;/xd:name&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:if test="child::*[local-name()='name']"&gt;
                                &lt;xd:name&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='name']"/&gt;
                                &lt;/xd:name&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='mailto']"&gt;
                                &lt;xd:mailto&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='mailto']"/&gt;
                                &lt;/xd:mailto&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='organization']"&gt;
                                &lt;xd:organization&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='organization']"/&gt;
                                &lt;/xd:organization&gt;
                            &lt;/xsl:if&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xd:author&gt;
            &lt;/xsl:if&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;&amp;lt;xd:contributor/&amp;gt;s are normalized in the same way as &amp;lt;xd:author/&amp;gt;s&lt;/xd:short&gt;&lt;xd:see&gt;#authors&lt;/xd:see&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="contributors"&gt;
        &lt;xsl:for-each select="*[local-name()='contributor']"&gt;
            &lt;xsl:variable name="is-empty" select="count(descendant-or-self::text()[string-length(normalize-space())&amp;gt;0])=0"/&gt;
            &lt;xsl:if test="not($is-empty)"&gt;
                &lt;xd:contributor&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="count(child::*)=0"&gt;
                            &lt;xd:name&gt;
                                &lt;xsl:value-of select="."/&gt;
                            &lt;/xd:name&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:if test="child::*[local-name()='name']"&gt;
                                &lt;xd:name&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='name']"/&gt;
                                &lt;/xd:name&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='mailto']"&gt;
                                &lt;xd:mailto&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='mailto']"/&gt;
                                &lt;/xd:mailto&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='organization']"&gt;
                                &lt;xd:organization&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='organization']"/&gt;
                                &lt;/xd:organization&gt;
                            &lt;/xsl:if&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xd:contributor&gt;
            &lt;/xsl:if&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;&amp;lt;xd:maintainer/&amp;gt;s are normalized in the same way as &amp;lt;xd:author/&amp;gt;s&lt;/xd:short&gt;&lt;xd:see&gt;#authors&lt;/xd:see&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="maintainers"&gt;
        &lt;xsl:for-each select="*[local-name()='maintainer']"&gt;
            &lt;xsl:variable name="is-empty" select="count(descendant-or-self::text()[string-length(normalize-space())&amp;gt;0])=0"/&gt;
            &lt;xsl:if test="not($is-empty)"&gt;
                &lt;xd:maintainer&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="count(child::*)=0"&gt;
                            &lt;xd:name&gt;
                                &lt;xsl:value-of select="."/&gt;
                            &lt;/xd:name&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:if test="child::*[local-name()='name']"&gt;
                                &lt;xd:name&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='name']"/&gt;
                                &lt;/xd:name&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='mailto']"&gt;
                                &lt;xd:mailto&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='mailto']"/&gt;
                                &lt;/xd:mailto&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='organization']"&gt;
                                &lt;xd:organization&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='organization']"/&gt;
                                &lt;/xd:organization&gt;
                            &lt;/xsl:if&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xd:maintainer&gt;
            &lt;/xsl:if&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes the xd:copyright-element.&lt;/xd:short&gt;&lt;xd:detail&gt;&amp;gt;xd:copyright/&amp;lt;s with no text are removed. &amp;lt;xd:copyright/&amp;gt;s with no child elements will have their text content wrapped in a &amp;lt;xd:name/&amp;gt; element. Children other than xd:year, xd:name, xd:mailto and xd:organization are ignored.&lt;/xd:detail&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="copyright"&gt;
        &lt;xsl:for-each select="*[local-name()='copyright']"&gt;
            &lt;xsl:variable name="is-empty" select="count(descendant-or-self::text()[string-length(normalize-space())&amp;gt;0])=0"/&gt;
            &lt;xsl:if test="not($is-empty)"&gt;
                &lt;xd:copyright&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="count(child::*)=0"&gt;
                            &lt;xd:name&gt;
                                &lt;xsl:value-of select="."/&gt;
                            &lt;/xd:name&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:if test="child::*[local-name()='year']"&gt;
                                &lt;xd:year&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='year']"/&gt;
                                &lt;/xd:year&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='name']"&gt;
                                &lt;xd:name&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='name']"/&gt;
                                &lt;/xd:name&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='mailto']"&gt;
                                &lt;xd:mailto&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='mailto']"/&gt;
                                &lt;/xd:mailto&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='organization']"&gt;
                                &lt;xd:organization&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='organization']"/&gt;
                                &lt;/xd:organization&gt;
                            &lt;/xsl:if&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xd:copyright&gt;
            &lt;/xsl:if&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:version elements.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="version"&gt;
        &lt;xsl:if test="child::*[local-name()='version' and string-length(normalize-space(./text()))&amp;gt;0]"&gt;
            &lt;xd:version&gt;
                &lt;xsl:value-of select="child::*[local-name()='version' and string-length(normalize-space(./text()))&amp;gt;0]"/&gt;
            &lt;/xd:version&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:since elements.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="since"&gt;
        &lt;xsl:if test="child::*[local-name()='since' and string-length(normalize-space(./text()))&amp;gt;0]"&gt;
            &lt;xd:since&gt;
                &lt;xsl:value-of select="child::*[local-name()='since' and string-length(normalize-space(./text()))&amp;gt;0]"/&gt;
            &lt;/xd:since&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:see elements.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="see"&gt;
        &lt;xsl:if test="child::*[local-name()='see' and string-length(normalize-space(./text()))&amp;gt;0]"&gt;
            &lt;xd:see&gt;
                &lt;xsl:value-of select="child::*[local-name()='see' and string-length(normalize-space(./text()))&amp;gt;0]"/&gt;
            &lt;/xd:see&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:deprecated elements.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="deprecated"&gt;
        &lt;xsl:if test="child::*[local-name()='deprecated' and string-length(normalize-space(./text()))&amp;gt;0]"&gt;
            &lt;xd:deprecated&gt;
                &lt;xsl:value-of select="child::*[local-name()='deprecated' and string-length(normalize-space(./text()))&amp;gt;0]"/&gt;
            &lt;/xd:deprecated&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:import elements.&lt;/xd:short&gt;&lt;xd:detail&gt;Will create empty documentation for imports that are not documented, and removes documentation of imports that does not exist in the code.&lt;/xd:detail&gt;&lt;xd:param name="code"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="import"&gt;
        &lt;xsl:param name="code" required="yes"/&gt;
        &lt;xsl:variable name="doc" select="."/&gt;
        &lt;xsl:for-each select="$code/xsl:import"&gt;
            &lt;xsl:variable name="href" select="@href"/&gt;
            &lt;xd:import href="{@href}"&gt;
                &lt;xsl:if test="$doc/*[local-name()='import' and @href=$href]"&gt;
                    &lt;xsl:value-of select="$doc/*[local-name()='import' and @href=$href]"/&gt;
                &lt;/xsl:if&gt;
            &lt;/xd:import&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:include elements.&lt;/xd:short&gt;&lt;xd:detail&gt;Will create empty documentation for includes that are not documented, and removes documentation of includes that does not exist in the code.&lt;/xd:detail&gt;&lt;xd:param name="code"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="include"&gt;
        &lt;xsl:param name="code" required="yes"/&gt;
        &lt;xsl:variable name="doc" select="."/&gt;
        &lt;xsl:for-each select="$code/xsl:include"&gt;
            &lt;xsl:variable name="href" select="@href"/&gt;
            &lt;xd:include href="{@href}"&gt;
                &lt;xsl:if test="$doc/*[local-name()='include' and @href=$href]"&gt;
                    &lt;xsl:value-of select="$doc/*[local-name()='include' and @href=$href]"/&gt;
                &lt;/xsl:if&gt;
            &lt;/xd:include&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:import elements.&lt;/xd:short&gt;&lt;xd:detail&gt;Will create empty documentation for imports that are not documented, and removes documentation of imports that does not exist in the code.&lt;/xd:detail&gt;&lt;xd:param name="code"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="param"&gt;
        &lt;xsl:param name="code" required="yes"/&gt;
        &lt;xsl:variable name="doc" select="."/&gt;
        &lt;xsl:for-each select="*[local-name()='param']"&gt;
            &lt;xd:param&gt;
                &lt;xsl:apply-templates select="@*"/&gt;
                &lt;xsl:apply-templates mode="section" select="node()"/&gt;
            &lt;/xd:param&gt;
        &lt;/xsl:for-each&gt;
        &lt;xsl:for-each select="$code/xsl:param"&gt;
            &lt;xsl:variable name="name" select="@name"/&gt;
            &lt;xsl:if test="not($doc/*[local-name()='param' and @name=$name])"&gt;
                &lt;xd:param name="{@name}"/&gt;
            &lt;/xsl:if&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Describes the result of the code.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="return"&gt;
        &lt;xsl:variable name="is-empty" select="count(*[local-name()='return']/descendant-or-self::node()[self::text() and string-length(normalize-space())&amp;gt;0 or local-name()='pre'])=0"/&gt;
        &lt;xsl:if test="not($is-empty)"&gt;
            &lt;xd:return&gt;
                &lt;xsl:apply-templates mode="section" select="*[local-name()='return']/node()"/&gt;
            &lt;/xd:return&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Matches all elements when in "section"-mode.&lt;/xd:short&gt;&lt;xd:detail&gt;
        
        Checks all child elements and their descendants and wraps and handles as is
            appropriate. If a child or descendant is placed in a problematic position, then one of
            the unwrap*-templates are called to solve the problem. Otherwise, just make sure that
            the element is in the correct namespace and copy it.
    &lt;/xd:detail&gt;&lt;xd:param name="wrapin-p"/&gt;&lt;xd:param name="wrapin-ul"/&gt;&lt;xd:param name="wrapin-li"/&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template mode="section" match="@*|node()"&gt;
        &lt;xsl:param name="wrapin-p" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-ul" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-li" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:variable name="is-empty" select="count(descendant-or-self::node()[self::text() and string-length(normalize-space())&amp;gt;0 or local-name()='pre'])=0"/&gt;
        &lt;xsl:variable name="contains-section" select="count(descendant::*[local-name()='section'])&amp;gt;0"/&gt;
        &lt;xsl:variable name="contains-block" select="count(descendant::*[local-name()='ul' or local-name()='li' or local-name()='pre' or local-name()='p'])&amp;gt;0"/&gt;
        &lt;xsl:variable name="contains-block-non-li" select="count(descendant::*[local-name()='ul' or local-name()='pre' or local-name()='p'])&amp;gt;0"/&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="local-name()='section'"&gt;
                &lt;xd:section&gt;
                    &lt;xsl:apply-templates mode="section" select="@*|node()"/&gt;
                &lt;/xd:section&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='p'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$contains-section or $contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-p" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:p&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:p&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='pre'"&gt;
                &lt;xd:pre&gt;
                    &lt;xsl:copy-of select="@*|node()"/&gt;
                &lt;/xd:pre&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='ul'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-section"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$contains-block-non-li"&gt;
                        &lt;xd:section&gt;
                            &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                                &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                            &lt;/xsl:call-template&gt;
                        &lt;/xd:section&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="count(descendant::*[local-name()='li'])=0"&gt;
                        &lt;xsl:choose&gt;
                            &lt;xsl:when test="count(child::node()[self::* or self::text() and string-length(normalize-space())&amp;gt;0])&amp;gt;1"&gt;
                                &lt;xd:section&gt;
                                    &lt;xsl:apply-templates mode="section" select="@*|node()"&gt;
                                        &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                                        &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                                    &lt;/xsl:apply-templates&gt;
                                &lt;/xd:section&gt;
                            &lt;/xsl:when&gt;
                            &lt;xsl:otherwise&gt;
                                &lt;xsl:apply-templates mode="section" select="@*|node()"&gt;
                                    &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                                &lt;/xsl:apply-templates&gt;
                            &lt;/xsl:otherwise&gt;
                        &lt;/xsl:choose&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:ul&gt;
                            &lt;xsl:apply-templates mode="list" select="@*|node()"&gt;
                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:ul&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='li'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-section"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:ul&gt;
                            &lt;xd:li&gt;
                                &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                            &lt;/xd:li&gt;
                        &lt;/xd:ul&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='b'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-section"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-b" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-b" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:b&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:b&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='i'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-section"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-i" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-i" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:i&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:i&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='a'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-section"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-a" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-a-elem" select="." tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-a" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-a-elem" select="." tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:a&gt;
                            &lt;xsl:apply-templates select="@*"/&gt;
                            &lt;xsl:apply-templates mode="phrase" select="node()"/&gt;
                        &lt;/xd:a&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="self::*"&gt;
                        &lt;xsl:choose&gt;
                            &lt;xsl:when test="not(preceding-sibling::*) and not(following-sibling::*)"&gt;
                                &lt;xsl:apply-templates mode="section" select="@*|node()"/&gt;
                            &lt;/xsl:when&gt;
                            &lt;xsl:otherwise&gt;
                                &lt;xd:section&gt;
                                    &lt;xsl:apply-templates mode="section" select="@*|node()"/&gt;
                                &lt;/xd:section&gt;
                            &lt;/xsl:otherwise&gt;
                        &lt;/xsl:choose&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="self::text()"&gt;
                        &lt;xsl:copy/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="section" select="@*|node()"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Handles non-problematic lists.&lt;/xd:short&gt;&lt;xd:param name="wrapin-p"/&gt;&lt;xd:param name="wrapin-ul"/&gt;&lt;xd:param name="wrapin-li"/&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template mode="list" match="@*|node()"&gt;
        &lt;xsl:param name="wrapin-p" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-ul" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-li" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:variable name="is-empty" select="count(descendant-or-self::node()[self::text() and string-length(normalize-space())&amp;gt;0 or local-name()='pre'])=0"/&gt;
        &lt;xsl:variable name="contains-block" select="count(descendant::*[local-name()='ul' or local-name()='li' or local-name()='pre' or local-name()='p'])&amp;gt;0"/&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="local-name()='li'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$wrapin-ul"&gt;
                        &lt;xd:ul&gt;
                            &lt;xd:li&gt;
                                &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                            &lt;/xd:li&gt;
                        &lt;/xd:ul&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:li&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:li&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="self::text()"&gt;
                        &lt;xsl:copy/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="list" select="@*|node()"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Handles all elements when in "block" mode and applies fixes where needed.&lt;/xd:short&gt;&lt;xd:param name="wrapin-p"/&gt;&lt;xd:param name="wrapin-ul"/&gt;&lt;xd:param name="wrapin-li"/&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template mode="block" match="@*|node()"&gt;
        &lt;xsl:param name="wrapin-p" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-ul" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-li" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:variable name="element" select="."/&gt;
        &lt;xsl:variable name="is-empty" select="count(descendant-or-self::node()[self::* or self::text() and string-length(normalize-space())&amp;gt;0])=0"/&gt;
        &lt;xsl:variable name="contains-block" select="count(descendant::*[local-name()='ul' or local-name()='li' or local-name()='pre' or local-name()='p'])&amp;gt;0"/&gt;
        &lt;xsl:variable name="contains-block-non-li" select="count(descendant::*[local-name()='ul' or local-name()='pre' or local-name()='p'])&amp;gt;0"/&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="local-name()='p'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:p&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:p&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='pre'"&gt;
                &lt;xd:pre&gt;
                    &lt;xsl:copy-of select="@*|node()"/&gt;
                &lt;/xd:pre&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='ul'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block-non-li"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="count(descendant::*[local-name()='li' and string-length(normalize-space(descendant-or-self::text()))&amp;gt;0])=0"&gt;
                        &lt;xsl:apply-templates mode="block" select="@*|node()"/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:ul&gt;
                            &lt;xsl:apply-templates mode="list" select="@*|node()"&gt;
                                &lt;xsl:with-param name="wrapin-ul" select="false()"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:ul&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='li'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:ul&gt;
                            &lt;xd:li&gt;
                                &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                                    &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                &lt;/xsl:apply-templates&gt;
                            &lt;/xd:li&gt;
                        &lt;/xd:ul&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="not($contains-block) and $wrapin-p"&gt;
                &lt;xd:p&gt;
                    &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                        &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                        &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                        &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                    &lt;/xsl:apply-templates&gt;
                &lt;/xd:p&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="not($contains-block) and $wrapin-li"&gt;
                &lt;xd:ul&gt;
                    &lt;xd:li&gt;
                        &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                            &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xd:li&gt;
                &lt;/xd:ul&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='b'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-b" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:b&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:b&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='i'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-i" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:i&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:i&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='a'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-a" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-a-elem" select="$element" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:a&gt;
                            &lt;xsl:apply-templates mode="phrase" select="$element/@*"/&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:a&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="self::text()"&gt;
                        &lt;xsl:copy/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="block" select="@*|node()"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Phrases are matched with this template (mode="phrase") and handled appropriately.&lt;/xd:short&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template mode="phrase" match="@*|node()"&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="local-name()='b'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='b'])"&gt;
                        &lt;xd:b&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:b&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="$wrapin-b"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='b'])"&gt;
                        &lt;xd:b&gt;
                            &lt;xsl:apply-templates mode="phrase" select="."&gt;
                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:b&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="."&gt;
                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='i'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='i'])"&gt;
                        &lt;xd:i&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:i&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="$wrapin-i"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='i'])"&gt;
                        &lt;xd:i&gt;
                            &lt;xsl:apply-templates mode="phrase" select="."&gt;
                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:i&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="."&gt;
                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='a'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='a'])"&gt;
                        &lt;xd:a&gt;
                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                            &lt;xsl:apply-templates mode="phrase" select="node()"&gt;
                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:a&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="$wrapin-a"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='a'])"&gt;
                        &lt;xd:a&gt;
                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                            &lt;xsl:apply-templates mode="phrase" select="."&gt;
                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:a&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="."&gt;
                            &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="self::text()"&gt;
                        &lt;xsl:copy/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;This template unwraps problematic elements into sections.&lt;/xd:short&gt;&lt;xd:param name="wasWrapped"/&gt;&lt;xd:param name="wrapin-p"/&gt;&lt;xd:param name="wrapin-ul"/&gt;&lt;xd:param name="wrapin-li"/&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="unwrap-to-sections"&gt;
        &lt;xsl:param name="wasWrapped" select="false()"/&gt;
        &lt;xsl:param name="wrapin-p" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-ul" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-li" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:variable name="element" select="."/&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="not($wasWrapped) and count(child::node()[self::* or self::text() and string-length(normalize-space())&amp;gt;0])&amp;gt;1"&gt;
                &lt;xd:section&gt;
                    &lt;xsl:call-template name="unwrap-to-sections"&gt;
                        &lt;xsl:with-param name="wasWrapped" select="true()"/&gt;
                    &lt;/xsl:call-template&gt;
                &lt;/xd:section&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
                &lt;xsl:for-each-group select="child::node()[self::* or self::text() and string-length(normalize-space())&amp;gt;0]" group-adjacent="self::* and not(ancestor::*[local-name()='pre']) and (local-name()='section' or local-name()='ul' or local-name()='li' or local-name()='pre' or local-name()='p')"&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="current-grouping-key()"&gt;
                            &lt;xsl:choose&gt;
                                &lt;xsl:when test="count(current-group())&amp;gt;1 and last()&amp;gt;1"&gt;
                                    &lt;xd:section&gt;
                                        &lt;xsl:apply-templates mode="section" select="current-group()"&gt;
                                            &lt;xsl:with-param name="wrapin-p" tunnel="yes" select="if ($wrapin-p or local-name($element)='p') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-ul" tunnel="yes" select="if ($wrapin-ul or local-name($element)='ul') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-li" tunnel="yes" select="if ($wrapin-li or local-name($element)='li') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-b" tunnel="yes" select="if ($wrapin-b or local-name($element)='b') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-i" tunnel="yes" select="if ($wrapin-i or local-name($element)='i') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-a" tunnel="yes" select="if ($wrapin-a or local-name($element)='a') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-a-elem" tunnel="yes" select="if (not($wrapin-a) and local-name($element)='a') then $element else false()"/&gt;
                                        &lt;/xsl:apply-templates&gt;
                                    &lt;/xd:section&gt;
                                &lt;/xsl:when&gt;
                                &lt;xsl:otherwise&gt;
                                    &lt;xsl:apply-templates mode="section" select="current-group()"&gt;
                                        &lt;xsl:with-param name="wrapin-p" tunnel="yes" select="if ($wrapin-p or local-name($element)='p') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-ul" tunnel="yes" select="if ($wrapin-ul or local-name($element)='ul') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-li" tunnel="yes" select="if ($wrapin-li or local-name($element)='li') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-b" tunnel="yes" select="if ($wrapin-b or local-name($element)='b') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-i" tunnel="yes" select="if ($wrapin-i or local-name($element)='i') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-a" tunnel="yes" select="if ($wrapin-a or local-name($element)='a') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-a-elem" tunnel="yes" select="if (not($wrapin-a) and local-name($element)='a') then $element else false()"/&gt;
                                    &lt;/xsl:apply-templates&gt;
                                &lt;/xsl:otherwise&gt;
                            &lt;/xsl:choose&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:element name="xd:{local-name($element)}"&gt;
                                &lt;xsl:for-each select="$element/@*"&gt;
                                    &lt;xsl:attribute name="xd:{local-name()}" select="."/&gt;
                                &lt;/xsl:for-each&gt;
                                &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                    &lt;xsl:with-param name="wrapin-p" tunnel="yes" select="if ($wrapin-p or local-name($element)='p') then false() else $wrapin-p"/&gt;
                                    &lt;xsl:with-param name="wrapin-ul" tunnel="yes" select="if ($wrapin-ul or local-name($element)='ul') then false() else $wrapin-ul"/&gt;
                                    &lt;xsl:with-param name="wrapin-li" tunnel="yes" select="if ($wrapin-li or local-name($element)='li') then false() else $wrapin-li"/&gt;
                                    &lt;xsl:with-param name="wrapin-b" tunnel="yes" select="if ($wrapin-b or local-name($element)='b') then false() else $wrapin-b"/&gt;
                                    &lt;xsl:with-param name="wrapin-i" tunnel="yes" select="if ($wrapin-i or local-name($element)='i') then false() else $wrapin-i"/&gt;
                                    &lt;xsl:with-param name="wrapin-a" tunnel="yes" select="if ($wrapin-a or local-name($element)='a') then false() else $wrapin-a"/&gt;
                                &lt;/xsl:apply-templates&gt;
                            &lt;/xsl:element&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xsl:for-each-group&gt;
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;This template unwraps problematic elements into blocks.&lt;/xd:short&gt;&lt;xd:param name="wrapin-p"/&gt;&lt;xd:param name="wrapin-ul"/&gt;&lt;xd:param name="wrapin-li"/&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="unwrap-to-blocks"&gt;
        &lt;xsl:param name="wrapin-p" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-ul" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-li" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:variable name="element" select="."/&gt;
        &lt;xsl:for-each-group select="child::node()[self::* or self::text() and string-length(normalize-space())&amp;gt;0]" group-adjacent="count(descendant-or-self::*[local-name()='ul' or local-name()='li' or local-name()='pre' or local-name()='p'])&amp;gt;0"&gt;
            &lt;xsl:choose&gt;
                &lt;xsl:when test="current-grouping-key()"&gt;
                    &lt;xsl:for-each select="current-group()"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-p" select="$wrapin-p or local-name()='p' or local-name($element)='p'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="$wrapin-ul or local-name()='ul' or local-name($element)='ul'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="$wrapin-li or local-name()='li' or local-name($element)='li'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-b" select="$wrapin-b or local-name()='b' or local-name($element)='b'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-i" select="$wrapin-i or local-name()='i' or local-name($element)='i'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-a" select="$wrapin-a or local-name()='a' or local-name($element)='a'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-a-elem" select="if (local-name()='a') then . else (if (local-name($element)='a') then $element else $wrapin-a-elem)" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:for-each&gt;
                &lt;/xsl:when&gt;
                &lt;xsl:otherwise&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="$wrapin-p"&gt;
                            &lt;xd:p&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="$wrapin-b"&gt;
                                        &lt;xd:b&gt;
                                            &lt;xsl:choose&gt;
                                                &lt;xsl:when test="$wrapin-i"&gt;
                                                  &lt;xd:i&gt;
                                                  &lt;xsl:choose&gt;
                                                  &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                  &lt;/xsl:when&gt;
                                                  &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xsl:otherwise&gt;
                                                  &lt;/xsl:choose&gt;
                                                  &lt;/xd:i&gt;
                                                &lt;/xsl:when&gt;
                                                &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                &lt;/xsl:otherwise&gt;
                                            &lt;/xsl:choose&gt;
                                        &lt;/xd:b&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:when test="$wrapin-i"&gt;
                                        &lt;xd:i&gt;
                                            &lt;xsl:choose&gt;
                                                &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                &lt;/xsl:when&gt;
                                                &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                &lt;/xsl:otherwise&gt;
                                            &lt;/xsl:choose&gt;
                                        &lt;/xd:i&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:when test="$wrapin-a"&gt;
                                        &lt;xd:a&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                            &lt;/xsl:apply-templates&gt;
                                        &lt;/xd:a&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                            &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                        &lt;/xsl:apply-templates&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xd:p&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="$wrapin-li"&gt;
                            &lt;xd:ul&gt;
                                &lt;xd:li&gt;
                                    &lt;xsl:choose&gt;
                                        &lt;xsl:when test="$wrapin-b"&gt;
                                            &lt;xd:b&gt;
                                                &lt;xsl:choose&gt;
                                                  &lt;xsl:when test="$wrapin-i"&gt;
                                                  &lt;xd:i&gt;
                                                  &lt;xsl:choose&gt;
                                                  &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                  &lt;/xsl:when&gt;
                                                  &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xsl:otherwise&gt;
                                                  &lt;/xsl:choose&gt;
                                                  &lt;/xd:i&gt;
                                                  &lt;/xsl:when&gt;
                                                  &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xsl:otherwise&gt;
                                                &lt;/xsl:choose&gt;
                                            &lt;/xd:b&gt;
                                        &lt;/xsl:when&gt;
                                        &lt;xsl:when test="$wrapin-i"&gt;
                                            &lt;xd:i&gt;
                                                &lt;xsl:choose&gt;
                                                  &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                  &lt;/xsl:when&gt;
                                                  &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xsl:otherwise&gt;
                                                &lt;/xsl:choose&gt;
                                            &lt;/xd:i&gt;
                                        &lt;/xsl:when&gt;
                                        &lt;xsl:when test="$wrapin-a"&gt;
                                            &lt;xd:a&gt;
                                                &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                &lt;/xsl:apply-templates&gt;
                                            &lt;/xd:a&gt;
                                        &lt;/xsl:when&gt;
                                        &lt;xsl:otherwise&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                            &lt;/xsl:apply-templates&gt;
                                        &lt;/xsl:otherwise&gt;
                                    &lt;/xsl:choose&gt;
                                &lt;/xd:li&gt;
                            &lt;/xd:ul&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="$wrapin-ul"&gt;
                            &lt;xd:p&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="$wrapin-b"&gt;
                                        &lt;xd:b&gt;
                                            &lt;xsl:choose&gt;
                                                &lt;xsl:when test="$wrapin-i"&gt;
                                                  &lt;xd:i&gt;
                                                  &lt;xsl:choose&gt;
                                                  &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                  &lt;/xsl:when&gt;
                                                  &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xsl:otherwise&gt;
                                                  &lt;/xsl:choose&gt;
                                                  &lt;/xd:i&gt;
                                                &lt;/xsl:when&gt;
                                                &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                &lt;/xsl:otherwise&gt;
                                            &lt;/xsl:choose&gt;
                                        &lt;/xd:b&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:when test="$wrapin-i"&gt;
                                        &lt;xd:i&gt;
                                            &lt;xsl:choose&gt;
                                                &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                &lt;/xsl:when&gt;
                                                &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                &lt;/xsl:otherwise&gt;
                                            &lt;/xsl:choose&gt;
                                        &lt;/xd:i&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:when test="$wrapin-a"&gt;
                                        &lt;xd:a&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                            &lt;/xsl:apply-templates&gt;
                                        &lt;/xd:a&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                            &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                        &lt;/xsl:apply-templates&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xd:p&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="$wrapin-b"&gt;
                            &lt;xd:b&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="$wrapin-i"&gt;
                                        &lt;xd:i&gt;
                                            &lt;xsl:choose&gt;
                                                &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                &lt;/xsl:when&gt;
                                                &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                &lt;/xsl:otherwise&gt;
                                            &lt;/xsl:choose&gt;
                                        &lt;/xd:i&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:when test="$wrapin-a"&gt;
                                        &lt;xd:a&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                            &lt;/xsl:apply-templates&gt;
                                        &lt;/xd:a&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                            &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                        &lt;/xsl:apply-templates&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xd:b&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="$wrapin-i"&gt;
                            &lt;xd:i&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="$wrapin-a"&gt;
                                        &lt;xd:a&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                            &lt;/xsl:apply-templates&gt;
                                        &lt;/xd:a&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                            &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                        &lt;/xsl:apply-templates&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xd:i&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="$wrapin-a"&gt;
                            &lt;xd:a&gt;
                                &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                    &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                &lt;/xsl:apply-templates&gt;
                            &lt;/xd:a&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xsl:otherwise&gt;
            &lt;/xsl:choose&gt;
        &lt;/xsl:for-each-group&gt;
    &lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;&lt;/codeblock&gt;
    &lt;xsl:template name="include"&gt;
        &lt;xsl:param name="code" required="yes"/&gt;
        &lt;xsl:variable name="doc" select="."/&gt;
        &lt;xsl:for-each select="$code/xsl:include"&gt;
            &lt;xsl:variable name="href" select="@href"/&gt;
            &lt;xd:include href="{@href}"&gt;
                &lt;xsl:if test="$doc/*[local-name()='include' and @href=$href]"&gt;
                    &lt;xsl:value-of select="$doc/*[local-name()='include' and @href=$href]"/&gt;
                &lt;/xsl:if&gt;
            &lt;/xd:include&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;codeblock&gt;&lt;xsl:stylesheet version="2.0"&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Identity template.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template match="@*|node()"&gt;
        &lt;xsl:copy&gt;
            &lt;xsl:apply-templates select="@*|node()"/&gt;
        &lt;/xsl:copy&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Matches each xd:doc element.&lt;/xd:short&gt;&lt;xd:detail&gt;
        
        Determines what code is being documented and calls appropriate templates for: &lt;xd:ul&gt;
                &lt;xd:li&gt;short description (xd:short)&lt;/xd:li&gt;
                &lt;xd:li&gt;detailed description (xd:detail)&lt;/xd:li&gt;
                &lt;xd:li&gt;authors (xd:author)&lt;/xd:li&gt;
                &lt;xd:li&gt;contributors (xd:contributor)&lt;/xd:li&gt;
                &lt;xd:li&gt;maintainers (xd:maintainer)&lt;/xd:li&gt;
                &lt;xd:li&gt;copyright (xd:copyright)&lt;/xd:li&gt;
                &lt;xd:li&gt;version (xd:version)&lt;/xd:li&gt;
                &lt;xd:li&gt;code existed since version (xd:since)&lt;/xd:li&gt;
                &lt;xd:li&gt;see also (xd:see)&lt;/xd:li&gt;
                &lt;xd:li&gt;deprecated since version (xd:deprecated)&lt;/xd:li&gt;
                &lt;xd:li&gt;import statements (xd:import and xsl:import)&lt;/xd:li&gt;
                &lt;xd:li&gt;include statements (xd:include and xsl:include)&lt;/xd:li&gt;
                &lt;xd:li&gt;parameters (xd:param and xsl:param)&lt;/xd:li&gt;
                &lt;xd:li&gt;return values / output (xd:return)&lt;/xd:li&gt;
            &lt;/xd:ul&gt;
        
        
    &lt;/xd:detail&gt;&lt;xd:return&gt;The normalized xd:doc.&lt;/xd:return&gt;&lt;/xd:doc&gt;
    &lt;xsl:template match="xd:doc"&gt;
        &lt;xsl:copy&gt;
            &lt;xsl:variable name="target"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="@target"&gt;
                        &lt;xsl:value-of select="@target"/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="count(preceding-sibling::*)=0"&gt;
                        &lt;xsl:value-of select="'parent'"/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:value-of select="'following'"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:variable&gt;
            &lt;xsl:variable name="code" select="if ($target='parent') then parent::* else following-sibling::*[1]"/&gt;

            &lt;xsl:attribute name="target" select="$target"/&gt;

            &lt;xsl:call-template name="short"/&gt;
            &lt;xsl:call-template name="detail"/&gt;
            &lt;xsl:call-template name="authors"/&gt;
            &lt;xsl:call-template name="contributors"/&gt;
            &lt;xsl:call-template name="maintainers"/&gt;
            &lt;xsl:call-template name="copyright"/&gt;
            &lt;xsl:call-template name="version"/&gt;
            &lt;xsl:call-template name="since"/&gt;
            &lt;xsl:call-template name="see"/&gt;
            &lt;xsl:call-template name="deprecated"/&gt;
            &lt;xsl:call-template name="import"&gt;
                &lt;xsl:with-param name="code" select="$code"/&gt;
            &lt;/xsl:call-template&gt;
            &lt;xsl:call-template name="include"&gt;
                &lt;xsl:with-param name="code" select="$code"/&gt;
            &lt;/xsl:call-template&gt;
            &lt;xsl:call-template name="param"&gt;
                &lt;xsl:with-param name="code" select="$code"/&gt;
            &lt;/xsl:call-template&gt;
            &lt;xsl:call-template name="return"/&gt;
        &lt;/xsl:copy&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Determines the short description.&lt;/xd:short&gt;&lt;xd:detail&gt;
        
        
            &lt;xd:ul&gt;
                &lt;xd:li&gt;If there is no &amp;lt;xd:short/&amp;gt;-element present, but plain text is present as a
                    child of the &amp;lt;xd:doc/&amp;gt;element, then the first sentence from that text (up
                    until the first period (".") will be used as a short description.&lt;/xd:li&gt;
                &lt;xd:li&gt;Else; if there are multiple &amp;lt;xd:short/&amp;gt;-elements, each one of their
                    contents will be wrapped in separate &amp;lt;section/&amp;gt;s.&lt;/xd:li&gt;
                &lt;xd:li&gt;Else; use the one &amp;lt;xd:short/&amp;gt;-element that is present for the short
                    description.&lt;/xd:li&gt;
            &lt;/xd:ul&gt;
        
    &lt;/xd:detail&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="short"&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="count(child::*[local-name()='short'])&amp;gt;1"&gt;
                &lt;xd:short&gt;
                    &lt;xsl:for-each select="child::*[local-name()='short']"&gt;
                        &lt;xd:section&gt;
                            &lt;xsl:apply-templates mode="section"/&gt;
                        &lt;/xd:section&gt;
                    &lt;/xsl:for-each&gt;
                &lt;/xd:short&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="count(child::*[local-name()='short'])=1"&gt;
                &lt;xd:short&gt;
                    &lt;xsl:apply-templates select="child::*[local-name()='short']/node()" mode="section"/&gt;
                &lt;/xd:short&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="child::text()[string-length(normalize-space())&amp;gt;0]"&gt;
                &lt;xsl:variable name="short" select="replace(normalize-space(child::text()[1]),'^([^\.]+\.?)\s?.*$','$1')"/&gt;
                &lt;xd:short&gt;
                    &lt;xsl:value-of select="$short"/&gt;
                &lt;/xd:short&gt;
            &lt;/xsl:when&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Determines the detailed description.&lt;/xd:short&gt;&lt;xd:detail&gt;
        
        The detailed description will be put together based on any number of
            &amp;lt;xd:detail/&amp;gt;-elements, as well as any number of text nodes that are direct
            children of the &amp;lt;xd:doc/&amp;gt;-element. If the xd:short was extracted from the first
            text node, then the first sentence from that text node will be ignored. If there are
            multiple &amp;lt;xd:detail/&amp;gt; and text nodes, then each of them will be wrapped in
            &amp;lt;xd:section/&amp;gt;s.
    &lt;/xd:detail&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="detail"&gt;
        &lt;xsl:variable name="shortInFirstText" select="count(./*[local-name()='short'])=0"/&gt;
        &lt;xsl:variable name="detailCount" select="(if (matches(normalize-space(./text()[1]),'\.[^\.].')) then 1 else 0) + count(*[local-name()='detail' and (descendant-or-self::node()[self::text() and string-length(normalize-space())&amp;gt;0 or local-name()='pre' and not(ancestor::*[local-name()='pre'])])]) + count(./text()[not(position()=1) and string-length(normalize-space())&amp;gt;0])"/&gt;
        &lt;xsl:if test="$detailCount&amp;gt;0"&gt;
            &lt;xd:detail&gt;
                &lt;xsl:for-each select="*|text()"&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="self::text() and count(preceding-sibling::text()[string-length(normalize-space())&amp;gt;0])=0"&gt;
                            &lt;!-- first text --&gt;
                            &lt;xsl:choose&gt;
                                &lt;xsl:when test="$shortInFirstText"&gt;
                                    &lt;xsl:variable name="detail" select="replace(normalize-space(),'^[^\.]+.?\s?(.*)$','$1')"/&gt;
                                    &lt;xsl:choose&gt;
                                        &lt;xsl:when test="$detailCount&amp;gt;1"&gt;
                                            &lt;xd:section&gt;
                                                &lt;xsl:value-of select="$detail"/&gt;
                                            &lt;/xd:section&gt;
                                        &lt;/xsl:when&gt;
                                        &lt;xsl:otherwise&gt;
                                            &lt;xsl:value-of select="$detail"/&gt;
                                        &lt;/xsl:otherwise&gt;
                                    &lt;/xsl:choose&gt;
                                &lt;/xsl:when&gt;
                                &lt;xsl:otherwise&gt;
                                    &lt;xsl:choose&gt;
                                        &lt;xsl:when test="$detailCount&amp;gt;1"&gt;
                                            &lt;xd:section&gt;
                                                &lt;xsl:value-of select="."/&gt;
                                            &lt;/xd:section&gt;
                                        &lt;/xsl:when&gt;
                                        &lt;xsl:otherwise&gt;
                                            &lt;xsl:value-of select="."/&gt;
                                        &lt;/xsl:otherwise&gt;
                                    &lt;/xsl:choose&gt;
                                &lt;/xsl:otherwise&gt;
                            &lt;/xsl:choose&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="self::text()"&gt;
                            &lt;!-- non-first text --&gt;
                            &lt;xsl:choose&gt;
                                &lt;xsl:when test="$detailCount&amp;gt;1"&gt;
                                    &lt;xd:section&gt;
                                        &lt;xsl:value-of select="."/&gt;
                                    &lt;/xd:section&gt;
                                &lt;/xsl:when&gt;
                                &lt;xsl:otherwise&gt;
                                    &lt;xsl:value-of select="."/&gt;
                                &lt;/xsl:otherwise&gt;
                            &lt;/xsl:choose&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="local-name()='detail'"&gt;
                            &lt;!-- detail element --&gt;
                            &lt;xsl:choose&gt;
                                &lt;xsl:when test="$detailCount&amp;gt;1"&gt;
                                    &lt;xd:section&gt;
                                        &lt;xsl:apply-templates select="child::node()" mode="section"/&gt;
                                    &lt;/xd:section&gt;
                                &lt;/xsl:when&gt;
                                &lt;xsl:otherwise&gt;
                                    &lt;xsl:apply-templates select="child::node()" mode="section"/&gt;
                                &lt;/xsl:otherwise&gt;
                            &lt;/xsl:choose&gt;
                        &lt;/xsl:when&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xsl:for-each&gt;
            &lt;/xd:detail&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes the xd:author-elements.&lt;/xd:short&gt;&lt;xd:detail&gt;&amp;gt;xd:author/&amp;lt;s with no text are removed. &amp;lt;xd:author/&amp;gt;s with no child elements will have their text content wrapped in a &amp;lt;xd:name/&amp;gt; element. Children other than xd:name, xd:mailto and xd:organization are ignored.&lt;/xd:detail&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="authors" xml:id="authors"&gt;
        &lt;xsl:for-each select="*[local-name()='author']"&gt;
            &lt;xsl:variable name="is-empty" select="count(descendant-or-self::text()[string-length(normalize-space())&amp;gt;0])=0"/&gt;
            &lt;xsl:if test="not($is-empty)"&gt;
                &lt;xd:author&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="count(child::*)=0"&gt;
                            &lt;xd:name&gt;
                                &lt;xsl:value-of select="."/&gt;
                            &lt;/xd:name&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:if test="child::*[local-name()='name']"&gt;
                                &lt;xd:name&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='name']"/&gt;
                                &lt;/xd:name&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='mailto']"&gt;
                                &lt;xd:mailto&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='mailto']"/&gt;
                                &lt;/xd:mailto&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='organization']"&gt;
                                &lt;xd:organization&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='organization']"/&gt;
                                &lt;/xd:organization&gt;
                            &lt;/xsl:if&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xd:author&gt;
            &lt;/xsl:if&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;&amp;lt;xd:contributor/&amp;gt;s are normalized in the same way as &amp;lt;xd:author/&amp;gt;s&lt;/xd:short&gt;&lt;xd:see&gt;#authors&lt;/xd:see&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="contributors"&gt;
        &lt;xsl:for-each select="*[local-name()='contributor']"&gt;
            &lt;xsl:variable name="is-empty" select="count(descendant-or-self::text()[string-length(normalize-space())&amp;gt;0])=0"/&gt;
            &lt;xsl:if test="not($is-empty)"&gt;
                &lt;xd:contributor&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="count(child::*)=0"&gt;
                            &lt;xd:name&gt;
                                &lt;xsl:value-of select="."/&gt;
                            &lt;/xd:name&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:if test="child::*[local-name()='name']"&gt;
                                &lt;xd:name&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='name']"/&gt;
                                &lt;/xd:name&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='mailto']"&gt;
                                &lt;xd:mailto&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='mailto']"/&gt;
                                &lt;/xd:mailto&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='organization']"&gt;
                                &lt;xd:organization&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='organization']"/&gt;
                                &lt;/xd:organization&gt;
                            &lt;/xsl:if&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xd:contributor&gt;
            &lt;/xsl:if&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;&amp;lt;xd:maintainer/&amp;gt;s are normalized in the same way as &amp;lt;xd:author/&amp;gt;s&lt;/xd:short&gt;&lt;xd:see&gt;#authors&lt;/xd:see&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="maintainers"&gt;
        &lt;xsl:for-each select="*[local-name()='maintainer']"&gt;
            &lt;xsl:variable name="is-empty" select="count(descendant-or-self::text()[string-length(normalize-space())&amp;gt;0])=0"/&gt;
            &lt;xsl:if test="not($is-empty)"&gt;
                &lt;xd:maintainer&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="count(child::*)=0"&gt;
                            &lt;xd:name&gt;
                                &lt;xsl:value-of select="."/&gt;
                            &lt;/xd:name&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:if test="child::*[local-name()='name']"&gt;
                                &lt;xd:name&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='name']"/&gt;
                                &lt;/xd:name&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='mailto']"&gt;
                                &lt;xd:mailto&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='mailto']"/&gt;
                                &lt;/xd:mailto&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='organization']"&gt;
                                &lt;xd:organization&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='organization']"/&gt;
                                &lt;/xd:organization&gt;
                            &lt;/xsl:if&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xd:maintainer&gt;
            &lt;/xsl:if&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes the xd:copyright-element.&lt;/xd:short&gt;&lt;xd:detail&gt;&amp;gt;xd:copyright/&amp;lt;s with no text are removed. &amp;lt;xd:copyright/&amp;gt;s with no child elements will have their text content wrapped in a &amp;lt;xd:name/&amp;gt; element. Children other than xd:year, xd:name, xd:mailto and xd:organization are ignored.&lt;/xd:detail&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="copyright"&gt;
        &lt;xsl:for-each select="*[local-name()='copyright']"&gt;
            &lt;xsl:variable name="is-empty" select="count(descendant-or-self::text()[string-length(normalize-space())&amp;gt;0])=0"/&gt;
            &lt;xsl:if test="not($is-empty)"&gt;
                &lt;xd:copyright&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="count(child::*)=0"&gt;
                            &lt;xd:name&gt;
                                &lt;xsl:value-of select="."/&gt;
                            &lt;/xd:name&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:if test="child::*[local-name()='year']"&gt;
                                &lt;xd:year&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='year']"/&gt;
                                &lt;/xd:year&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='name']"&gt;
                                &lt;xd:name&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='name']"/&gt;
                                &lt;/xd:name&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='mailto']"&gt;
                                &lt;xd:mailto&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='mailto']"/&gt;
                                &lt;/xd:mailto&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='organization']"&gt;
                                &lt;xd:organization&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='organization']"/&gt;
                                &lt;/xd:organization&gt;
                            &lt;/xsl:if&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xd:copyright&gt;
            &lt;/xsl:if&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:version elements.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="version"&gt;
        &lt;xsl:if test="child::*[local-name()='version' and string-length(normalize-space(./text()))&amp;gt;0]"&gt;
            &lt;xd:version&gt;
                &lt;xsl:value-of select="child::*[local-name()='version' and string-length(normalize-space(./text()))&amp;gt;0]"/&gt;
            &lt;/xd:version&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:since elements.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="since"&gt;
        &lt;xsl:if test="child::*[local-name()='since' and string-length(normalize-space(./text()))&amp;gt;0]"&gt;
            &lt;xd:since&gt;
                &lt;xsl:value-of select="child::*[local-name()='since' and string-length(normalize-space(./text()))&amp;gt;0]"/&gt;
            &lt;/xd:since&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:see elements.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="see"&gt;
        &lt;xsl:if test="child::*[local-name()='see' and string-length(normalize-space(./text()))&amp;gt;0]"&gt;
            &lt;xd:see&gt;
                &lt;xsl:value-of select="child::*[local-name()='see' and string-length(normalize-space(./text()))&amp;gt;0]"/&gt;
            &lt;/xd:see&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:deprecated elements.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="deprecated"&gt;
        &lt;xsl:if test="child::*[local-name()='deprecated' and string-length(normalize-space(./text()))&amp;gt;0]"&gt;
            &lt;xd:deprecated&gt;
                &lt;xsl:value-of select="child::*[local-name()='deprecated' and string-length(normalize-space(./text()))&amp;gt;0]"/&gt;
            &lt;/xd:deprecated&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:import elements.&lt;/xd:short&gt;&lt;xd:detail&gt;Will create empty documentation for imports that are not documented, and removes documentation of imports that does not exist in the code.&lt;/xd:detail&gt;&lt;xd:param name="code"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="import"&gt;
        &lt;xsl:param name="code" required="yes"/&gt;
        &lt;xsl:variable name="doc" select="."/&gt;
        &lt;xsl:for-each select="$code/xsl:import"&gt;
            &lt;xsl:variable name="href" select="@href"/&gt;
            &lt;xd:import href="{@href}"&gt;
                &lt;xsl:if test="$doc/*[local-name()='import' and @href=$href]"&gt;
                    &lt;xsl:value-of select="$doc/*[local-name()='import' and @href=$href]"/&gt;
                &lt;/xsl:if&gt;
            &lt;/xd:import&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:include elements.&lt;/xd:short&gt;&lt;xd:detail&gt;Will create empty documentation for includes that are not documented, and removes documentation of includes that does not exist in the code.&lt;/xd:detail&gt;&lt;xd:param name="code"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="include"&gt;
        &lt;xsl:param name="code" required="yes"/&gt;
        &lt;xsl:variable name="doc" select="."/&gt;
        &lt;xsl:for-each select="$code/xsl:include"&gt;
            &lt;xsl:variable name="href" select="@href"/&gt;
            &lt;xd:include href="{@href}"&gt;
                &lt;xsl:if test="$doc/*[local-name()='include' and @href=$href]"&gt;
                    &lt;xsl:value-of select="$doc/*[local-name()='include' and @href=$href]"/&gt;
                &lt;/xsl:if&gt;
            &lt;/xd:include&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:import elements.&lt;/xd:short&gt;&lt;xd:detail&gt;Will create empty documentation for imports that are not documented, and removes documentation of imports that does not exist in the code.&lt;/xd:detail&gt;&lt;xd:param name="code"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="param"&gt;
        &lt;xsl:param name="code" required="yes"/&gt;
        &lt;xsl:variable name="doc" select="."/&gt;
        &lt;xsl:for-each select="*[local-name()='param']"&gt;
            &lt;xd:param&gt;
                &lt;xsl:apply-templates select="@*"/&gt;
                &lt;xsl:apply-templates mode="section" select="node()"/&gt;
            &lt;/xd:param&gt;
        &lt;/xsl:for-each&gt;
        &lt;xsl:for-each select="$code/xsl:param"&gt;
            &lt;xsl:variable name="name" select="@name"/&gt;
            &lt;xsl:if test="not($doc/*[local-name()='param' and @name=$name])"&gt;
                &lt;xd:param name="{@name}"/&gt;
            &lt;/xsl:if&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Describes the result of the code.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="return"&gt;
        &lt;xsl:variable name="is-empty" select="count(*[local-name()='return']/descendant-or-self::node()[self::text() and string-length(normalize-space())&amp;gt;0 or local-name()='pre'])=0"/&gt;
        &lt;xsl:if test="not($is-empty)"&gt;
            &lt;xd:return&gt;
                &lt;xsl:apply-templates mode="section" select="*[local-name()='return']/node()"/&gt;
            &lt;/xd:return&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Matches all elements when in "section"-mode.&lt;/xd:short&gt;&lt;xd:detail&gt;
        
        Checks all child elements and their descendants and wraps and handles as is
            appropriate. If a child or descendant is placed in a problematic position, then one of
            the unwrap*-templates are called to solve the problem. Otherwise, just make sure that
            the element is in the correct namespace and copy it.
    &lt;/xd:detail&gt;&lt;xd:param name="wrapin-p"/&gt;&lt;xd:param name="wrapin-ul"/&gt;&lt;xd:param name="wrapin-li"/&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template mode="section" match="@*|node()"&gt;
        &lt;xsl:param name="wrapin-p" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-ul" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-li" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:variable name="is-empty" select="count(descendant-or-self::node()[self::text() and string-length(normalize-space())&amp;gt;0 or local-name()='pre'])=0"/&gt;
        &lt;xsl:variable name="contains-section" select="count(descendant::*[local-name()='section'])&amp;gt;0"/&gt;
        &lt;xsl:variable name="contains-block" select="count(descendant::*[local-name()='ul' or local-name()='li' or local-name()='pre' or local-name()='p'])&amp;gt;0"/&gt;
        &lt;xsl:variable name="contains-block-non-li" select="count(descendant::*[local-name()='ul' or local-name()='pre' or local-name()='p'])&amp;gt;0"/&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="local-name()='section'"&gt;
                &lt;xd:section&gt;
                    &lt;xsl:apply-templates mode="section" select="@*|node()"/&gt;
                &lt;/xd:section&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='p'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$contains-section or $contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-p" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:p&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:p&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='pre'"&gt;
                &lt;xd:pre&gt;
                    &lt;xsl:copy-of select="@*|node()"/&gt;
                &lt;/xd:pre&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='ul'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-section"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$contains-block-non-li"&gt;
                        &lt;xd:section&gt;
                            &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                                &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                            &lt;/xsl:call-template&gt;
                        &lt;/xd:section&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="count(descendant::*[local-name()='li'])=0"&gt;
                        &lt;xsl:choose&gt;
                            &lt;xsl:when test="count(child::node()[self::* or self::text() and string-length(normalize-space())&amp;gt;0])&amp;gt;1"&gt;
                                &lt;xd:section&gt;
                                    &lt;xsl:apply-templates mode="section" select="@*|node()"&gt;
                                        &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                                        &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                                    &lt;/xsl:apply-templates&gt;
                                &lt;/xd:section&gt;
                            &lt;/xsl:when&gt;
                            &lt;xsl:otherwise&gt;
                                &lt;xsl:apply-templates mode="section" select="@*|node()"&gt;
                                    &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                                &lt;/xsl:apply-templates&gt;
                            &lt;/xsl:otherwise&gt;
                        &lt;/xsl:choose&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:ul&gt;
                            &lt;xsl:apply-templates mode="list" select="@*|node()"&gt;
                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:ul&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='li'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-section"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:ul&gt;
                            &lt;xd:li&gt;
                                &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                            &lt;/xd:li&gt;
                        &lt;/xd:ul&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='b'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-section"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-b" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-b" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:b&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:b&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='i'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-section"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-i" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-i" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:i&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:i&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='a'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-section"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-a" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-a-elem" select="." tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-a" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-a-elem" select="." tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:a&gt;
                            &lt;xsl:apply-templates select="@*"/&gt;
                            &lt;xsl:apply-templates mode="phrase" select="node()"/&gt;
                        &lt;/xd:a&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="self::*"&gt;
                        &lt;xsl:choose&gt;
                            &lt;xsl:when test="not(preceding-sibling::*) and not(following-sibling::*)"&gt;
                                &lt;xsl:apply-templates mode="section" select="@*|node()"/&gt;
                            &lt;/xsl:when&gt;
                            &lt;xsl:otherwise&gt;
                                &lt;xd:section&gt;
                                    &lt;xsl:apply-templates mode="section" select="@*|node()"/&gt;
                                &lt;/xd:section&gt;
                            &lt;/xsl:otherwise&gt;
                        &lt;/xsl:choose&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="self::text()"&gt;
                        &lt;xsl:copy/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="section" select="@*|node()"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Handles non-problematic lists.&lt;/xd:short&gt;&lt;xd:param name="wrapin-p"/&gt;&lt;xd:param name="wrapin-ul"/&gt;&lt;xd:param name="wrapin-li"/&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template mode="list" match="@*|node()"&gt;
        &lt;xsl:param name="wrapin-p" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-ul" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-li" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:variable name="is-empty" select="count(descendant-or-self::node()[self::text() and string-length(normalize-space())&amp;gt;0 or local-name()='pre'])=0"/&gt;
        &lt;xsl:variable name="contains-block" select="count(descendant::*[local-name()='ul' or local-name()='li' or local-name()='pre' or local-name()='p'])&amp;gt;0"/&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="local-name()='li'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$wrapin-ul"&gt;
                        &lt;xd:ul&gt;
                            &lt;xd:li&gt;
                                &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                            &lt;/xd:li&gt;
                        &lt;/xd:ul&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:li&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:li&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="self::text()"&gt;
                        &lt;xsl:copy/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="list" select="@*|node()"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Handles all elements when in "block" mode and applies fixes where needed.&lt;/xd:short&gt;&lt;xd:param name="wrapin-p"/&gt;&lt;xd:param name="wrapin-ul"/&gt;&lt;xd:param name="wrapin-li"/&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template mode="block" match="@*|node()"&gt;
        &lt;xsl:param name="wrapin-p" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-ul" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-li" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:variable name="element" select="."/&gt;
        &lt;xsl:variable name="is-empty" select="count(descendant-or-self::node()[self::* or self::text() and string-length(normalize-space())&amp;gt;0])=0"/&gt;
        &lt;xsl:variable name="contains-block" select="count(descendant::*[local-name()='ul' or local-name()='li' or local-name()='pre' or local-name()='p'])&amp;gt;0"/&gt;
        &lt;xsl:variable name="contains-block-non-li" select="count(descendant::*[local-name()='ul' or local-name()='pre' or local-name()='p'])&amp;gt;0"/&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="local-name()='p'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:p&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:p&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='pre'"&gt;
                &lt;xd:pre&gt;
                    &lt;xsl:copy-of select="@*|node()"/&gt;
                &lt;/xd:pre&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='ul'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block-non-li"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="count(descendant::*[local-name()='li' and string-length(normalize-space(descendant-or-self::text()))&amp;gt;0])=0"&gt;
                        &lt;xsl:apply-templates mode="block" select="@*|node()"/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:ul&gt;
                            &lt;xsl:apply-templates mode="list" select="@*|node()"&gt;
                                &lt;xsl:with-param name="wrapin-ul" select="false()"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:ul&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='li'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:ul&gt;
                            &lt;xd:li&gt;
                                &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                                    &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                &lt;/xsl:apply-templates&gt;
                            &lt;/xd:li&gt;
                        &lt;/xd:ul&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="not($contains-block) and $wrapin-p"&gt;
                &lt;xd:p&gt;
                    &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                        &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                        &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                        &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                    &lt;/xsl:apply-templates&gt;
                &lt;/xd:p&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="not($contains-block) and $wrapin-li"&gt;
                &lt;xd:ul&gt;
                    &lt;xd:li&gt;
                        &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                            &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xd:li&gt;
                &lt;/xd:ul&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='b'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-b" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:b&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:b&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='i'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-i" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:i&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:i&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='a'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-a" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-a-elem" select="$element" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:a&gt;
                            &lt;xsl:apply-templates mode="phrase" select="$element/@*"/&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:a&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="self::text()"&gt;
                        &lt;xsl:copy/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="block" select="@*|node()"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Phrases are matched with this template (mode="phrase") and handled appropriately.&lt;/xd:short&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template mode="phrase" match="@*|node()"&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="local-name()='b'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='b'])"&gt;
                        &lt;xd:b&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:b&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="$wrapin-b"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='b'])"&gt;
                        &lt;xd:b&gt;
                            &lt;xsl:apply-templates mode="phrase" select="."&gt;
                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:b&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="."&gt;
                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='i'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='i'])"&gt;
                        &lt;xd:i&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:i&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="$wrapin-i"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='i'])"&gt;
                        &lt;xd:i&gt;
                            &lt;xsl:apply-templates mode="phrase" select="."&gt;
                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:i&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="."&gt;
                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='a'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='a'])"&gt;
                        &lt;xd:a&gt;
                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                            &lt;xsl:apply-templates mode="phrase" select="node()"&gt;
                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:a&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="$wrapin-a"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='a'])"&gt;
                        &lt;xd:a&gt;
                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                            &lt;xsl:apply-templates mode="phrase" select="."&gt;
                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:a&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="."&gt;
                            &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="self::text()"&gt;
                        &lt;xsl:copy/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;This template unwraps problematic elements into sections.&lt;/xd:short&gt;&lt;xd:param name="wasWrapped"/&gt;&lt;xd:param name="wrapin-p"/&gt;&lt;xd:param name="wrapin-ul"/&gt;&lt;xd:param name="wrapin-li"/&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="unwrap-to-sections"&gt;
        &lt;xsl:param name="wasWrapped" select="false()"/&gt;
        &lt;xsl:param name="wrapin-p" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-ul" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-li" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:variable name="element" select="."/&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="not($wasWrapped) and count(child::node()[self::* or self::text() and string-length(normalize-space())&amp;gt;0])&amp;gt;1"&gt;
                &lt;xd:section&gt;
                    &lt;xsl:call-template name="unwrap-to-sections"&gt;
                        &lt;xsl:with-param name="wasWrapped" select="true()"/&gt;
                    &lt;/xsl:call-template&gt;
                &lt;/xd:section&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
                &lt;xsl:for-each-group select="child::node()[self::* or self::text() and string-length(normalize-space())&amp;gt;0]" group-adjacent="self::* and not(ancestor::*[local-name()='pre']) and (local-name()='section' or local-name()='ul' or local-name()='li' or local-name()='pre' or local-name()='p')"&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="current-grouping-key()"&gt;
                            &lt;xsl:choose&gt;
                                &lt;xsl:when test="count(current-group())&amp;gt;1 and last()&amp;gt;1"&gt;
                                    &lt;xd:section&gt;
                                        &lt;xsl:apply-templates mode="section" select="current-group()"&gt;
                                            &lt;xsl:with-param name="wrapin-p" tunnel="yes" select="if ($wrapin-p or local-name($element)='p') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-ul" tunnel="yes" select="if ($wrapin-ul or local-name($element)='ul') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-li" tunnel="yes" select="if ($wrapin-li or local-name($element)='li') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-b" tunnel="yes" select="if ($wrapin-b or local-name($element)='b') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-i" tunnel="yes" select="if ($wrapin-i or local-name($element)='i') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-a" tunnel="yes" select="if ($wrapin-a or local-name($element)='a') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-a-elem" tunnel="yes" select="if (not($wrapin-a) and local-name($element)='a') then $element else false()"/&gt;
                                        &lt;/xsl:apply-templates&gt;
                                    &lt;/xd:section&gt;
                                &lt;/xsl:when&gt;
                                &lt;xsl:otherwise&gt;
                                    &lt;xsl:apply-templates mode="section" select="current-group()"&gt;
                                        &lt;xsl:with-param name="wrapin-p" tunnel="yes" select="if ($wrapin-p or local-name($element)='p') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-ul" tunnel="yes" select="if ($wrapin-ul or local-name($element)='ul') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-li" tunnel="yes" select="if ($wrapin-li or local-name($element)='li') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-b" tunnel="yes" select="if ($wrapin-b or local-name($element)='b') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-i" tunnel="yes" select="if ($wrapin-i or local-name($element)='i') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-a" tunnel="yes" select="if ($wrapin-a or local-name($element)='a') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-a-elem" tunnel="yes" select="if (not($wrapin-a) and local-name($element)='a') then $element else false()"/&gt;
                                    &lt;/xsl:apply-templates&gt;
                                &lt;/xsl:otherwise&gt;
                            &lt;/xsl:choose&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:element name="xd:{local-name($element)}"&gt;
                                &lt;xsl:for-each select="$element/@*"&gt;
                                    &lt;xsl:attribute name="xd:{local-name()}" select="."/&gt;
                                &lt;/xsl:for-each&gt;
                                &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                    &lt;xsl:with-param name="wrapin-p" tunnel="yes" select="if ($wrapin-p or local-name($element)='p') then false() else $wrapin-p"/&gt;
                                    &lt;xsl:with-param name="wrapin-ul" tunnel="yes" select="if ($wrapin-ul or local-name($element)='ul') then false() else $wrapin-ul"/&gt;
                                    &lt;xsl:with-param name="wrapin-li" tunnel="yes" select="if ($wrapin-li or local-name($element)='li') then false() else $wrapin-li"/&gt;
                                    &lt;xsl:with-param name="wrapin-b" tunnel="yes" select="if ($wrapin-b or local-name($element)='b') then false() else $wrapin-b"/&gt;
                                    &lt;xsl:with-param name="wrapin-i" tunnel="yes" select="if ($wrapin-i or local-name($element)='i') then false() else $wrapin-i"/&gt;
                                    &lt;xsl:with-param name="wrapin-a" tunnel="yes" select="if ($wrapin-a or local-name($element)='a') then false() else $wrapin-a"/&gt;
                                &lt;/xsl:apply-templates&gt;
                            &lt;/xsl:element&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xsl:for-each-group&gt;
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;This template unwraps problematic elements into blocks.&lt;/xd:short&gt;&lt;xd:param name="wrapin-p"/&gt;&lt;xd:param name="wrapin-ul"/&gt;&lt;xd:param name="wrapin-li"/&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="unwrap-to-blocks"&gt;
        &lt;xsl:param name="wrapin-p" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-ul" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-li" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:variable name="element" select="."/&gt;
        &lt;xsl:for-each-group select="child::node()[self::* or self::text() and string-length(normalize-space())&amp;gt;0]" group-adjacent="count(descendant-or-self::*[local-name()='ul' or local-name()='li' or local-name()='pre' or local-name()='p'])&amp;gt;0"&gt;
            &lt;xsl:choose&gt;
                &lt;xsl:when test="current-grouping-key()"&gt;
                    &lt;xsl:for-each select="current-group()"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-p" select="$wrapin-p or local-name()='p' or local-name($element)='p'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="$wrapin-ul or local-name()='ul' or local-name($element)='ul'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="$wrapin-li or local-name()='li' or local-name($element)='li'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-b" select="$wrapin-b or local-name()='b' or local-name($element)='b'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-i" select="$wrapin-i or local-name()='i' or local-name($element)='i'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-a" select="$wrapin-a or local-name()='a' or local-name($element)='a'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-a-elem" select="if (local-name()='a') then . else (if (local-name($element)='a') then $element else $wrapin-a-elem)" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:for-each&gt;
                &lt;/xsl:when&gt;
                &lt;xsl:otherwise&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="$wrapin-p"&gt;
                            &lt;xd:p&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="$wrapin-b"&gt;
                                        &lt;xd:b&gt;
                                            &lt;xsl:choose&gt;
                                                &lt;xsl:when test="$wrapin-i"&gt;
                                                  &lt;xd:i&gt;
                                                  &lt;xsl:choose&gt;
                                                  &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                  &lt;/xsl:when&gt;
                                                  &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xsl:otherwise&gt;
                                                  &lt;/xsl:choose&gt;
                                                  &lt;/xd:i&gt;
                                                &lt;/xsl:when&gt;
                                                &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                &lt;/xsl:otherwise&gt;
                                            &lt;/xsl:choose&gt;
                                        &lt;/xd:b&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:when test="$wrapin-i"&gt;
                                        &lt;xd:i&gt;
                                            &lt;xsl:choose&gt;
                                                &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                &lt;/xsl:when&gt;
                                                &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                &lt;/xsl:otherwise&gt;
                                            &lt;/xsl:choose&gt;
                                        &lt;/xd:i&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:when test="$wrapin-a"&gt;
                                        &lt;xd:a&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                            &lt;/xsl:apply-templates&gt;
                                        &lt;/xd:a&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                            &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                        &lt;/xsl:apply-templates&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xd:p&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="$wrapin-li"&gt;
                            &lt;xd:ul&gt;
                                &lt;xd:li&gt;
                                    &lt;xsl:choose&gt;
                                        &lt;xsl:when test="$wrapin-b"&gt;
                                            &lt;xd:b&gt;
                                                &lt;xsl:choose&gt;
                                                  &lt;xsl:when test="$wrapin-i"&gt;
                                                  &lt;xd:i&gt;
                                                  &lt;xsl:choose&gt;
                                                  &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                  &lt;/xsl:when&gt;
                                                  &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xsl:otherwise&gt;
                                                  &lt;/xsl:choose&gt;
                                                  &lt;/xd:i&gt;
                                                  &lt;/xsl:when&gt;
                                                  &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xsl:otherwise&gt;
                                                &lt;/xsl:choose&gt;
                                            &lt;/xd:b&gt;
                                        &lt;/xsl:when&gt;
                                        &lt;xsl:when test="$wrapin-i"&gt;
                                            &lt;xd:i&gt;
                                                &lt;xsl:choose&gt;
                                                  &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                  &lt;/xsl:when&gt;
                                                  &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xsl:otherwise&gt;
                                                &lt;/xsl:choose&gt;
                                            &lt;/xd:i&gt;
                                        &lt;/xsl:when&gt;
                                        &lt;xsl:when test="$wrapin-a"&gt;
                                            &lt;xd:a&gt;
                                                &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                &lt;/xsl:apply-templates&gt;
                                            &lt;/xd:a&gt;
                                        &lt;/xsl:when&gt;
                                        &lt;xsl:otherwise&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                            &lt;/xsl:apply-templates&gt;
                                        &lt;/xsl:otherwise&gt;
                                    &lt;/xsl:choose&gt;
                                &lt;/xd:li&gt;
                            &lt;/xd:ul&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="$wrapin-ul"&gt;
                            &lt;xd:p&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="$wrapin-b"&gt;
                                        &lt;xd:b&gt;
                                            &lt;xsl:choose&gt;
                                                &lt;xsl:when test="$wrapin-i"&gt;
                                                  &lt;xd:i&gt;
                                                  &lt;xsl:choose&gt;
                                                  &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                  &lt;/xsl:when&gt;
                                                  &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xsl:otherwise&gt;
                                                  &lt;/xsl:choose&gt;
                                                  &lt;/xd:i&gt;
                                                &lt;/xsl:when&gt;
                                                &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                &lt;/xsl:otherwise&gt;
                                            &lt;/xsl:choose&gt;
                                        &lt;/xd:b&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:when test="$wrapin-i"&gt;
                                        &lt;xd:i&gt;
                                            &lt;xsl:choose&gt;
                                                &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                &lt;/xsl:when&gt;
                                                &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                &lt;/xsl:otherwise&gt;
                                            &lt;/xsl:choose&gt;
                                        &lt;/xd:i&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:when test="$wrapin-a"&gt;
                                        &lt;xd:a&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                            &lt;/xsl:apply-templates&gt;
                                        &lt;/xd:a&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                            &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                        &lt;/xsl:apply-templates&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xd:p&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="$wrapin-b"&gt;
                            &lt;xd:b&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="$wrapin-i"&gt;
                                        &lt;xd:i&gt;
                                            &lt;xsl:choose&gt;
                                                &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                &lt;/xsl:when&gt;
                                                &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                &lt;/xsl:otherwise&gt;
                                            &lt;/xsl:choose&gt;
                                        &lt;/xd:i&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:when test="$wrapin-a"&gt;
                                        &lt;xd:a&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                            &lt;/xsl:apply-templates&gt;
                                        &lt;/xd:a&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                            &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                        &lt;/xsl:apply-templates&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xd:b&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="$wrapin-i"&gt;
                            &lt;xd:i&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="$wrapin-a"&gt;
                                        &lt;xd:a&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                            &lt;/xsl:apply-templates&gt;
                                        &lt;/xd:a&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                            &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                        &lt;/xsl:apply-templates&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xd:i&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="$wrapin-a"&gt;
                            &lt;xd:a&gt;
                                &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                    &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                &lt;/xsl:apply-templates&gt;
                            &lt;/xd:a&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xsl:otherwise&gt;
            &lt;/xsl:choose&gt;
        &lt;/xsl:for-each-group&gt;
    &lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;&lt;/codeblock&gt;
    &lt;xsl:template name="param"&gt;
        &lt;xsl:param name="code" required="yes"/&gt;
        &lt;xsl:variable name="doc" select="."/&gt;
        &lt;xsl:for-each select="*[local-name()='param']"&gt;
            &lt;xd:param&gt;
                &lt;xsl:apply-templates select="@*"/&gt;
                &lt;xsl:apply-templates mode="section" select="node()"/&gt;
            &lt;/xd:param&gt;
        &lt;/xsl:for-each&gt;
        &lt;xsl:for-each select="$code/xsl:param"&gt;
            &lt;xsl:variable name="name" select="@name"/&gt;
            &lt;xsl:if test="not($doc/*[local-name()='param' and @name=$name])"&gt;
                &lt;xd:param name="{@name}"/&gt;
            &lt;/xsl:if&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;codeblock&gt;&lt;xsl:stylesheet version="2.0"&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Identity template.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template match="@*|node()"&gt;
        &lt;xsl:copy&gt;
            &lt;xsl:apply-templates select="@*|node()"/&gt;
        &lt;/xsl:copy&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Matches each xd:doc element.&lt;/xd:short&gt;&lt;xd:detail&gt;
        
        Determines what code is being documented and calls appropriate templates for: &lt;xd:ul&gt;
                &lt;xd:li&gt;short description (xd:short)&lt;/xd:li&gt;
                &lt;xd:li&gt;detailed description (xd:detail)&lt;/xd:li&gt;
                &lt;xd:li&gt;authors (xd:author)&lt;/xd:li&gt;
                &lt;xd:li&gt;contributors (xd:contributor)&lt;/xd:li&gt;
                &lt;xd:li&gt;maintainers (xd:maintainer)&lt;/xd:li&gt;
                &lt;xd:li&gt;copyright (xd:copyright)&lt;/xd:li&gt;
                &lt;xd:li&gt;version (xd:version)&lt;/xd:li&gt;
                &lt;xd:li&gt;code existed since version (xd:since)&lt;/xd:li&gt;
                &lt;xd:li&gt;see also (xd:see)&lt;/xd:li&gt;
                &lt;xd:li&gt;deprecated since version (xd:deprecated)&lt;/xd:li&gt;
                &lt;xd:li&gt;import statements (xd:import and xsl:import)&lt;/xd:li&gt;
                &lt;xd:li&gt;include statements (xd:include and xsl:include)&lt;/xd:li&gt;
                &lt;xd:li&gt;parameters (xd:param and xsl:param)&lt;/xd:li&gt;
                &lt;xd:li&gt;return values / output (xd:return)&lt;/xd:li&gt;
            &lt;/xd:ul&gt;
        
        
    &lt;/xd:detail&gt;&lt;xd:return&gt;The normalized xd:doc.&lt;/xd:return&gt;&lt;/xd:doc&gt;
    &lt;xsl:template match="xd:doc"&gt;
        &lt;xsl:copy&gt;
            &lt;xsl:variable name="target"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="@target"&gt;
                        &lt;xsl:value-of select="@target"/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="count(preceding-sibling::*)=0"&gt;
                        &lt;xsl:value-of select="'parent'"/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:value-of select="'following'"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:variable&gt;
            &lt;xsl:variable name="code" select="if ($target='parent') then parent::* else following-sibling::*[1]"/&gt;

            &lt;xsl:attribute name="target" select="$target"/&gt;

            &lt;xsl:call-template name="short"/&gt;
            &lt;xsl:call-template name="detail"/&gt;
            &lt;xsl:call-template name="authors"/&gt;
            &lt;xsl:call-template name="contributors"/&gt;
            &lt;xsl:call-template name="maintainers"/&gt;
            &lt;xsl:call-template name="copyright"/&gt;
            &lt;xsl:call-template name="version"/&gt;
            &lt;xsl:call-template name="since"/&gt;
            &lt;xsl:call-template name="see"/&gt;
            &lt;xsl:call-template name="deprecated"/&gt;
            &lt;xsl:call-template name="import"&gt;
                &lt;xsl:with-param name="code" select="$code"/&gt;
            &lt;/xsl:call-template&gt;
            &lt;xsl:call-template name="include"&gt;
                &lt;xsl:with-param name="code" select="$code"/&gt;
            &lt;/xsl:call-template&gt;
            &lt;xsl:call-template name="param"&gt;
                &lt;xsl:with-param name="code" select="$code"/&gt;
            &lt;/xsl:call-template&gt;
            &lt;xsl:call-template name="return"/&gt;
        &lt;/xsl:copy&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Determines the short description.&lt;/xd:short&gt;&lt;xd:detail&gt;
        
        
            &lt;xd:ul&gt;
                &lt;xd:li&gt;If there is no &amp;lt;xd:short/&amp;gt;-element present, but plain text is present as a
                    child of the &amp;lt;xd:doc/&amp;gt;element, then the first sentence from that text (up
                    until the first period (".") will be used as a short description.&lt;/xd:li&gt;
                &lt;xd:li&gt;Else; if there are multiple &amp;lt;xd:short/&amp;gt;-elements, each one of their
                    contents will be wrapped in separate &amp;lt;section/&amp;gt;s.&lt;/xd:li&gt;
                &lt;xd:li&gt;Else; use the one &amp;lt;xd:short/&amp;gt;-element that is present for the short
                    description.&lt;/xd:li&gt;
            &lt;/xd:ul&gt;
        
    &lt;/xd:detail&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="short"&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="count(child::*[local-name()='short'])&amp;gt;1"&gt;
                &lt;xd:short&gt;
                    &lt;xsl:for-each select="child::*[local-name()='short']"&gt;
                        &lt;xd:section&gt;
                            &lt;xsl:apply-templates mode="section"/&gt;
                        &lt;/xd:section&gt;
                    &lt;/xsl:for-each&gt;
                &lt;/xd:short&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="count(child::*[local-name()='short'])=1"&gt;
                &lt;xd:short&gt;
                    &lt;xsl:apply-templates select="child::*[local-name()='short']/node()" mode="section"/&gt;
                &lt;/xd:short&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="child::text()[string-length(normalize-space())&amp;gt;0]"&gt;
                &lt;xsl:variable name="short" select="replace(normalize-space(child::text()[1]),'^([^\.]+\.?)\s?.*$','$1')"/&gt;
                &lt;xd:short&gt;
                    &lt;xsl:value-of select="$short"/&gt;
                &lt;/xd:short&gt;
            &lt;/xsl:when&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Determines the detailed description.&lt;/xd:short&gt;&lt;xd:detail&gt;
        
        The detailed description will be put together based on any number of
            &amp;lt;xd:detail/&amp;gt;-elements, as well as any number of text nodes that are direct
            children of the &amp;lt;xd:doc/&amp;gt;-element. If the xd:short was extracted from the first
            text node, then the first sentence from that text node will be ignored. If there are
            multiple &amp;lt;xd:detail/&amp;gt; and text nodes, then each of them will be wrapped in
            &amp;lt;xd:section/&amp;gt;s.
    &lt;/xd:detail&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="detail"&gt;
        &lt;xsl:variable name="shortInFirstText" select="count(./*[local-name()='short'])=0"/&gt;
        &lt;xsl:variable name="detailCount" select="(if (matches(normalize-space(./text()[1]),'\.[^\.].')) then 1 else 0) + count(*[local-name()='detail' and (descendant-or-self::node()[self::text() and string-length(normalize-space())&amp;gt;0 or local-name()='pre' and not(ancestor::*[local-name()='pre'])])]) + count(./text()[not(position()=1) and string-length(normalize-space())&amp;gt;0])"/&gt;
        &lt;xsl:if test="$detailCount&amp;gt;0"&gt;
            &lt;xd:detail&gt;
                &lt;xsl:for-each select="*|text()"&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="self::text() and count(preceding-sibling::text()[string-length(normalize-space())&amp;gt;0])=0"&gt;
                            &lt;!-- first text --&gt;
                            &lt;xsl:choose&gt;
                                &lt;xsl:when test="$shortInFirstText"&gt;
                                    &lt;xsl:variable name="detail" select="replace(normalize-space(),'^[^\.]+.?\s?(.*)$','$1')"/&gt;
                                    &lt;xsl:choose&gt;
                                        &lt;xsl:when test="$detailCount&amp;gt;1"&gt;
                                            &lt;xd:section&gt;
                                                &lt;xsl:value-of select="$detail"/&gt;
                                            &lt;/xd:section&gt;
                                        &lt;/xsl:when&gt;
                                        &lt;xsl:otherwise&gt;
                                            &lt;xsl:value-of select="$detail"/&gt;
                                        &lt;/xsl:otherwise&gt;
                                    &lt;/xsl:choose&gt;
                                &lt;/xsl:when&gt;
                                &lt;xsl:otherwise&gt;
                                    &lt;xsl:choose&gt;
                                        &lt;xsl:when test="$detailCount&amp;gt;1"&gt;
                                            &lt;xd:section&gt;
                                                &lt;xsl:value-of select="."/&gt;
                                            &lt;/xd:section&gt;
                                        &lt;/xsl:when&gt;
                                        &lt;xsl:otherwise&gt;
                                            &lt;xsl:value-of select="."/&gt;
                                        &lt;/xsl:otherwise&gt;
                                    &lt;/xsl:choose&gt;
                                &lt;/xsl:otherwise&gt;
                            &lt;/xsl:choose&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="self::text()"&gt;
                            &lt;!-- non-first text --&gt;
                            &lt;xsl:choose&gt;
                                &lt;xsl:when test="$detailCount&amp;gt;1"&gt;
                                    &lt;xd:section&gt;
                                        &lt;xsl:value-of select="."/&gt;
                                    &lt;/xd:section&gt;
                                &lt;/xsl:when&gt;
                                &lt;xsl:otherwise&gt;
                                    &lt;xsl:value-of select="."/&gt;
                                &lt;/xsl:otherwise&gt;
                            &lt;/xsl:choose&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="local-name()='detail'"&gt;
                            &lt;!-- detail element --&gt;
                            &lt;xsl:choose&gt;
                                &lt;xsl:when test="$detailCount&amp;gt;1"&gt;
                                    &lt;xd:section&gt;
                                        &lt;xsl:apply-templates select="child::node()" mode="section"/&gt;
                                    &lt;/xd:section&gt;
                                &lt;/xsl:when&gt;
                                &lt;xsl:otherwise&gt;
                                    &lt;xsl:apply-templates select="child::node()" mode="section"/&gt;
                                &lt;/xsl:otherwise&gt;
                            &lt;/xsl:choose&gt;
                        &lt;/xsl:when&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xsl:for-each&gt;
            &lt;/xd:detail&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes the xd:author-elements.&lt;/xd:short&gt;&lt;xd:detail&gt;&amp;gt;xd:author/&amp;lt;s with no text are removed. &amp;lt;xd:author/&amp;gt;s with no child elements will have their text content wrapped in a &amp;lt;xd:name/&amp;gt; element. Children other than xd:name, xd:mailto and xd:organization are ignored.&lt;/xd:detail&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="authors" xml:id="authors"&gt;
        &lt;xsl:for-each select="*[local-name()='author']"&gt;
            &lt;xsl:variable name="is-empty" select="count(descendant-or-self::text()[string-length(normalize-space())&amp;gt;0])=0"/&gt;
            &lt;xsl:if test="not($is-empty)"&gt;
                &lt;xd:author&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="count(child::*)=0"&gt;
                            &lt;xd:name&gt;
                                &lt;xsl:value-of select="."/&gt;
                            &lt;/xd:name&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:if test="child::*[local-name()='name']"&gt;
                                &lt;xd:name&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='name']"/&gt;
                                &lt;/xd:name&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='mailto']"&gt;
                                &lt;xd:mailto&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='mailto']"/&gt;
                                &lt;/xd:mailto&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='organization']"&gt;
                                &lt;xd:organization&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='organization']"/&gt;
                                &lt;/xd:organization&gt;
                            &lt;/xsl:if&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xd:author&gt;
            &lt;/xsl:if&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;&amp;lt;xd:contributor/&amp;gt;s are normalized in the same way as &amp;lt;xd:author/&amp;gt;s&lt;/xd:short&gt;&lt;xd:see&gt;#authors&lt;/xd:see&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="contributors"&gt;
        &lt;xsl:for-each select="*[local-name()='contributor']"&gt;
            &lt;xsl:variable name="is-empty" select="count(descendant-or-self::text()[string-length(normalize-space())&amp;gt;0])=0"/&gt;
            &lt;xsl:if test="not($is-empty)"&gt;
                &lt;xd:contributor&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="count(child::*)=0"&gt;
                            &lt;xd:name&gt;
                                &lt;xsl:value-of select="."/&gt;
                            &lt;/xd:name&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:if test="child::*[local-name()='name']"&gt;
                                &lt;xd:name&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='name']"/&gt;
                                &lt;/xd:name&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='mailto']"&gt;
                                &lt;xd:mailto&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='mailto']"/&gt;
                                &lt;/xd:mailto&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='organization']"&gt;
                                &lt;xd:organization&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='organization']"/&gt;
                                &lt;/xd:organization&gt;
                            &lt;/xsl:if&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xd:contributor&gt;
            &lt;/xsl:if&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;&amp;lt;xd:maintainer/&amp;gt;s are normalized in the same way as &amp;lt;xd:author/&amp;gt;s&lt;/xd:short&gt;&lt;xd:see&gt;#authors&lt;/xd:see&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="maintainers"&gt;
        &lt;xsl:for-each select="*[local-name()='maintainer']"&gt;
            &lt;xsl:variable name="is-empty" select="count(descendant-or-self::text()[string-length(normalize-space())&amp;gt;0])=0"/&gt;
            &lt;xsl:if test="not($is-empty)"&gt;
                &lt;xd:maintainer&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="count(child::*)=0"&gt;
                            &lt;xd:name&gt;
                                &lt;xsl:value-of select="."/&gt;
                            &lt;/xd:name&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:if test="child::*[local-name()='name']"&gt;
                                &lt;xd:name&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='name']"/&gt;
                                &lt;/xd:name&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='mailto']"&gt;
                                &lt;xd:mailto&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='mailto']"/&gt;
                                &lt;/xd:mailto&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='organization']"&gt;
                                &lt;xd:organization&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='organization']"/&gt;
                                &lt;/xd:organization&gt;
                            &lt;/xsl:if&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xd:maintainer&gt;
            &lt;/xsl:if&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes the xd:copyright-element.&lt;/xd:short&gt;&lt;xd:detail&gt;&amp;gt;xd:copyright/&amp;lt;s with no text are removed. &amp;lt;xd:copyright/&amp;gt;s with no child elements will have their text content wrapped in a &amp;lt;xd:name/&amp;gt; element. Children other than xd:year, xd:name, xd:mailto and xd:organization are ignored.&lt;/xd:detail&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="copyright"&gt;
        &lt;xsl:for-each select="*[local-name()='copyright']"&gt;
            &lt;xsl:variable name="is-empty" select="count(descendant-or-self::text()[string-length(normalize-space())&amp;gt;0])=0"/&gt;
            &lt;xsl:if test="not($is-empty)"&gt;
                &lt;xd:copyright&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="count(child::*)=0"&gt;
                            &lt;xd:name&gt;
                                &lt;xsl:value-of select="."/&gt;
                            &lt;/xd:name&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:if test="child::*[local-name()='year']"&gt;
                                &lt;xd:year&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='year']"/&gt;
                                &lt;/xd:year&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='name']"&gt;
                                &lt;xd:name&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='name']"/&gt;
                                &lt;/xd:name&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='mailto']"&gt;
                                &lt;xd:mailto&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='mailto']"/&gt;
                                &lt;/xd:mailto&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='organization']"&gt;
                                &lt;xd:organization&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='organization']"/&gt;
                                &lt;/xd:organization&gt;
                            &lt;/xsl:if&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xd:copyright&gt;
            &lt;/xsl:if&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:version elements.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="version"&gt;
        &lt;xsl:if test="child::*[local-name()='version' and string-length(normalize-space(./text()))&amp;gt;0]"&gt;
            &lt;xd:version&gt;
                &lt;xsl:value-of select="child::*[local-name()='version' and string-length(normalize-space(./text()))&amp;gt;0]"/&gt;
            &lt;/xd:version&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:since elements.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="since"&gt;
        &lt;xsl:if test="child::*[local-name()='since' and string-length(normalize-space(./text()))&amp;gt;0]"&gt;
            &lt;xd:since&gt;
                &lt;xsl:value-of select="child::*[local-name()='since' and string-length(normalize-space(./text()))&amp;gt;0]"/&gt;
            &lt;/xd:since&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:see elements.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="see"&gt;
        &lt;xsl:if test="child::*[local-name()='see' and string-length(normalize-space(./text()))&amp;gt;0]"&gt;
            &lt;xd:see&gt;
                &lt;xsl:value-of select="child::*[local-name()='see' and string-length(normalize-space(./text()))&amp;gt;0]"/&gt;
            &lt;/xd:see&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:deprecated elements.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="deprecated"&gt;
        &lt;xsl:if test="child::*[local-name()='deprecated' and string-length(normalize-space(./text()))&amp;gt;0]"&gt;
            &lt;xd:deprecated&gt;
                &lt;xsl:value-of select="child::*[local-name()='deprecated' and string-length(normalize-space(./text()))&amp;gt;0]"/&gt;
            &lt;/xd:deprecated&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:import elements.&lt;/xd:short&gt;&lt;xd:detail&gt;Will create empty documentation for imports that are not documented, and removes documentation of imports that does not exist in the code.&lt;/xd:detail&gt;&lt;xd:param name="code"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="import"&gt;
        &lt;xsl:param name="code" required="yes"/&gt;
        &lt;xsl:variable name="doc" select="."/&gt;
        &lt;xsl:for-each select="$code/xsl:import"&gt;
            &lt;xsl:variable name="href" select="@href"/&gt;
            &lt;xd:import href="{@href}"&gt;
                &lt;xsl:if test="$doc/*[local-name()='import' and @href=$href]"&gt;
                    &lt;xsl:value-of select="$doc/*[local-name()='import' and @href=$href]"/&gt;
                &lt;/xsl:if&gt;
            &lt;/xd:import&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:include elements.&lt;/xd:short&gt;&lt;xd:detail&gt;Will create empty documentation for includes that are not documented, and removes documentation of includes that does not exist in the code.&lt;/xd:detail&gt;&lt;xd:param name="code"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="include"&gt;
        &lt;xsl:param name="code" required="yes"/&gt;
        &lt;xsl:variable name="doc" select="."/&gt;
        &lt;xsl:for-each select="$code/xsl:include"&gt;
            &lt;xsl:variable name="href" select="@href"/&gt;
            &lt;xd:include href="{@href}"&gt;
                &lt;xsl:if test="$doc/*[local-name()='include' and @href=$href]"&gt;
                    &lt;xsl:value-of select="$doc/*[local-name()='include' and @href=$href]"/&gt;
                &lt;/xsl:if&gt;
            &lt;/xd:include&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:import elements.&lt;/xd:short&gt;&lt;xd:detail&gt;Will create empty documentation for imports that are not documented, and removes documentation of imports that does not exist in the code.&lt;/xd:detail&gt;&lt;xd:param name="code"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="param"&gt;
        &lt;xsl:param name="code" required="yes"/&gt;
        &lt;xsl:variable name="doc" select="."/&gt;
        &lt;xsl:for-each select="*[local-name()='param']"&gt;
            &lt;xd:param&gt;
                &lt;xsl:apply-templates select="@*"/&gt;
                &lt;xsl:apply-templates mode="section" select="node()"/&gt;
            &lt;/xd:param&gt;
        &lt;/xsl:for-each&gt;
        &lt;xsl:for-each select="$code/xsl:param"&gt;
            &lt;xsl:variable name="name" select="@name"/&gt;
            &lt;xsl:if test="not($doc/*[local-name()='param' and @name=$name])"&gt;
                &lt;xd:param name="{@name}"/&gt;
            &lt;/xsl:if&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Describes the result of the code.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="return"&gt;
        &lt;xsl:variable name="is-empty" select="count(*[local-name()='return']/descendant-or-self::node()[self::text() and string-length(normalize-space())&amp;gt;0 or local-name()='pre'])=0"/&gt;
        &lt;xsl:if test="not($is-empty)"&gt;
            &lt;xd:return&gt;
                &lt;xsl:apply-templates mode="section" select="*[local-name()='return']/node()"/&gt;
            &lt;/xd:return&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Matches all elements when in "section"-mode.&lt;/xd:short&gt;&lt;xd:detail&gt;
        
        Checks all child elements and their descendants and wraps and handles as is
            appropriate. If a child or descendant is placed in a problematic position, then one of
            the unwrap*-templates are called to solve the problem. Otherwise, just make sure that
            the element is in the correct namespace and copy it.
    &lt;/xd:detail&gt;&lt;xd:param name="wrapin-p"/&gt;&lt;xd:param name="wrapin-ul"/&gt;&lt;xd:param name="wrapin-li"/&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template mode="section" match="@*|node()"&gt;
        &lt;xsl:param name="wrapin-p" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-ul" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-li" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:variable name="is-empty" select="count(descendant-or-self::node()[self::text() and string-length(normalize-space())&amp;gt;0 or local-name()='pre'])=0"/&gt;
        &lt;xsl:variable name="contains-section" select="count(descendant::*[local-name()='section'])&amp;gt;0"/&gt;
        &lt;xsl:variable name="contains-block" select="count(descendant::*[local-name()='ul' or local-name()='li' or local-name()='pre' or local-name()='p'])&amp;gt;0"/&gt;
        &lt;xsl:variable name="contains-block-non-li" select="count(descendant::*[local-name()='ul' or local-name()='pre' or local-name()='p'])&amp;gt;0"/&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="local-name()='section'"&gt;
                &lt;xd:section&gt;
                    &lt;xsl:apply-templates mode="section" select="@*|node()"/&gt;
                &lt;/xd:section&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='p'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$contains-section or $contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-p" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:p&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:p&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='pre'"&gt;
                &lt;xd:pre&gt;
                    &lt;xsl:copy-of select="@*|node()"/&gt;
                &lt;/xd:pre&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='ul'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-section"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$contains-block-non-li"&gt;
                        &lt;xd:section&gt;
                            &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                                &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                            &lt;/xsl:call-template&gt;
                        &lt;/xd:section&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="count(descendant::*[local-name()='li'])=0"&gt;
                        &lt;xsl:choose&gt;
                            &lt;xsl:when test="count(child::node()[self::* or self::text() and string-length(normalize-space())&amp;gt;0])&amp;gt;1"&gt;
                                &lt;xd:section&gt;
                                    &lt;xsl:apply-templates mode="section" select="@*|node()"&gt;
                                        &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                                        &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                                    &lt;/xsl:apply-templates&gt;
                                &lt;/xd:section&gt;
                            &lt;/xsl:when&gt;
                            &lt;xsl:otherwise&gt;
                                &lt;xsl:apply-templates mode="section" select="@*|node()"&gt;
                                    &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                                &lt;/xsl:apply-templates&gt;
                            &lt;/xsl:otherwise&gt;
                        &lt;/xsl:choose&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:ul&gt;
                            &lt;xsl:apply-templates mode="list" select="@*|node()"&gt;
                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:ul&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='li'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-section"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:ul&gt;
                            &lt;xd:li&gt;
                                &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                            &lt;/xd:li&gt;
                        &lt;/xd:ul&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='b'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-section"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-b" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-b" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:b&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:b&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='i'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-section"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-i" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-i" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:i&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:i&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='a'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-section"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-a" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-a-elem" select="." tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-a" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-a-elem" select="." tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:a&gt;
                            &lt;xsl:apply-templates select="@*"/&gt;
                            &lt;xsl:apply-templates mode="phrase" select="node()"/&gt;
                        &lt;/xd:a&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="self::*"&gt;
                        &lt;xsl:choose&gt;
                            &lt;xsl:when test="not(preceding-sibling::*) and not(following-sibling::*)"&gt;
                                &lt;xsl:apply-templates mode="section" select="@*|node()"/&gt;
                            &lt;/xsl:when&gt;
                            &lt;xsl:otherwise&gt;
                                &lt;xd:section&gt;
                                    &lt;xsl:apply-templates mode="section" select="@*|node()"/&gt;
                                &lt;/xd:section&gt;
                            &lt;/xsl:otherwise&gt;
                        &lt;/xsl:choose&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="self::text()"&gt;
                        &lt;xsl:copy/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="section" select="@*|node()"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Handles non-problematic lists.&lt;/xd:short&gt;&lt;xd:param name="wrapin-p"/&gt;&lt;xd:param name="wrapin-ul"/&gt;&lt;xd:param name="wrapin-li"/&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template mode="list" match="@*|node()"&gt;
        &lt;xsl:param name="wrapin-p" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-ul" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-li" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:variable name="is-empty" select="count(descendant-or-self::node()[self::text() and string-length(normalize-space())&amp;gt;0 or local-name()='pre'])=0"/&gt;
        &lt;xsl:variable name="contains-block" select="count(descendant::*[local-name()='ul' or local-name()='li' or local-name()='pre' or local-name()='p'])&amp;gt;0"/&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="local-name()='li'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$wrapin-ul"&gt;
                        &lt;xd:ul&gt;
                            &lt;xd:li&gt;
                                &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                            &lt;/xd:li&gt;
                        &lt;/xd:ul&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:li&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:li&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="self::text()"&gt;
                        &lt;xsl:copy/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="list" select="@*|node()"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Handles all elements when in "block" mode and applies fixes where needed.&lt;/xd:short&gt;&lt;xd:param name="wrapin-p"/&gt;&lt;xd:param name="wrapin-ul"/&gt;&lt;xd:param name="wrapin-li"/&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template mode="block" match="@*|node()"&gt;
        &lt;xsl:param name="wrapin-p" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-ul" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-li" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:variable name="element" select="."/&gt;
        &lt;xsl:variable name="is-empty" select="count(descendant-or-self::node()[self::* or self::text() and string-length(normalize-space())&amp;gt;0])=0"/&gt;
        &lt;xsl:variable name="contains-block" select="count(descendant::*[local-name()='ul' or local-name()='li' or local-name()='pre' or local-name()='p'])&amp;gt;0"/&gt;
        &lt;xsl:variable name="contains-block-non-li" select="count(descendant::*[local-name()='ul' or local-name()='pre' or local-name()='p'])&amp;gt;0"/&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="local-name()='p'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:p&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:p&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='pre'"&gt;
                &lt;xd:pre&gt;
                    &lt;xsl:copy-of select="@*|node()"/&gt;
                &lt;/xd:pre&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='ul'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block-non-li"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="count(descendant::*[local-name()='li' and string-length(normalize-space(descendant-or-self::text()))&amp;gt;0])=0"&gt;
                        &lt;xsl:apply-templates mode="block" select="@*|node()"/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:ul&gt;
                            &lt;xsl:apply-templates mode="list" select="@*|node()"&gt;
                                &lt;xsl:with-param name="wrapin-ul" select="false()"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:ul&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='li'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:ul&gt;
                            &lt;xd:li&gt;
                                &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                                    &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                &lt;/xsl:apply-templates&gt;
                            &lt;/xd:li&gt;
                        &lt;/xd:ul&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="not($contains-block) and $wrapin-p"&gt;
                &lt;xd:p&gt;
                    &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                        &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                        &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                        &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                    &lt;/xsl:apply-templates&gt;
                &lt;/xd:p&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="not($contains-block) and $wrapin-li"&gt;
                &lt;xd:ul&gt;
                    &lt;xd:li&gt;
                        &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                            &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xd:li&gt;
                &lt;/xd:ul&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='b'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-b" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:b&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:b&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='i'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-i" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:i&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:i&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='a'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-a" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-a-elem" select="$element" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:a&gt;
                            &lt;xsl:apply-templates mode="phrase" select="$element/@*"/&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:a&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="self::text()"&gt;
                        &lt;xsl:copy/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="block" select="@*|node()"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Phrases are matched with this template (mode="phrase") and handled appropriately.&lt;/xd:short&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template mode="phrase" match="@*|node()"&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="local-name()='b'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='b'])"&gt;
                        &lt;xd:b&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:b&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="$wrapin-b"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='b'])"&gt;
                        &lt;xd:b&gt;
                            &lt;xsl:apply-templates mode="phrase" select="."&gt;
                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:b&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="."&gt;
                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='i'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='i'])"&gt;
                        &lt;xd:i&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:i&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="$wrapin-i"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='i'])"&gt;
                        &lt;xd:i&gt;
                            &lt;xsl:apply-templates mode="phrase" select="."&gt;
                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:i&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="."&gt;
                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='a'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='a'])"&gt;
                        &lt;xd:a&gt;
                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                            &lt;xsl:apply-templates mode="phrase" select="node()"&gt;
                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:a&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="$wrapin-a"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='a'])"&gt;
                        &lt;xd:a&gt;
                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                            &lt;xsl:apply-templates mode="phrase" select="."&gt;
                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:a&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="."&gt;
                            &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="self::text()"&gt;
                        &lt;xsl:copy/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;This template unwraps problematic elements into sections.&lt;/xd:short&gt;&lt;xd:param name="wasWrapped"/&gt;&lt;xd:param name="wrapin-p"/&gt;&lt;xd:param name="wrapin-ul"/&gt;&lt;xd:param name="wrapin-li"/&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="unwrap-to-sections"&gt;
        &lt;xsl:param name="wasWrapped" select="false()"/&gt;
        &lt;xsl:param name="wrapin-p" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-ul" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-li" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:variable name="element" select="."/&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="not($wasWrapped) and count(child::node()[self::* or self::text() and string-length(normalize-space())&amp;gt;0])&amp;gt;1"&gt;
                &lt;xd:section&gt;
                    &lt;xsl:call-template name="unwrap-to-sections"&gt;
                        &lt;xsl:with-param name="wasWrapped" select="true()"/&gt;
                    &lt;/xsl:call-template&gt;
                &lt;/xd:section&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
                &lt;xsl:for-each-group select="child::node()[self::* or self::text() and string-length(normalize-space())&amp;gt;0]" group-adjacent="self::* and not(ancestor::*[local-name()='pre']) and (local-name()='section' or local-name()='ul' or local-name()='li' or local-name()='pre' or local-name()='p')"&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="current-grouping-key()"&gt;
                            &lt;xsl:choose&gt;
                                &lt;xsl:when test="count(current-group())&amp;gt;1 and last()&amp;gt;1"&gt;
                                    &lt;xd:section&gt;
                                        &lt;xsl:apply-templates mode="section" select="current-group()"&gt;
                                            &lt;xsl:with-param name="wrapin-p" tunnel="yes" select="if ($wrapin-p or local-name($element)='p') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-ul" tunnel="yes" select="if ($wrapin-ul or local-name($element)='ul') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-li" tunnel="yes" select="if ($wrapin-li or local-name($element)='li') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-b" tunnel="yes" select="if ($wrapin-b or local-name($element)='b') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-i" tunnel="yes" select="if ($wrapin-i or local-name($element)='i') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-a" tunnel="yes" select="if ($wrapin-a or local-name($element)='a') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-a-elem" tunnel="yes" select="if (not($wrapin-a) and local-name($element)='a') then $element else false()"/&gt;
                                        &lt;/xsl:apply-templates&gt;
                                    &lt;/xd:section&gt;
                                &lt;/xsl:when&gt;
                                &lt;xsl:otherwise&gt;
                                    &lt;xsl:apply-templates mode="section" select="current-group()"&gt;
                                        &lt;xsl:with-param name="wrapin-p" tunnel="yes" select="if ($wrapin-p or local-name($element)='p') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-ul" tunnel="yes" select="if ($wrapin-ul or local-name($element)='ul') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-li" tunnel="yes" select="if ($wrapin-li or local-name($element)='li') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-b" tunnel="yes" select="if ($wrapin-b or local-name($element)='b') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-i" tunnel="yes" select="if ($wrapin-i or local-name($element)='i') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-a" tunnel="yes" select="if ($wrapin-a or local-name($element)='a') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-a-elem" tunnel="yes" select="if (not($wrapin-a) and local-name($element)='a') then $element else false()"/&gt;
                                    &lt;/xsl:apply-templates&gt;
                                &lt;/xsl:otherwise&gt;
                            &lt;/xsl:choose&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:element name="xd:{local-name($element)}"&gt;
                                &lt;xsl:for-each select="$element/@*"&gt;
                                    &lt;xsl:attribute name="xd:{local-name()}" select="."/&gt;
                                &lt;/xsl:for-each&gt;
                                &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                    &lt;xsl:with-param name="wrapin-p" tunnel="yes" select="if ($wrapin-p or local-name($element)='p') then false() else $wrapin-p"/&gt;
                                    &lt;xsl:with-param name="wrapin-ul" tunnel="yes" select="if ($wrapin-ul or local-name($element)='ul') then false() else $wrapin-ul"/&gt;
                                    &lt;xsl:with-param name="wrapin-li" tunnel="yes" select="if ($wrapin-li or local-name($element)='li') then false() else $wrapin-li"/&gt;
                                    &lt;xsl:with-param name="wrapin-b" tunnel="yes" select="if ($wrapin-b or local-name($element)='b') then false() else $wrapin-b"/&gt;
                                    &lt;xsl:with-param name="wrapin-i" tunnel="yes" select="if ($wrapin-i or local-name($element)='i') then false() else $wrapin-i"/&gt;
                                    &lt;xsl:with-param name="wrapin-a" tunnel="yes" select="if ($wrapin-a or local-name($element)='a') then false() else $wrapin-a"/&gt;
                                &lt;/xsl:apply-templates&gt;
                            &lt;/xsl:element&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xsl:for-each-group&gt;
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;This template unwraps problematic elements into blocks.&lt;/xd:short&gt;&lt;xd:param name="wrapin-p"/&gt;&lt;xd:param name="wrapin-ul"/&gt;&lt;xd:param name="wrapin-li"/&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="unwrap-to-blocks"&gt;
        &lt;xsl:param name="wrapin-p" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-ul" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-li" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:variable name="element" select="."/&gt;
        &lt;xsl:for-each-group select="child::node()[self::* or self::text() and string-length(normalize-space())&amp;gt;0]" group-adjacent="count(descendant-or-self::*[local-name()='ul' or local-name()='li' or local-name()='pre' or local-name()='p'])&amp;gt;0"&gt;
            &lt;xsl:choose&gt;
                &lt;xsl:when test="current-grouping-key()"&gt;
                    &lt;xsl:for-each select="current-group()"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-p" select="$wrapin-p or local-name()='p' or local-name($element)='p'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="$wrapin-ul or local-name()='ul' or local-name($element)='ul'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="$wrapin-li or local-name()='li' or local-name($element)='li'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-b" select="$wrapin-b or local-name()='b' or local-name($element)='b'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-i" select="$wrapin-i or local-name()='i' or local-name($element)='i'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-a" select="$wrapin-a or local-name()='a' or local-name($element)='a'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-a-elem" select="if (local-name()='a') then . else (if (local-name($element)='a') then $element else $wrapin-a-elem)" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:for-each&gt;
                &lt;/xsl:when&gt;
                &lt;xsl:otherwise&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="$wrapin-p"&gt;
                            &lt;xd:p&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="$wrapin-b"&gt;
                                        &lt;xd:b&gt;
                                            &lt;xsl:choose&gt;
                                                &lt;xsl:when test="$wrapin-i"&gt;
                                                  &lt;xd:i&gt;
                                                  &lt;xsl:choose&gt;
                                                  &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                  &lt;/xsl:when&gt;
                                                  &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xsl:otherwise&gt;
                                                  &lt;/xsl:choose&gt;
                                                  &lt;/xd:i&gt;
                                                &lt;/xsl:when&gt;
                                                &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                &lt;/xsl:otherwise&gt;
                                            &lt;/xsl:choose&gt;
                                        &lt;/xd:b&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:when test="$wrapin-i"&gt;
                                        &lt;xd:i&gt;
                                            &lt;xsl:choose&gt;
                                                &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                &lt;/xsl:when&gt;
                                                &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                &lt;/xsl:otherwise&gt;
                                            &lt;/xsl:choose&gt;
                                        &lt;/xd:i&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:when test="$wrapin-a"&gt;
                                        &lt;xd:a&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                            &lt;/xsl:apply-templates&gt;
                                        &lt;/xd:a&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                            &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                        &lt;/xsl:apply-templates&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xd:p&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="$wrapin-li"&gt;
                            &lt;xd:ul&gt;
                                &lt;xd:li&gt;
                                    &lt;xsl:choose&gt;
                                        &lt;xsl:when test="$wrapin-b"&gt;
                                            &lt;xd:b&gt;
                                                &lt;xsl:choose&gt;
                                                  &lt;xsl:when test="$wrapin-i"&gt;
                                                  &lt;xd:i&gt;
                                                  &lt;xsl:choose&gt;
                                                  &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                  &lt;/xsl:when&gt;
                                                  &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xsl:otherwise&gt;
                                                  &lt;/xsl:choose&gt;
                                                  &lt;/xd:i&gt;
                                                  &lt;/xsl:when&gt;
                                                  &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xsl:otherwise&gt;
                                                &lt;/xsl:choose&gt;
                                            &lt;/xd:b&gt;
                                        &lt;/xsl:when&gt;
                                        &lt;xsl:when test="$wrapin-i"&gt;
                                            &lt;xd:i&gt;
                                                &lt;xsl:choose&gt;
                                                  &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                  &lt;/xsl:when&gt;
                                                  &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xsl:otherwise&gt;
                                                &lt;/xsl:choose&gt;
                                            &lt;/xd:i&gt;
                                        &lt;/xsl:when&gt;
                                        &lt;xsl:when test="$wrapin-a"&gt;
                                            &lt;xd:a&gt;
                                                &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                &lt;/xsl:apply-templates&gt;
                                            &lt;/xd:a&gt;
                                        &lt;/xsl:when&gt;
                                        &lt;xsl:otherwise&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                            &lt;/xsl:apply-templates&gt;
                                        &lt;/xsl:otherwise&gt;
                                    &lt;/xsl:choose&gt;
                                &lt;/xd:li&gt;
                            &lt;/xd:ul&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="$wrapin-ul"&gt;
                            &lt;xd:p&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="$wrapin-b"&gt;
                                        &lt;xd:b&gt;
                                            &lt;xsl:choose&gt;
                                                &lt;xsl:when test="$wrapin-i"&gt;
                                                  &lt;xd:i&gt;
                                                  &lt;xsl:choose&gt;
                                                  &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                  &lt;/xsl:when&gt;
                                                  &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xsl:otherwise&gt;
                                                  &lt;/xsl:choose&gt;
                                                  &lt;/xd:i&gt;
                                                &lt;/xsl:when&gt;
                                                &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                &lt;/xsl:otherwise&gt;
                                            &lt;/xsl:choose&gt;
                                        &lt;/xd:b&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:when test="$wrapin-i"&gt;
                                        &lt;xd:i&gt;
                                            &lt;xsl:choose&gt;
                                                &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                &lt;/xsl:when&gt;
                                                &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                &lt;/xsl:otherwise&gt;
                                            &lt;/xsl:choose&gt;
                                        &lt;/xd:i&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:when test="$wrapin-a"&gt;
                                        &lt;xd:a&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                            &lt;/xsl:apply-templates&gt;
                                        &lt;/xd:a&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                            &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                        &lt;/xsl:apply-templates&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xd:p&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="$wrapin-b"&gt;
                            &lt;xd:b&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="$wrapin-i"&gt;
                                        &lt;xd:i&gt;
                                            &lt;xsl:choose&gt;
                                                &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                &lt;/xsl:when&gt;
                                                &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                &lt;/xsl:otherwise&gt;
                                            &lt;/xsl:choose&gt;
                                        &lt;/xd:i&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:when test="$wrapin-a"&gt;
                                        &lt;xd:a&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                            &lt;/xsl:apply-templates&gt;
                                        &lt;/xd:a&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                            &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                        &lt;/xsl:apply-templates&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xd:b&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="$wrapin-i"&gt;
                            &lt;xd:i&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="$wrapin-a"&gt;
                                        &lt;xd:a&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                            &lt;/xsl:apply-templates&gt;
                                        &lt;/xd:a&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                            &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                        &lt;/xsl:apply-templates&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xd:i&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="$wrapin-a"&gt;
                            &lt;xd:a&gt;
                                &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                    &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                &lt;/xsl:apply-templates&gt;
                            &lt;/xd:a&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xsl:otherwise&gt;
            &lt;/xsl:choose&gt;
        &lt;/xsl:for-each-group&gt;
    &lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;&lt;/codeblock&gt;
    &lt;xsl:template name="return"&gt;
        &lt;xsl:variable name="is-empty" select="count(*[local-name()='return']/descendant-or-self::node()[self::text() and string-length(normalize-space())&amp;gt;0 or local-name()='pre'])=0"/&gt;
        &lt;xsl:if test="not($is-empty)"&gt;
            &lt;xd:return&gt;
                &lt;xsl:apply-templates mode="section" select="*[local-name()='return']/node()"/&gt;
            &lt;/xd:return&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;codeblock&gt;&lt;xsl:stylesheet version="2.0"&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Identity template.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template match="@*|node()"&gt;
        &lt;xsl:copy&gt;
            &lt;xsl:apply-templates select="@*|node()"/&gt;
        &lt;/xsl:copy&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Matches each xd:doc element.&lt;/xd:short&gt;&lt;xd:detail&gt;
        
        Determines what code is being documented and calls appropriate templates for: &lt;xd:ul&gt;
                &lt;xd:li&gt;short description (xd:short)&lt;/xd:li&gt;
                &lt;xd:li&gt;detailed description (xd:detail)&lt;/xd:li&gt;
                &lt;xd:li&gt;authors (xd:author)&lt;/xd:li&gt;
                &lt;xd:li&gt;contributors (xd:contributor)&lt;/xd:li&gt;
                &lt;xd:li&gt;maintainers (xd:maintainer)&lt;/xd:li&gt;
                &lt;xd:li&gt;copyright (xd:copyright)&lt;/xd:li&gt;
                &lt;xd:li&gt;version (xd:version)&lt;/xd:li&gt;
                &lt;xd:li&gt;code existed since version (xd:since)&lt;/xd:li&gt;
                &lt;xd:li&gt;see also (xd:see)&lt;/xd:li&gt;
                &lt;xd:li&gt;deprecated since version (xd:deprecated)&lt;/xd:li&gt;
                &lt;xd:li&gt;import statements (xd:import and xsl:import)&lt;/xd:li&gt;
                &lt;xd:li&gt;include statements (xd:include and xsl:include)&lt;/xd:li&gt;
                &lt;xd:li&gt;parameters (xd:param and xsl:param)&lt;/xd:li&gt;
                &lt;xd:li&gt;return values / output (xd:return)&lt;/xd:li&gt;
            &lt;/xd:ul&gt;
        
        
    &lt;/xd:detail&gt;&lt;xd:return&gt;The normalized xd:doc.&lt;/xd:return&gt;&lt;/xd:doc&gt;
    &lt;xsl:template match="xd:doc"&gt;
        &lt;xsl:copy&gt;
            &lt;xsl:variable name="target"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="@target"&gt;
                        &lt;xsl:value-of select="@target"/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="count(preceding-sibling::*)=0"&gt;
                        &lt;xsl:value-of select="'parent'"/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:value-of select="'following'"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:variable&gt;
            &lt;xsl:variable name="code" select="if ($target='parent') then parent::* else following-sibling::*[1]"/&gt;

            &lt;xsl:attribute name="target" select="$target"/&gt;

            &lt;xsl:call-template name="short"/&gt;
            &lt;xsl:call-template name="detail"/&gt;
            &lt;xsl:call-template name="authors"/&gt;
            &lt;xsl:call-template name="contributors"/&gt;
            &lt;xsl:call-template name="maintainers"/&gt;
            &lt;xsl:call-template name="copyright"/&gt;
            &lt;xsl:call-template name="version"/&gt;
            &lt;xsl:call-template name="since"/&gt;
            &lt;xsl:call-template name="see"/&gt;
            &lt;xsl:call-template name="deprecated"/&gt;
            &lt;xsl:call-template name="import"&gt;
                &lt;xsl:with-param name="code" select="$code"/&gt;
            &lt;/xsl:call-template&gt;
            &lt;xsl:call-template name="include"&gt;
                &lt;xsl:with-param name="code" select="$code"/&gt;
            &lt;/xsl:call-template&gt;
            &lt;xsl:call-template name="param"&gt;
                &lt;xsl:with-param name="code" select="$code"/&gt;
            &lt;/xsl:call-template&gt;
            &lt;xsl:call-template name="return"/&gt;
        &lt;/xsl:copy&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Determines the short description.&lt;/xd:short&gt;&lt;xd:detail&gt;
        
        
            &lt;xd:ul&gt;
                &lt;xd:li&gt;If there is no &amp;lt;xd:short/&amp;gt;-element present, but plain text is present as a
                    child of the &amp;lt;xd:doc/&amp;gt;element, then the first sentence from that text (up
                    until the first period (".") will be used as a short description.&lt;/xd:li&gt;
                &lt;xd:li&gt;Else; if there are multiple &amp;lt;xd:short/&amp;gt;-elements, each one of their
                    contents will be wrapped in separate &amp;lt;section/&amp;gt;s.&lt;/xd:li&gt;
                &lt;xd:li&gt;Else; use the one &amp;lt;xd:short/&amp;gt;-element that is present for the short
                    description.&lt;/xd:li&gt;
            &lt;/xd:ul&gt;
        
    &lt;/xd:detail&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="short"&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="count(child::*[local-name()='short'])&amp;gt;1"&gt;
                &lt;xd:short&gt;
                    &lt;xsl:for-each select="child::*[local-name()='short']"&gt;
                        &lt;xd:section&gt;
                            &lt;xsl:apply-templates mode="section"/&gt;
                        &lt;/xd:section&gt;
                    &lt;/xsl:for-each&gt;
                &lt;/xd:short&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="count(child::*[local-name()='short'])=1"&gt;
                &lt;xd:short&gt;
                    &lt;xsl:apply-templates select="child::*[local-name()='short']/node()" mode="section"/&gt;
                &lt;/xd:short&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="child::text()[string-length(normalize-space())&amp;gt;0]"&gt;
                &lt;xsl:variable name="short" select="replace(normalize-space(child::text()[1]),'^([^\.]+\.?)\s?.*$','$1')"/&gt;
                &lt;xd:short&gt;
                    &lt;xsl:value-of select="$short"/&gt;
                &lt;/xd:short&gt;
            &lt;/xsl:when&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Determines the detailed description.&lt;/xd:short&gt;&lt;xd:detail&gt;
        
        The detailed description will be put together based on any number of
            &amp;lt;xd:detail/&amp;gt;-elements, as well as any number of text nodes that are direct
            children of the &amp;lt;xd:doc/&amp;gt;-element. If the xd:short was extracted from the first
            text node, then the first sentence from that text node will be ignored. If there are
            multiple &amp;lt;xd:detail/&amp;gt; and text nodes, then each of them will be wrapped in
            &amp;lt;xd:section/&amp;gt;s.
    &lt;/xd:detail&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="detail"&gt;
        &lt;xsl:variable name="shortInFirstText" select="count(./*[local-name()='short'])=0"/&gt;
        &lt;xsl:variable name="detailCount" select="(if (matches(normalize-space(./text()[1]),'\.[^\.].')) then 1 else 0) + count(*[local-name()='detail' and (descendant-or-self::node()[self::text() and string-length(normalize-space())&amp;gt;0 or local-name()='pre' and not(ancestor::*[local-name()='pre'])])]) + count(./text()[not(position()=1) and string-length(normalize-space())&amp;gt;0])"/&gt;
        &lt;xsl:if test="$detailCount&amp;gt;0"&gt;
            &lt;xd:detail&gt;
                &lt;xsl:for-each select="*|text()"&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="self::text() and count(preceding-sibling::text()[string-length(normalize-space())&amp;gt;0])=0"&gt;
                            &lt;!-- first text --&gt;
                            &lt;xsl:choose&gt;
                                &lt;xsl:when test="$shortInFirstText"&gt;
                                    &lt;xsl:variable name="detail" select="replace(normalize-space(),'^[^\.]+.?\s?(.*)$','$1')"/&gt;
                                    &lt;xsl:choose&gt;
                                        &lt;xsl:when test="$detailCount&amp;gt;1"&gt;
                                            &lt;xd:section&gt;
                                                &lt;xsl:value-of select="$detail"/&gt;
                                            &lt;/xd:section&gt;
                                        &lt;/xsl:when&gt;
                                        &lt;xsl:otherwise&gt;
                                            &lt;xsl:value-of select="$detail"/&gt;
                                        &lt;/xsl:otherwise&gt;
                                    &lt;/xsl:choose&gt;
                                &lt;/xsl:when&gt;
                                &lt;xsl:otherwise&gt;
                                    &lt;xsl:choose&gt;
                                        &lt;xsl:when test="$detailCount&amp;gt;1"&gt;
                                            &lt;xd:section&gt;
                                                &lt;xsl:value-of select="."/&gt;
                                            &lt;/xd:section&gt;
                                        &lt;/xsl:when&gt;
                                        &lt;xsl:otherwise&gt;
                                            &lt;xsl:value-of select="."/&gt;
                                        &lt;/xsl:otherwise&gt;
                                    &lt;/xsl:choose&gt;
                                &lt;/xsl:otherwise&gt;
                            &lt;/xsl:choose&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="self::text()"&gt;
                            &lt;!-- non-first text --&gt;
                            &lt;xsl:choose&gt;
                                &lt;xsl:when test="$detailCount&amp;gt;1"&gt;
                                    &lt;xd:section&gt;
                                        &lt;xsl:value-of select="."/&gt;
                                    &lt;/xd:section&gt;
                                &lt;/xsl:when&gt;
                                &lt;xsl:otherwise&gt;
                                    &lt;xsl:value-of select="."/&gt;
                                &lt;/xsl:otherwise&gt;
                            &lt;/xsl:choose&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="local-name()='detail'"&gt;
                            &lt;!-- detail element --&gt;
                            &lt;xsl:choose&gt;
                                &lt;xsl:when test="$detailCount&amp;gt;1"&gt;
                                    &lt;xd:section&gt;
                                        &lt;xsl:apply-templates select="child::node()" mode="section"/&gt;
                                    &lt;/xd:section&gt;
                                &lt;/xsl:when&gt;
                                &lt;xsl:otherwise&gt;
                                    &lt;xsl:apply-templates select="child::node()" mode="section"/&gt;
                                &lt;/xsl:otherwise&gt;
                            &lt;/xsl:choose&gt;
                        &lt;/xsl:when&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xsl:for-each&gt;
            &lt;/xd:detail&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes the xd:author-elements.&lt;/xd:short&gt;&lt;xd:detail&gt;&amp;gt;xd:author/&amp;lt;s with no text are removed. &amp;lt;xd:author/&amp;gt;s with no child elements will have their text content wrapped in a &amp;lt;xd:name/&amp;gt; element. Children other than xd:name, xd:mailto and xd:organization are ignored.&lt;/xd:detail&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="authors" xml:id="authors"&gt;
        &lt;xsl:for-each select="*[local-name()='author']"&gt;
            &lt;xsl:variable name="is-empty" select="count(descendant-or-self::text()[string-length(normalize-space())&amp;gt;0])=0"/&gt;
            &lt;xsl:if test="not($is-empty)"&gt;
                &lt;xd:author&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="count(child::*)=0"&gt;
                            &lt;xd:name&gt;
                                &lt;xsl:value-of select="."/&gt;
                            &lt;/xd:name&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:if test="child::*[local-name()='name']"&gt;
                                &lt;xd:name&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='name']"/&gt;
                                &lt;/xd:name&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='mailto']"&gt;
                                &lt;xd:mailto&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='mailto']"/&gt;
                                &lt;/xd:mailto&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='organization']"&gt;
                                &lt;xd:organization&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='organization']"/&gt;
                                &lt;/xd:organization&gt;
                            &lt;/xsl:if&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xd:author&gt;
            &lt;/xsl:if&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;&amp;lt;xd:contributor/&amp;gt;s are normalized in the same way as &amp;lt;xd:author/&amp;gt;s&lt;/xd:short&gt;&lt;xd:see&gt;#authors&lt;/xd:see&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="contributors"&gt;
        &lt;xsl:for-each select="*[local-name()='contributor']"&gt;
            &lt;xsl:variable name="is-empty" select="count(descendant-or-self::text()[string-length(normalize-space())&amp;gt;0])=0"/&gt;
            &lt;xsl:if test="not($is-empty)"&gt;
                &lt;xd:contributor&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="count(child::*)=0"&gt;
                            &lt;xd:name&gt;
                                &lt;xsl:value-of select="."/&gt;
                            &lt;/xd:name&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:if test="child::*[local-name()='name']"&gt;
                                &lt;xd:name&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='name']"/&gt;
                                &lt;/xd:name&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='mailto']"&gt;
                                &lt;xd:mailto&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='mailto']"/&gt;
                                &lt;/xd:mailto&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='organization']"&gt;
                                &lt;xd:organization&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='organization']"/&gt;
                                &lt;/xd:organization&gt;
                            &lt;/xsl:if&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xd:contributor&gt;
            &lt;/xsl:if&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;&amp;lt;xd:maintainer/&amp;gt;s are normalized in the same way as &amp;lt;xd:author/&amp;gt;s&lt;/xd:short&gt;&lt;xd:see&gt;#authors&lt;/xd:see&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="maintainers"&gt;
        &lt;xsl:for-each select="*[local-name()='maintainer']"&gt;
            &lt;xsl:variable name="is-empty" select="count(descendant-or-self::text()[string-length(normalize-space())&amp;gt;0])=0"/&gt;
            &lt;xsl:if test="not($is-empty)"&gt;
                &lt;xd:maintainer&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="count(child::*)=0"&gt;
                            &lt;xd:name&gt;
                                &lt;xsl:value-of select="."/&gt;
                            &lt;/xd:name&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:if test="child::*[local-name()='name']"&gt;
                                &lt;xd:name&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='name']"/&gt;
                                &lt;/xd:name&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='mailto']"&gt;
                                &lt;xd:mailto&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='mailto']"/&gt;
                                &lt;/xd:mailto&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='organization']"&gt;
                                &lt;xd:organization&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='organization']"/&gt;
                                &lt;/xd:organization&gt;
                            &lt;/xsl:if&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xd:maintainer&gt;
            &lt;/xsl:if&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes the xd:copyright-element.&lt;/xd:short&gt;&lt;xd:detail&gt;&amp;gt;xd:copyright/&amp;lt;s with no text are removed. &amp;lt;xd:copyright/&amp;gt;s with no child elements will have their text content wrapped in a &amp;lt;xd:name/&amp;gt; element. Children other than xd:year, xd:name, xd:mailto and xd:organization are ignored.&lt;/xd:detail&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="copyright"&gt;
        &lt;xsl:for-each select="*[local-name()='copyright']"&gt;
            &lt;xsl:variable name="is-empty" select="count(descendant-or-self::text()[string-length(normalize-space())&amp;gt;0])=0"/&gt;
            &lt;xsl:if test="not($is-empty)"&gt;
                &lt;xd:copyright&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="count(child::*)=0"&gt;
                            &lt;xd:name&gt;
                                &lt;xsl:value-of select="."/&gt;
                            &lt;/xd:name&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:if test="child::*[local-name()='year']"&gt;
                                &lt;xd:year&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='year']"/&gt;
                                &lt;/xd:year&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='name']"&gt;
                                &lt;xd:name&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='name']"/&gt;
                                &lt;/xd:name&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='mailto']"&gt;
                                &lt;xd:mailto&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='mailto']"/&gt;
                                &lt;/xd:mailto&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='organization']"&gt;
                                &lt;xd:organization&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='organization']"/&gt;
                                &lt;/xd:organization&gt;
                            &lt;/xsl:if&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xd:copyright&gt;
            &lt;/xsl:if&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:version elements.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="version"&gt;
        &lt;xsl:if test="child::*[local-name()='version' and string-length(normalize-space(./text()))&amp;gt;0]"&gt;
            &lt;xd:version&gt;
                &lt;xsl:value-of select="child::*[local-name()='version' and string-length(normalize-space(./text()))&amp;gt;0]"/&gt;
            &lt;/xd:version&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:since elements.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="since"&gt;
        &lt;xsl:if test="child::*[local-name()='since' and string-length(normalize-space(./text()))&amp;gt;0]"&gt;
            &lt;xd:since&gt;
                &lt;xsl:value-of select="child::*[local-name()='since' and string-length(normalize-space(./text()))&amp;gt;0]"/&gt;
            &lt;/xd:since&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:see elements.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="see"&gt;
        &lt;xsl:if test="child::*[local-name()='see' and string-length(normalize-space(./text()))&amp;gt;0]"&gt;
            &lt;xd:see&gt;
                &lt;xsl:value-of select="child::*[local-name()='see' and string-length(normalize-space(./text()))&amp;gt;0]"/&gt;
            &lt;/xd:see&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:deprecated elements.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="deprecated"&gt;
        &lt;xsl:if test="child::*[local-name()='deprecated' and string-length(normalize-space(./text()))&amp;gt;0]"&gt;
            &lt;xd:deprecated&gt;
                &lt;xsl:value-of select="child::*[local-name()='deprecated' and string-length(normalize-space(./text()))&amp;gt;0]"/&gt;
            &lt;/xd:deprecated&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:import elements.&lt;/xd:short&gt;&lt;xd:detail&gt;Will create empty documentation for imports that are not documented, and removes documentation of imports that does not exist in the code.&lt;/xd:detail&gt;&lt;xd:param name="code"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="import"&gt;
        &lt;xsl:param name="code" required="yes"/&gt;
        &lt;xsl:variable name="doc" select="."/&gt;
        &lt;xsl:for-each select="$code/xsl:import"&gt;
            &lt;xsl:variable name="href" select="@href"/&gt;
            &lt;xd:import href="{@href}"&gt;
                &lt;xsl:if test="$doc/*[local-name()='import' and @href=$href]"&gt;
                    &lt;xsl:value-of select="$doc/*[local-name()='import' and @href=$href]"/&gt;
                &lt;/xsl:if&gt;
            &lt;/xd:import&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:include elements.&lt;/xd:short&gt;&lt;xd:detail&gt;Will create empty documentation for includes that are not documented, and removes documentation of includes that does not exist in the code.&lt;/xd:detail&gt;&lt;xd:param name="code"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="include"&gt;
        &lt;xsl:param name="code" required="yes"/&gt;
        &lt;xsl:variable name="doc" select="."/&gt;
        &lt;xsl:for-each select="$code/xsl:include"&gt;
            &lt;xsl:variable name="href" select="@href"/&gt;
            &lt;xd:include href="{@href}"&gt;
                &lt;xsl:if test="$doc/*[local-name()='include' and @href=$href]"&gt;
                    &lt;xsl:value-of select="$doc/*[local-name()='include' and @href=$href]"/&gt;
                &lt;/xsl:if&gt;
            &lt;/xd:include&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:import elements.&lt;/xd:short&gt;&lt;xd:detail&gt;Will create empty documentation for imports that are not documented, and removes documentation of imports that does not exist in the code.&lt;/xd:detail&gt;&lt;xd:param name="code"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="param"&gt;
        &lt;xsl:param name="code" required="yes"/&gt;
        &lt;xsl:variable name="doc" select="."/&gt;
        &lt;xsl:for-each select="*[local-name()='param']"&gt;
            &lt;xd:param&gt;
                &lt;xsl:apply-templates select="@*"/&gt;
                &lt;xsl:apply-templates mode="section" select="node()"/&gt;
            &lt;/xd:param&gt;
        &lt;/xsl:for-each&gt;
        &lt;xsl:for-each select="$code/xsl:param"&gt;
            &lt;xsl:variable name="name" select="@name"/&gt;
            &lt;xsl:if test="not($doc/*[local-name()='param' and @name=$name])"&gt;
                &lt;xd:param name="{@name}"/&gt;
            &lt;/xsl:if&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Describes the result of the code.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="return"&gt;
        &lt;xsl:variable name="is-empty" select="count(*[local-name()='return']/descendant-or-self::node()[self::text() and string-length(normalize-space())&amp;gt;0 or local-name()='pre'])=0"/&gt;
        &lt;xsl:if test="not($is-empty)"&gt;
            &lt;xd:return&gt;
                &lt;xsl:apply-templates mode="section" select="*[local-name()='return']/node()"/&gt;
            &lt;/xd:return&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Matches all elements when in "section"-mode.&lt;/xd:short&gt;&lt;xd:detail&gt;
        
        Checks all child elements and their descendants and wraps and handles as is
            appropriate. If a child or descendant is placed in a problematic position, then one of
            the unwrap*-templates are called to solve the problem. Otherwise, just make sure that
            the element is in the correct namespace and copy it.
    &lt;/xd:detail&gt;&lt;xd:param name="wrapin-p"/&gt;&lt;xd:param name="wrapin-ul"/&gt;&lt;xd:param name="wrapin-li"/&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template mode="section" match="@*|node()"&gt;
        &lt;xsl:param name="wrapin-p" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-ul" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-li" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:variable name="is-empty" select="count(descendant-or-self::node()[self::text() and string-length(normalize-space())&amp;gt;0 or local-name()='pre'])=0"/&gt;
        &lt;xsl:variable name="contains-section" select="count(descendant::*[local-name()='section'])&amp;gt;0"/&gt;
        &lt;xsl:variable name="contains-block" select="count(descendant::*[local-name()='ul' or local-name()='li' or local-name()='pre' or local-name()='p'])&amp;gt;0"/&gt;
        &lt;xsl:variable name="contains-block-non-li" select="count(descendant::*[local-name()='ul' or local-name()='pre' or local-name()='p'])&amp;gt;0"/&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="local-name()='section'"&gt;
                &lt;xd:section&gt;
                    &lt;xsl:apply-templates mode="section" select="@*|node()"/&gt;
                &lt;/xd:section&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='p'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$contains-section or $contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-p" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:p&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:p&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='pre'"&gt;
                &lt;xd:pre&gt;
                    &lt;xsl:copy-of select="@*|node()"/&gt;
                &lt;/xd:pre&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='ul'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-section"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$contains-block-non-li"&gt;
                        &lt;xd:section&gt;
                            &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                                &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                            &lt;/xsl:call-template&gt;
                        &lt;/xd:section&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="count(descendant::*[local-name()='li'])=0"&gt;
                        &lt;xsl:choose&gt;
                            &lt;xsl:when test="count(child::node()[self::* or self::text() and string-length(normalize-space())&amp;gt;0])&amp;gt;1"&gt;
                                &lt;xd:section&gt;
                                    &lt;xsl:apply-templates mode="section" select="@*|node()"&gt;
                                        &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                                        &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                                    &lt;/xsl:apply-templates&gt;
                                &lt;/xd:section&gt;
                            &lt;/xsl:when&gt;
                            &lt;xsl:otherwise&gt;
                                &lt;xsl:apply-templates mode="section" select="@*|node()"&gt;
                                    &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                                &lt;/xsl:apply-templates&gt;
                            &lt;/xsl:otherwise&gt;
                        &lt;/xsl:choose&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:ul&gt;
                            &lt;xsl:apply-templates mode="list" select="@*|node()"&gt;
                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:ul&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='li'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-section"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:ul&gt;
                            &lt;xd:li&gt;
                                &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                            &lt;/xd:li&gt;
                        &lt;/xd:ul&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='b'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-section"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-b" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-b" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:b&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:b&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='i'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-section"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-i" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-i" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:i&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:i&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='a'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-section"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-a" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-a-elem" select="." tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-a" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-a-elem" select="." tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:a&gt;
                            &lt;xsl:apply-templates select="@*"/&gt;
                            &lt;xsl:apply-templates mode="phrase" select="node()"/&gt;
                        &lt;/xd:a&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="self::*"&gt;
                        &lt;xsl:choose&gt;
                            &lt;xsl:when test="not(preceding-sibling::*) and not(following-sibling::*)"&gt;
                                &lt;xsl:apply-templates mode="section" select="@*|node()"/&gt;
                            &lt;/xsl:when&gt;
                            &lt;xsl:otherwise&gt;
                                &lt;xd:section&gt;
                                    &lt;xsl:apply-templates mode="section" select="@*|node()"/&gt;
                                &lt;/xd:section&gt;
                            &lt;/xsl:otherwise&gt;
                        &lt;/xsl:choose&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="self::text()"&gt;
                        &lt;xsl:copy/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="section" select="@*|node()"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Handles non-problematic lists.&lt;/xd:short&gt;&lt;xd:param name="wrapin-p"/&gt;&lt;xd:param name="wrapin-ul"/&gt;&lt;xd:param name="wrapin-li"/&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template mode="list" match="@*|node()"&gt;
        &lt;xsl:param name="wrapin-p" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-ul" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-li" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:variable name="is-empty" select="count(descendant-or-self::node()[self::text() and string-length(normalize-space())&amp;gt;0 or local-name()='pre'])=0"/&gt;
        &lt;xsl:variable name="contains-block" select="count(descendant::*[local-name()='ul' or local-name()='li' or local-name()='pre' or local-name()='p'])&amp;gt;0"/&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="local-name()='li'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$wrapin-ul"&gt;
                        &lt;xd:ul&gt;
                            &lt;xd:li&gt;
                                &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                            &lt;/xd:li&gt;
                        &lt;/xd:ul&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:li&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:li&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="self::text()"&gt;
                        &lt;xsl:copy/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="list" select="@*|node()"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Handles all elements when in "block" mode and applies fixes where needed.&lt;/xd:short&gt;&lt;xd:param name="wrapin-p"/&gt;&lt;xd:param name="wrapin-ul"/&gt;&lt;xd:param name="wrapin-li"/&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template mode="block" match="@*|node()"&gt;
        &lt;xsl:param name="wrapin-p" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-ul" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-li" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:variable name="element" select="."/&gt;
        &lt;xsl:variable name="is-empty" select="count(descendant-or-self::node()[self::* or self::text() and string-length(normalize-space())&amp;gt;0])=0"/&gt;
        &lt;xsl:variable name="contains-block" select="count(descendant::*[local-name()='ul' or local-name()='li' or local-name()='pre' or local-name()='p'])&amp;gt;0"/&gt;
        &lt;xsl:variable name="contains-block-non-li" select="count(descendant::*[local-name()='ul' or local-name()='pre' or local-name()='p'])&amp;gt;0"/&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="local-name()='p'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:p&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:p&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='pre'"&gt;
                &lt;xd:pre&gt;
                    &lt;xsl:copy-of select="@*|node()"/&gt;
                &lt;/xd:pre&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='ul'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block-non-li"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="count(descendant::*[local-name()='li' and string-length(normalize-space(descendant-or-self::text()))&amp;gt;0])=0"&gt;
                        &lt;xsl:apply-templates mode="block" select="@*|node()"/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:ul&gt;
                            &lt;xsl:apply-templates mode="list" select="@*|node()"&gt;
                                &lt;xsl:with-param name="wrapin-ul" select="false()"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:ul&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='li'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:ul&gt;
                            &lt;xd:li&gt;
                                &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                                    &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                &lt;/xsl:apply-templates&gt;
                            &lt;/xd:li&gt;
                        &lt;/xd:ul&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="not($contains-block) and $wrapin-p"&gt;
                &lt;xd:p&gt;
                    &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                        &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                        &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                        &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                    &lt;/xsl:apply-templates&gt;
                &lt;/xd:p&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="not($contains-block) and $wrapin-li"&gt;
                &lt;xd:ul&gt;
                    &lt;xd:li&gt;
                        &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                            &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xd:li&gt;
                &lt;/xd:ul&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='b'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-b" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:b&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:b&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='i'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-i" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:i&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:i&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='a'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-a" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-a-elem" select="$element" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:a&gt;
                            &lt;xsl:apply-templates mode="phrase" select="$element/@*"/&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:a&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="self::text()"&gt;
                        &lt;xsl:copy/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="block" select="@*|node()"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Phrases are matched with this template (mode="phrase") and handled appropriately.&lt;/xd:short&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template mode="phrase" match="@*|node()"&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="local-name()='b'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='b'])"&gt;
                        &lt;xd:b&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:b&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="$wrapin-b"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='b'])"&gt;
                        &lt;xd:b&gt;
                            &lt;xsl:apply-templates mode="phrase" select="."&gt;
                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:b&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="."&gt;
                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='i'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='i'])"&gt;
                        &lt;xd:i&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:i&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="$wrapin-i"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='i'])"&gt;
                        &lt;xd:i&gt;
                            &lt;xsl:apply-templates mode="phrase" select="."&gt;
                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:i&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="."&gt;
                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='a'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='a'])"&gt;
                        &lt;xd:a&gt;
                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                            &lt;xsl:apply-templates mode="phrase" select="node()"&gt;
                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:a&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="$wrapin-a"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='a'])"&gt;
                        &lt;xd:a&gt;
                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                            &lt;xsl:apply-templates mode="phrase" select="."&gt;
                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:a&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="."&gt;
                            &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="self::text()"&gt;
                        &lt;xsl:copy/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;This template unwraps problematic elements into sections.&lt;/xd:short&gt;&lt;xd:param name="wasWrapped"/&gt;&lt;xd:param name="wrapin-p"/&gt;&lt;xd:param name="wrapin-ul"/&gt;&lt;xd:param name="wrapin-li"/&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="unwrap-to-sections"&gt;
        &lt;xsl:param name="wasWrapped" select="false()"/&gt;
        &lt;xsl:param name="wrapin-p" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-ul" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-li" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:variable name="element" select="."/&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="not($wasWrapped) and count(child::node()[self::* or self::text() and string-length(normalize-space())&amp;gt;0])&amp;gt;1"&gt;
                &lt;xd:section&gt;
                    &lt;xsl:call-template name="unwrap-to-sections"&gt;
                        &lt;xsl:with-param name="wasWrapped" select="true()"/&gt;
                    &lt;/xsl:call-template&gt;
                &lt;/xd:section&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
                &lt;xsl:for-each-group select="child::node()[self::* or self::text() and string-length(normalize-space())&amp;gt;0]" group-adjacent="self::* and not(ancestor::*[local-name()='pre']) and (local-name()='section' or local-name()='ul' or local-name()='li' or local-name()='pre' or local-name()='p')"&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="current-grouping-key()"&gt;
                            &lt;xsl:choose&gt;
                                &lt;xsl:when test="count(current-group())&amp;gt;1 and last()&amp;gt;1"&gt;
                                    &lt;xd:section&gt;
                                        &lt;xsl:apply-templates mode="section" select="current-group()"&gt;
                                            &lt;xsl:with-param name="wrapin-p" tunnel="yes" select="if ($wrapin-p or local-name($element)='p') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-ul" tunnel="yes" select="if ($wrapin-ul or local-name($element)='ul') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-li" tunnel="yes" select="if ($wrapin-li or local-name($element)='li') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-b" tunnel="yes" select="if ($wrapin-b or local-name($element)='b') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-i" tunnel="yes" select="if ($wrapin-i or local-name($element)='i') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-a" tunnel="yes" select="if ($wrapin-a or local-name($element)='a') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-a-elem" tunnel="yes" select="if (not($wrapin-a) and local-name($element)='a') then $element else false()"/&gt;
                                        &lt;/xsl:apply-templates&gt;
                                    &lt;/xd:section&gt;
                                &lt;/xsl:when&gt;
                                &lt;xsl:otherwise&gt;
                                    &lt;xsl:apply-templates mode="section" select="current-group()"&gt;
                                        &lt;xsl:with-param name="wrapin-p" tunnel="yes" select="if ($wrapin-p or local-name($element)='p') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-ul" tunnel="yes" select="if ($wrapin-ul or local-name($element)='ul') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-li" tunnel="yes" select="if ($wrapin-li or local-name($element)='li') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-b" tunnel="yes" select="if ($wrapin-b or local-name($element)='b') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-i" tunnel="yes" select="if ($wrapin-i or local-name($element)='i') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-a" tunnel="yes" select="if ($wrapin-a or local-name($element)='a') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-a-elem" tunnel="yes" select="if (not($wrapin-a) and local-name($element)='a') then $element else false()"/&gt;
                                    &lt;/xsl:apply-templates&gt;
                                &lt;/xsl:otherwise&gt;
                            &lt;/xsl:choose&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:element name="xd:{local-name($element)}"&gt;
                                &lt;xsl:for-each select="$element/@*"&gt;
                                    &lt;xsl:attribute name="xd:{local-name()}" select="."/&gt;
                                &lt;/xsl:for-each&gt;
                                &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                    &lt;xsl:with-param name="wrapin-p" tunnel="yes" select="if ($wrapin-p or local-name($element)='p') then false() else $wrapin-p"/&gt;
                                    &lt;xsl:with-param name="wrapin-ul" tunnel="yes" select="if ($wrapin-ul or local-name($element)='ul') then false() else $wrapin-ul"/&gt;
                                    &lt;xsl:with-param name="wrapin-li" tunnel="yes" select="if ($wrapin-li or local-name($element)='li') then false() else $wrapin-li"/&gt;
                                    &lt;xsl:with-param name="wrapin-b" tunnel="yes" select="if ($wrapin-b or local-name($element)='b') then false() else $wrapin-b"/&gt;
                                    &lt;xsl:with-param name="wrapin-i" tunnel="yes" select="if ($wrapin-i or local-name($element)='i') then false() else $wrapin-i"/&gt;
                                    &lt;xsl:with-param name="wrapin-a" tunnel="yes" select="if ($wrapin-a or local-name($element)='a') then false() else $wrapin-a"/&gt;
                                &lt;/xsl:apply-templates&gt;
                            &lt;/xsl:element&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xsl:for-each-group&gt;
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;This template unwraps problematic elements into blocks.&lt;/xd:short&gt;&lt;xd:param name="wrapin-p"/&gt;&lt;xd:param name="wrapin-ul"/&gt;&lt;xd:param name="wrapin-li"/&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="unwrap-to-blocks"&gt;
        &lt;xsl:param name="wrapin-p" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-ul" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-li" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:variable name="element" select="."/&gt;
        &lt;xsl:for-each-group select="child::node()[self::* or self::text() and string-length(normalize-space())&amp;gt;0]" group-adjacent="count(descendant-or-self::*[local-name()='ul' or local-name()='li' or local-name()='pre' or local-name()='p'])&amp;gt;0"&gt;
            &lt;xsl:choose&gt;
                &lt;xsl:when test="current-grouping-key()"&gt;
                    &lt;xsl:for-each select="current-group()"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-p" select="$wrapin-p or local-name()='p' or local-name($element)='p'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="$wrapin-ul or local-name()='ul' or local-name($element)='ul'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="$wrapin-li or local-name()='li' or local-name($element)='li'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-b" select="$wrapin-b or local-name()='b' or local-name($element)='b'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-i" select="$wrapin-i or local-name()='i' or local-name($element)='i'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-a" select="$wrapin-a or local-name()='a' or local-name($element)='a'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-a-elem" select="if (local-name()='a') then . else (if (local-name($element)='a') then $element else $wrapin-a-elem)" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:for-each&gt;
                &lt;/xsl:when&gt;
                &lt;xsl:otherwise&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="$wrapin-p"&gt;
                            &lt;xd:p&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="$wrapin-b"&gt;
                                        &lt;xd:b&gt;
                                            &lt;xsl:choose&gt;
                                                &lt;xsl:when test="$wrapin-i"&gt;
                                                  &lt;xd:i&gt;
                                                  &lt;xsl:choose&gt;
                                                  &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                  &lt;/xsl:when&gt;
                                                  &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xsl:otherwise&gt;
                                                  &lt;/xsl:choose&gt;
                                                  &lt;/xd:i&gt;
                                                &lt;/xsl:when&gt;
                                                &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                &lt;/xsl:otherwise&gt;
                                            &lt;/xsl:choose&gt;
                                        &lt;/xd:b&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:when test="$wrapin-i"&gt;
                                        &lt;xd:i&gt;
                                            &lt;xsl:choose&gt;
                                                &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                &lt;/xsl:when&gt;
                                                &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                &lt;/xsl:otherwise&gt;
                                            &lt;/xsl:choose&gt;
                                        &lt;/xd:i&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:when test="$wrapin-a"&gt;
                                        &lt;xd:a&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                            &lt;/xsl:apply-templates&gt;
                                        &lt;/xd:a&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                            &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                        &lt;/xsl:apply-templates&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xd:p&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="$wrapin-li"&gt;
                            &lt;xd:ul&gt;
                                &lt;xd:li&gt;
                                    &lt;xsl:choose&gt;
                                        &lt;xsl:when test="$wrapin-b"&gt;
                                            &lt;xd:b&gt;
                                                &lt;xsl:choose&gt;
                                                  &lt;xsl:when test="$wrapin-i"&gt;
                                                  &lt;xd:i&gt;
                                                  &lt;xsl:choose&gt;
                                                  &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                  &lt;/xsl:when&gt;
                                                  &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xsl:otherwise&gt;
                                                  &lt;/xsl:choose&gt;
                                                  &lt;/xd:i&gt;
                                                  &lt;/xsl:when&gt;
                                                  &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xsl:otherwise&gt;
                                                &lt;/xsl:choose&gt;
                                            &lt;/xd:b&gt;
                                        &lt;/xsl:when&gt;
                                        &lt;xsl:when test="$wrapin-i"&gt;
                                            &lt;xd:i&gt;
                                                &lt;xsl:choose&gt;
                                                  &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                  &lt;/xsl:when&gt;
                                                  &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xsl:otherwise&gt;
                                                &lt;/xsl:choose&gt;
                                            &lt;/xd:i&gt;
                                        &lt;/xsl:when&gt;
                                        &lt;xsl:when test="$wrapin-a"&gt;
                                            &lt;xd:a&gt;
                                                &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                &lt;/xsl:apply-templates&gt;
                                            &lt;/xd:a&gt;
                                        &lt;/xsl:when&gt;
                                        &lt;xsl:otherwise&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                            &lt;/xsl:apply-templates&gt;
                                        &lt;/xsl:otherwise&gt;
                                    &lt;/xsl:choose&gt;
                                &lt;/xd:li&gt;
                            &lt;/xd:ul&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="$wrapin-ul"&gt;
                            &lt;xd:p&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="$wrapin-b"&gt;
                                        &lt;xd:b&gt;
                                            &lt;xsl:choose&gt;
                                                &lt;xsl:when test="$wrapin-i"&gt;
                                                  &lt;xd:i&gt;
                                                  &lt;xsl:choose&gt;
                                                  &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                  &lt;/xsl:when&gt;
                                                  &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xsl:otherwise&gt;
                                                  &lt;/xsl:choose&gt;
                                                  &lt;/xd:i&gt;
                                                &lt;/xsl:when&gt;
                                                &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                &lt;/xsl:otherwise&gt;
                                            &lt;/xsl:choose&gt;
                                        &lt;/xd:b&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:when test="$wrapin-i"&gt;
                                        &lt;xd:i&gt;
                                            &lt;xsl:choose&gt;
                                                &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                &lt;/xsl:when&gt;
                                                &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                &lt;/xsl:otherwise&gt;
                                            &lt;/xsl:choose&gt;
                                        &lt;/xd:i&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:when test="$wrapin-a"&gt;
                                        &lt;xd:a&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                            &lt;/xsl:apply-templates&gt;
                                        &lt;/xd:a&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                            &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                        &lt;/xsl:apply-templates&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xd:p&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="$wrapin-b"&gt;
                            &lt;xd:b&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="$wrapin-i"&gt;
                                        &lt;xd:i&gt;
                                            &lt;xsl:choose&gt;
                                                &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                &lt;/xsl:when&gt;
                                                &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                &lt;/xsl:otherwise&gt;
                                            &lt;/xsl:choose&gt;
                                        &lt;/xd:i&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:when test="$wrapin-a"&gt;
                                        &lt;xd:a&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                            &lt;/xsl:apply-templates&gt;
                                        &lt;/xd:a&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                            &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                        &lt;/xsl:apply-templates&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xd:b&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="$wrapin-i"&gt;
                            &lt;xd:i&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="$wrapin-a"&gt;
                                        &lt;xd:a&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                            &lt;/xsl:apply-templates&gt;
                                        &lt;/xd:a&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                            &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                        &lt;/xsl:apply-templates&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xd:i&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="$wrapin-a"&gt;
                            &lt;xd:a&gt;
                                &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                    &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                &lt;/xsl:apply-templates&gt;
                            &lt;/xd:a&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xsl:otherwise&gt;
            &lt;/xsl:choose&gt;
        &lt;/xsl:for-each-group&gt;
    &lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;&lt;/codeblock&gt;
    &lt;xsl:template mode="section" match="@*|node()"&gt;
        &lt;xsl:param name="wrapin-p" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-ul" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-li" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:variable name="is-empty" select="count(descendant-or-self::node()[self::text() and string-length(normalize-space())&amp;gt;0 or local-name()='pre'])=0"/&gt;
        &lt;xsl:variable name="contains-section" select="count(descendant::*[local-name()='section'])&amp;gt;0"/&gt;
        &lt;xsl:variable name="contains-block" select="count(descendant::*[local-name()='ul' or local-name()='li' or local-name()='pre' or local-name()='p'])&amp;gt;0"/&gt;
        &lt;xsl:variable name="contains-block-non-li" select="count(descendant::*[local-name()='ul' or local-name()='pre' or local-name()='p'])&amp;gt;0"/&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="local-name()='section'"&gt;
                &lt;xd:section&gt;
                    &lt;xsl:apply-templates mode="section" select="@*|node()"/&gt;
                &lt;/xd:section&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='p'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$contains-section or $contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-p" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:p&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:p&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='pre'"&gt;
                &lt;xd:pre&gt;
                    &lt;xsl:copy-of select="@*|node()"/&gt;
                &lt;/xd:pre&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='ul'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-section"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$contains-block-non-li"&gt;
                        &lt;xd:section&gt;
                            &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                                &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                            &lt;/xsl:call-template&gt;
                        &lt;/xd:section&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="count(descendant::*[local-name()='li'])=0"&gt;
                        &lt;xsl:choose&gt;
                            &lt;xsl:when test="count(child::node()[self::* or self::text() and string-length(normalize-space())&amp;gt;0])&amp;gt;1"&gt;
                                &lt;xd:section&gt;
                                    &lt;xsl:apply-templates mode="section" select="@*|node()"&gt;
                                        &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                                        &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                                    &lt;/xsl:apply-templates&gt;
                                &lt;/xd:section&gt;
                            &lt;/xsl:when&gt;
                            &lt;xsl:otherwise&gt;
                                &lt;xsl:apply-templates mode="section" select="@*|node()"&gt;
                                    &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                                &lt;/xsl:apply-templates&gt;
                            &lt;/xsl:otherwise&gt;
                        &lt;/xsl:choose&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:ul&gt;
                            &lt;xsl:apply-templates mode="list" select="@*|node()"&gt;
                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:ul&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='li'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-section"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:ul&gt;
                            &lt;xd:li&gt;
                                &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                            &lt;/xd:li&gt;
                        &lt;/xd:ul&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='b'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-section"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-b" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-b" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:b&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:b&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='i'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-section"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-i" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-i" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:i&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:i&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='a'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-section"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-a" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-a-elem" select="." tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-a" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-a-elem" select="." tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:a&gt;
                            &lt;xsl:apply-templates select="@*"/&gt;
                            &lt;xsl:apply-templates mode="phrase" select="node()"/&gt;
                        &lt;/xd:a&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="self::*"&gt;
                        &lt;xsl:choose&gt;
                            &lt;xsl:when test="not(preceding-sibling::*) and not(following-sibling::*)"&gt;
                                &lt;xsl:apply-templates mode="section" select="@*|node()"/&gt;
                            &lt;/xsl:when&gt;
                            &lt;xsl:otherwise&gt;
                                &lt;xd:section&gt;
                                    &lt;xsl:apply-templates mode="section" select="@*|node()"/&gt;
                                &lt;/xd:section&gt;
                            &lt;/xsl:otherwise&gt;
                        &lt;/xsl:choose&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="self::text()"&gt;
                        &lt;xsl:copy/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="section" select="@*|node()"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;codeblock&gt;&lt;xsl:stylesheet version="2.0"&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Identity template.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template match="@*|node()"&gt;
        &lt;xsl:copy&gt;
            &lt;xsl:apply-templates select="@*|node()"/&gt;
        &lt;/xsl:copy&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Matches each xd:doc element.&lt;/xd:short&gt;&lt;xd:detail&gt;
        
        Determines what code is being documented and calls appropriate templates for: &lt;xd:ul&gt;
                &lt;xd:li&gt;short description (xd:short)&lt;/xd:li&gt;
                &lt;xd:li&gt;detailed description (xd:detail)&lt;/xd:li&gt;
                &lt;xd:li&gt;authors (xd:author)&lt;/xd:li&gt;
                &lt;xd:li&gt;contributors (xd:contributor)&lt;/xd:li&gt;
                &lt;xd:li&gt;maintainers (xd:maintainer)&lt;/xd:li&gt;
                &lt;xd:li&gt;copyright (xd:copyright)&lt;/xd:li&gt;
                &lt;xd:li&gt;version (xd:version)&lt;/xd:li&gt;
                &lt;xd:li&gt;code existed since version (xd:since)&lt;/xd:li&gt;
                &lt;xd:li&gt;see also (xd:see)&lt;/xd:li&gt;
                &lt;xd:li&gt;deprecated since version (xd:deprecated)&lt;/xd:li&gt;
                &lt;xd:li&gt;import statements (xd:import and xsl:import)&lt;/xd:li&gt;
                &lt;xd:li&gt;include statements (xd:include and xsl:include)&lt;/xd:li&gt;
                &lt;xd:li&gt;parameters (xd:param and xsl:param)&lt;/xd:li&gt;
                &lt;xd:li&gt;return values / output (xd:return)&lt;/xd:li&gt;
            &lt;/xd:ul&gt;
        
        
    &lt;/xd:detail&gt;&lt;xd:return&gt;The normalized xd:doc.&lt;/xd:return&gt;&lt;/xd:doc&gt;
    &lt;xsl:template match="xd:doc"&gt;
        &lt;xsl:copy&gt;
            &lt;xsl:variable name="target"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="@target"&gt;
                        &lt;xsl:value-of select="@target"/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="count(preceding-sibling::*)=0"&gt;
                        &lt;xsl:value-of select="'parent'"/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:value-of select="'following'"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:variable&gt;
            &lt;xsl:variable name="code" select="if ($target='parent') then parent::* else following-sibling::*[1]"/&gt;

            &lt;xsl:attribute name="target" select="$target"/&gt;

            &lt;xsl:call-template name="short"/&gt;
            &lt;xsl:call-template name="detail"/&gt;
            &lt;xsl:call-template name="authors"/&gt;
            &lt;xsl:call-template name="contributors"/&gt;
            &lt;xsl:call-template name="maintainers"/&gt;
            &lt;xsl:call-template name="copyright"/&gt;
            &lt;xsl:call-template name="version"/&gt;
            &lt;xsl:call-template name="since"/&gt;
            &lt;xsl:call-template name="see"/&gt;
            &lt;xsl:call-template name="deprecated"/&gt;
            &lt;xsl:call-template name="import"&gt;
                &lt;xsl:with-param name="code" select="$code"/&gt;
            &lt;/xsl:call-template&gt;
            &lt;xsl:call-template name="include"&gt;
                &lt;xsl:with-param name="code" select="$code"/&gt;
            &lt;/xsl:call-template&gt;
            &lt;xsl:call-template name="param"&gt;
                &lt;xsl:with-param name="code" select="$code"/&gt;
            &lt;/xsl:call-template&gt;
            &lt;xsl:call-template name="return"/&gt;
        &lt;/xsl:copy&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Determines the short description.&lt;/xd:short&gt;&lt;xd:detail&gt;
        
        
            &lt;xd:ul&gt;
                &lt;xd:li&gt;If there is no &amp;lt;xd:short/&amp;gt;-element present, but plain text is present as a
                    child of the &amp;lt;xd:doc/&amp;gt;element, then the first sentence from that text (up
                    until the first period (".") will be used as a short description.&lt;/xd:li&gt;
                &lt;xd:li&gt;Else; if there are multiple &amp;lt;xd:short/&amp;gt;-elements, each one of their
                    contents will be wrapped in separate &amp;lt;section/&amp;gt;s.&lt;/xd:li&gt;
                &lt;xd:li&gt;Else; use the one &amp;lt;xd:short/&amp;gt;-element that is present for the short
                    description.&lt;/xd:li&gt;
            &lt;/xd:ul&gt;
        
    &lt;/xd:detail&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="short"&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="count(child::*[local-name()='short'])&amp;gt;1"&gt;
                &lt;xd:short&gt;
                    &lt;xsl:for-each select="child::*[local-name()='short']"&gt;
                        &lt;xd:section&gt;
                            &lt;xsl:apply-templates mode="section"/&gt;
                        &lt;/xd:section&gt;
                    &lt;/xsl:for-each&gt;
                &lt;/xd:short&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="count(child::*[local-name()='short'])=1"&gt;
                &lt;xd:short&gt;
                    &lt;xsl:apply-templates select="child::*[local-name()='short']/node()" mode="section"/&gt;
                &lt;/xd:short&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="child::text()[string-length(normalize-space())&amp;gt;0]"&gt;
                &lt;xsl:variable name="short" select="replace(normalize-space(child::text()[1]),'^([^\.]+\.?)\s?.*$','$1')"/&gt;
                &lt;xd:short&gt;
                    &lt;xsl:value-of select="$short"/&gt;
                &lt;/xd:short&gt;
            &lt;/xsl:when&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Determines the detailed description.&lt;/xd:short&gt;&lt;xd:detail&gt;
        
        The detailed description will be put together based on any number of
            &amp;lt;xd:detail/&amp;gt;-elements, as well as any number of text nodes that are direct
            children of the &amp;lt;xd:doc/&amp;gt;-element. If the xd:short was extracted from the first
            text node, then the first sentence from that text node will be ignored. If there are
            multiple &amp;lt;xd:detail/&amp;gt; and text nodes, then each of them will be wrapped in
            &amp;lt;xd:section/&amp;gt;s.
    &lt;/xd:detail&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="detail"&gt;
        &lt;xsl:variable name="shortInFirstText" select="count(./*[local-name()='short'])=0"/&gt;
        &lt;xsl:variable name="detailCount" select="(if (matches(normalize-space(./text()[1]),'\.[^\.].')) then 1 else 0) + count(*[local-name()='detail' and (descendant-or-self::node()[self::text() and string-length(normalize-space())&amp;gt;0 or local-name()='pre' and not(ancestor::*[local-name()='pre'])])]) + count(./text()[not(position()=1) and string-length(normalize-space())&amp;gt;0])"/&gt;
        &lt;xsl:if test="$detailCount&amp;gt;0"&gt;
            &lt;xd:detail&gt;
                &lt;xsl:for-each select="*|text()"&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="self::text() and count(preceding-sibling::text()[string-length(normalize-space())&amp;gt;0])=0"&gt;
                            &lt;!-- first text --&gt;
                            &lt;xsl:choose&gt;
                                &lt;xsl:when test="$shortInFirstText"&gt;
                                    &lt;xsl:variable name="detail" select="replace(normalize-space(),'^[^\.]+.?\s?(.*)$','$1')"/&gt;
                                    &lt;xsl:choose&gt;
                                        &lt;xsl:when test="$detailCount&amp;gt;1"&gt;
                                            &lt;xd:section&gt;
                                                &lt;xsl:value-of select="$detail"/&gt;
                                            &lt;/xd:section&gt;
                                        &lt;/xsl:when&gt;
                                        &lt;xsl:otherwise&gt;
                                            &lt;xsl:value-of select="$detail"/&gt;
                                        &lt;/xsl:otherwise&gt;
                                    &lt;/xsl:choose&gt;
                                &lt;/xsl:when&gt;
                                &lt;xsl:otherwise&gt;
                                    &lt;xsl:choose&gt;
                                        &lt;xsl:when test="$detailCount&amp;gt;1"&gt;
                                            &lt;xd:section&gt;
                                                &lt;xsl:value-of select="."/&gt;
                                            &lt;/xd:section&gt;
                                        &lt;/xsl:when&gt;
                                        &lt;xsl:otherwise&gt;
                                            &lt;xsl:value-of select="."/&gt;
                                        &lt;/xsl:otherwise&gt;
                                    &lt;/xsl:choose&gt;
                                &lt;/xsl:otherwise&gt;
                            &lt;/xsl:choose&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="self::text()"&gt;
                            &lt;!-- non-first text --&gt;
                            &lt;xsl:choose&gt;
                                &lt;xsl:when test="$detailCount&amp;gt;1"&gt;
                                    &lt;xd:section&gt;
                                        &lt;xsl:value-of select="."/&gt;
                                    &lt;/xd:section&gt;
                                &lt;/xsl:when&gt;
                                &lt;xsl:otherwise&gt;
                                    &lt;xsl:value-of select="."/&gt;
                                &lt;/xsl:otherwise&gt;
                            &lt;/xsl:choose&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="local-name()='detail'"&gt;
                            &lt;!-- detail element --&gt;
                            &lt;xsl:choose&gt;
                                &lt;xsl:when test="$detailCount&amp;gt;1"&gt;
                                    &lt;xd:section&gt;
                                        &lt;xsl:apply-templates select="child::node()" mode="section"/&gt;
                                    &lt;/xd:section&gt;
                                &lt;/xsl:when&gt;
                                &lt;xsl:otherwise&gt;
                                    &lt;xsl:apply-templates select="child::node()" mode="section"/&gt;
                                &lt;/xsl:otherwise&gt;
                            &lt;/xsl:choose&gt;
                        &lt;/xsl:when&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xsl:for-each&gt;
            &lt;/xd:detail&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes the xd:author-elements.&lt;/xd:short&gt;&lt;xd:detail&gt;&amp;gt;xd:author/&amp;lt;s with no text are removed. &amp;lt;xd:author/&amp;gt;s with no child elements will have their text content wrapped in a &amp;lt;xd:name/&amp;gt; element. Children other than xd:name, xd:mailto and xd:organization are ignored.&lt;/xd:detail&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="authors" xml:id="authors"&gt;
        &lt;xsl:for-each select="*[local-name()='author']"&gt;
            &lt;xsl:variable name="is-empty" select="count(descendant-or-self::text()[string-length(normalize-space())&amp;gt;0])=0"/&gt;
            &lt;xsl:if test="not($is-empty)"&gt;
                &lt;xd:author&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="count(child::*)=0"&gt;
                            &lt;xd:name&gt;
                                &lt;xsl:value-of select="."/&gt;
                            &lt;/xd:name&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:if test="child::*[local-name()='name']"&gt;
                                &lt;xd:name&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='name']"/&gt;
                                &lt;/xd:name&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='mailto']"&gt;
                                &lt;xd:mailto&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='mailto']"/&gt;
                                &lt;/xd:mailto&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='organization']"&gt;
                                &lt;xd:organization&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='organization']"/&gt;
                                &lt;/xd:organization&gt;
                            &lt;/xsl:if&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xd:author&gt;
            &lt;/xsl:if&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;&amp;lt;xd:contributor/&amp;gt;s are normalized in the same way as &amp;lt;xd:author/&amp;gt;s&lt;/xd:short&gt;&lt;xd:see&gt;#authors&lt;/xd:see&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="contributors"&gt;
        &lt;xsl:for-each select="*[local-name()='contributor']"&gt;
            &lt;xsl:variable name="is-empty" select="count(descendant-or-self::text()[string-length(normalize-space())&amp;gt;0])=0"/&gt;
            &lt;xsl:if test="not($is-empty)"&gt;
                &lt;xd:contributor&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="count(child::*)=0"&gt;
                            &lt;xd:name&gt;
                                &lt;xsl:value-of select="."/&gt;
                            &lt;/xd:name&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:if test="child::*[local-name()='name']"&gt;
                                &lt;xd:name&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='name']"/&gt;
                                &lt;/xd:name&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='mailto']"&gt;
                                &lt;xd:mailto&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='mailto']"/&gt;
                                &lt;/xd:mailto&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='organization']"&gt;
                                &lt;xd:organization&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='organization']"/&gt;
                                &lt;/xd:organization&gt;
                            &lt;/xsl:if&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xd:contributor&gt;
            &lt;/xsl:if&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;&amp;lt;xd:maintainer/&amp;gt;s are normalized in the same way as &amp;lt;xd:author/&amp;gt;s&lt;/xd:short&gt;&lt;xd:see&gt;#authors&lt;/xd:see&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="maintainers"&gt;
        &lt;xsl:for-each select="*[local-name()='maintainer']"&gt;
            &lt;xsl:variable name="is-empty" select="count(descendant-or-self::text()[string-length(normalize-space())&amp;gt;0])=0"/&gt;
            &lt;xsl:if test="not($is-empty)"&gt;
                &lt;xd:maintainer&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="count(child::*)=0"&gt;
                            &lt;xd:name&gt;
                                &lt;xsl:value-of select="."/&gt;
                            &lt;/xd:name&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:if test="child::*[local-name()='name']"&gt;
                                &lt;xd:name&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='name']"/&gt;
                                &lt;/xd:name&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='mailto']"&gt;
                                &lt;xd:mailto&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='mailto']"/&gt;
                                &lt;/xd:mailto&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='organization']"&gt;
                                &lt;xd:organization&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='organization']"/&gt;
                                &lt;/xd:organization&gt;
                            &lt;/xsl:if&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xd:maintainer&gt;
            &lt;/xsl:if&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes the xd:copyright-element.&lt;/xd:short&gt;&lt;xd:detail&gt;&amp;gt;xd:copyright/&amp;lt;s with no text are removed. &amp;lt;xd:copyright/&amp;gt;s with no child elements will have their text content wrapped in a &amp;lt;xd:name/&amp;gt; element. Children other than xd:year, xd:name, xd:mailto and xd:organization are ignored.&lt;/xd:detail&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="copyright"&gt;
        &lt;xsl:for-each select="*[local-name()='copyright']"&gt;
            &lt;xsl:variable name="is-empty" select="count(descendant-or-self::text()[string-length(normalize-space())&amp;gt;0])=0"/&gt;
            &lt;xsl:if test="not($is-empty)"&gt;
                &lt;xd:copyright&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="count(child::*)=0"&gt;
                            &lt;xd:name&gt;
                                &lt;xsl:value-of select="."/&gt;
                            &lt;/xd:name&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:if test="child::*[local-name()='year']"&gt;
                                &lt;xd:year&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='year']"/&gt;
                                &lt;/xd:year&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='name']"&gt;
                                &lt;xd:name&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='name']"/&gt;
                                &lt;/xd:name&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='mailto']"&gt;
                                &lt;xd:mailto&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='mailto']"/&gt;
                                &lt;/xd:mailto&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='organization']"&gt;
                                &lt;xd:organization&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='organization']"/&gt;
                                &lt;/xd:organization&gt;
                            &lt;/xsl:if&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xd:copyright&gt;
            &lt;/xsl:if&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:version elements.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="version"&gt;
        &lt;xsl:if test="child::*[local-name()='version' and string-length(normalize-space(./text()))&amp;gt;0]"&gt;
            &lt;xd:version&gt;
                &lt;xsl:value-of select="child::*[local-name()='version' and string-length(normalize-space(./text()))&amp;gt;0]"/&gt;
            &lt;/xd:version&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:since elements.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="since"&gt;
        &lt;xsl:if test="child::*[local-name()='since' and string-length(normalize-space(./text()))&amp;gt;0]"&gt;
            &lt;xd:since&gt;
                &lt;xsl:value-of select="child::*[local-name()='since' and string-length(normalize-space(./text()))&amp;gt;0]"/&gt;
            &lt;/xd:since&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:see elements.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="see"&gt;
        &lt;xsl:if test="child::*[local-name()='see' and string-length(normalize-space(./text()))&amp;gt;0]"&gt;
            &lt;xd:see&gt;
                &lt;xsl:value-of select="child::*[local-name()='see' and string-length(normalize-space(./text()))&amp;gt;0]"/&gt;
            &lt;/xd:see&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:deprecated elements.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="deprecated"&gt;
        &lt;xsl:if test="child::*[local-name()='deprecated' and string-length(normalize-space(./text()))&amp;gt;0]"&gt;
            &lt;xd:deprecated&gt;
                &lt;xsl:value-of select="child::*[local-name()='deprecated' and string-length(normalize-space(./text()))&amp;gt;0]"/&gt;
            &lt;/xd:deprecated&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:import elements.&lt;/xd:short&gt;&lt;xd:detail&gt;Will create empty documentation for imports that are not documented, and removes documentation of imports that does not exist in the code.&lt;/xd:detail&gt;&lt;xd:param name="code"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="import"&gt;
        &lt;xsl:param name="code" required="yes"/&gt;
        &lt;xsl:variable name="doc" select="."/&gt;
        &lt;xsl:for-each select="$code/xsl:import"&gt;
            &lt;xsl:variable name="href" select="@href"/&gt;
            &lt;xd:import href="{@href}"&gt;
                &lt;xsl:if test="$doc/*[local-name()='import' and @href=$href]"&gt;
                    &lt;xsl:value-of select="$doc/*[local-name()='import' and @href=$href]"/&gt;
                &lt;/xsl:if&gt;
            &lt;/xd:import&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:include elements.&lt;/xd:short&gt;&lt;xd:detail&gt;Will create empty documentation for includes that are not documented, and removes documentation of includes that does not exist in the code.&lt;/xd:detail&gt;&lt;xd:param name="code"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="include"&gt;
        &lt;xsl:param name="code" required="yes"/&gt;
        &lt;xsl:variable name="doc" select="."/&gt;
        &lt;xsl:for-each select="$code/xsl:include"&gt;
            &lt;xsl:variable name="href" select="@href"/&gt;
            &lt;xd:include href="{@href}"&gt;
                &lt;xsl:if test="$doc/*[local-name()='include' and @href=$href]"&gt;
                    &lt;xsl:value-of select="$doc/*[local-name()='include' and @href=$href]"/&gt;
                &lt;/xsl:if&gt;
            &lt;/xd:include&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:import elements.&lt;/xd:short&gt;&lt;xd:detail&gt;Will create empty documentation for imports that are not documented, and removes documentation of imports that does not exist in the code.&lt;/xd:detail&gt;&lt;xd:param name="code"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="param"&gt;
        &lt;xsl:param name="code" required="yes"/&gt;
        &lt;xsl:variable name="doc" select="."/&gt;
        &lt;xsl:for-each select="*[local-name()='param']"&gt;
            &lt;xd:param&gt;
                &lt;xsl:apply-templates select="@*"/&gt;
                &lt;xsl:apply-templates mode="section" select="node()"/&gt;
            &lt;/xd:param&gt;
        &lt;/xsl:for-each&gt;
        &lt;xsl:for-each select="$code/xsl:param"&gt;
            &lt;xsl:variable name="name" select="@name"/&gt;
            &lt;xsl:if test="not($doc/*[local-name()='param' and @name=$name])"&gt;
                &lt;xd:param name="{@name}"/&gt;
            &lt;/xsl:if&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Describes the result of the code.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="return"&gt;
        &lt;xsl:variable name="is-empty" select="count(*[local-name()='return']/descendant-or-self::node()[self::text() and string-length(normalize-space())&amp;gt;0 or local-name()='pre'])=0"/&gt;
        &lt;xsl:if test="not($is-empty)"&gt;
            &lt;xd:return&gt;
                &lt;xsl:apply-templates mode="section" select="*[local-name()='return']/node()"/&gt;
            &lt;/xd:return&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Matches all elements when in "section"-mode.&lt;/xd:short&gt;&lt;xd:detail&gt;
        
        Checks all child elements and their descendants and wraps and handles as is
            appropriate. If a child or descendant is placed in a problematic position, then one of
            the unwrap*-templates are called to solve the problem. Otherwise, just make sure that
            the element is in the correct namespace and copy it.
    &lt;/xd:detail&gt;&lt;xd:param name="wrapin-p"/&gt;&lt;xd:param name="wrapin-ul"/&gt;&lt;xd:param name="wrapin-li"/&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template mode="section" match="@*|node()"&gt;
        &lt;xsl:param name="wrapin-p" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-ul" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-li" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:variable name="is-empty" select="count(descendant-or-self::node()[self::text() and string-length(normalize-space())&amp;gt;0 or local-name()='pre'])=0"/&gt;
        &lt;xsl:variable name="contains-section" select="count(descendant::*[local-name()='section'])&amp;gt;0"/&gt;
        &lt;xsl:variable name="contains-block" select="count(descendant::*[local-name()='ul' or local-name()='li' or local-name()='pre' or local-name()='p'])&amp;gt;0"/&gt;
        &lt;xsl:variable name="contains-block-non-li" select="count(descendant::*[local-name()='ul' or local-name()='pre' or local-name()='p'])&amp;gt;0"/&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="local-name()='section'"&gt;
                &lt;xd:section&gt;
                    &lt;xsl:apply-templates mode="section" select="@*|node()"/&gt;
                &lt;/xd:section&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='p'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$contains-section or $contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-p" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:p&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:p&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='pre'"&gt;
                &lt;xd:pre&gt;
                    &lt;xsl:copy-of select="@*|node()"/&gt;
                &lt;/xd:pre&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='ul'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-section"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$contains-block-non-li"&gt;
                        &lt;xd:section&gt;
                            &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                                &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                            &lt;/xsl:call-template&gt;
                        &lt;/xd:section&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="count(descendant::*[local-name()='li'])=0"&gt;
                        &lt;xsl:choose&gt;
                            &lt;xsl:when test="count(child::node()[self::* or self::text() and string-length(normalize-space())&amp;gt;0])&amp;gt;1"&gt;
                                &lt;xd:section&gt;
                                    &lt;xsl:apply-templates mode="section" select="@*|node()"&gt;
                                        &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                                        &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                                    &lt;/xsl:apply-templates&gt;
                                &lt;/xd:section&gt;
                            &lt;/xsl:when&gt;
                            &lt;xsl:otherwise&gt;
                                &lt;xsl:apply-templates mode="section" select="@*|node()"&gt;
                                    &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                                &lt;/xsl:apply-templates&gt;
                            &lt;/xsl:otherwise&gt;
                        &lt;/xsl:choose&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:ul&gt;
                            &lt;xsl:apply-templates mode="list" select="@*|node()"&gt;
                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:ul&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='li'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-section"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:ul&gt;
                            &lt;xd:li&gt;
                                &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                            &lt;/xd:li&gt;
                        &lt;/xd:ul&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='b'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-section"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-b" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-b" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:b&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:b&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='i'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-section"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-i" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-i" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:i&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:i&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='a'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-section"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-a" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-a-elem" select="." tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-a" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-a-elem" select="." tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:a&gt;
                            &lt;xsl:apply-templates select="@*"/&gt;
                            &lt;xsl:apply-templates mode="phrase" select="node()"/&gt;
                        &lt;/xd:a&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="self::*"&gt;
                        &lt;xsl:choose&gt;
                            &lt;xsl:when test="not(preceding-sibling::*) and not(following-sibling::*)"&gt;
                                &lt;xsl:apply-templates mode="section" select="@*|node()"/&gt;
                            &lt;/xsl:when&gt;
                            &lt;xsl:otherwise&gt;
                                &lt;xd:section&gt;
                                    &lt;xsl:apply-templates mode="section" select="@*|node()"/&gt;
                                &lt;/xd:section&gt;
                            &lt;/xsl:otherwise&gt;
                        &lt;/xsl:choose&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="self::text()"&gt;
                        &lt;xsl:copy/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="section" select="@*|node()"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Handles non-problematic lists.&lt;/xd:short&gt;&lt;xd:param name="wrapin-p"/&gt;&lt;xd:param name="wrapin-ul"/&gt;&lt;xd:param name="wrapin-li"/&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template mode="list" match="@*|node()"&gt;
        &lt;xsl:param name="wrapin-p" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-ul" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-li" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:variable name="is-empty" select="count(descendant-or-self::node()[self::text() and string-length(normalize-space())&amp;gt;0 or local-name()='pre'])=0"/&gt;
        &lt;xsl:variable name="contains-block" select="count(descendant::*[local-name()='ul' or local-name()='li' or local-name()='pre' or local-name()='p'])&amp;gt;0"/&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="local-name()='li'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$wrapin-ul"&gt;
                        &lt;xd:ul&gt;
                            &lt;xd:li&gt;
                                &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                            &lt;/xd:li&gt;
                        &lt;/xd:ul&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:li&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:li&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="self::text()"&gt;
                        &lt;xsl:copy/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="list" select="@*|node()"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Handles all elements when in "block" mode and applies fixes where needed.&lt;/xd:short&gt;&lt;xd:param name="wrapin-p"/&gt;&lt;xd:param name="wrapin-ul"/&gt;&lt;xd:param name="wrapin-li"/&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template mode="block" match="@*|node()"&gt;
        &lt;xsl:param name="wrapin-p" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-ul" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-li" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:variable name="element" select="."/&gt;
        &lt;xsl:variable name="is-empty" select="count(descendant-or-self::node()[self::* or self::text() and string-length(normalize-space())&amp;gt;0])=0"/&gt;
        &lt;xsl:variable name="contains-block" select="count(descendant::*[local-name()='ul' or local-name()='li' or local-name()='pre' or local-name()='p'])&amp;gt;0"/&gt;
        &lt;xsl:variable name="contains-block-non-li" select="count(descendant::*[local-name()='ul' or local-name()='pre' or local-name()='p'])&amp;gt;0"/&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="local-name()='p'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:p&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:p&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='pre'"&gt;
                &lt;xd:pre&gt;
                    &lt;xsl:copy-of select="@*|node()"/&gt;
                &lt;/xd:pre&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='ul'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block-non-li"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="count(descendant::*[local-name()='li' and string-length(normalize-space(descendant-or-self::text()))&amp;gt;0])=0"&gt;
                        &lt;xsl:apply-templates mode="block" select="@*|node()"/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:ul&gt;
                            &lt;xsl:apply-templates mode="list" select="@*|node()"&gt;
                                &lt;xsl:with-param name="wrapin-ul" select="false()"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:ul&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='li'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:ul&gt;
                            &lt;xd:li&gt;
                                &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                                    &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                &lt;/xsl:apply-templates&gt;
                            &lt;/xd:li&gt;
                        &lt;/xd:ul&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="not($contains-block) and $wrapin-p"&gt;
                &lt;xd:p&gt;
                    &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                        &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                        &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                        &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                    &lt;/xsl:apply-templates&gt;
                &lt;/xd:p&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="not($contains-block) and $wrapin-li"&gt;
                &lt;xd:ul&gt;
                    &lt;xd:li&gt;
                        &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                            &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xd:li&gt;
                &lt;/xd:ul&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='b'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-b" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:b&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:b&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='i'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-i" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:i&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:i&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='a'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-a" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-a-elem" select="$element" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:a&gt;
                            &lt;xsl:apply-templates mode="phrase" select="$element/@*"/&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:a&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="self::text()"&gt;
                        &lt;xsl:copy/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="block" select="@*|node()"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Phrases are matched with this template (mode="phrase") and handled appropriately.&lt;/xd:short&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template mode="phrase" match="@*|node()"&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="local-name()='b'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='b'])"&gt;
                        &lt;xd:b&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:b&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="$wrapin-b"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='b'])"&gt;
                        &lt;xd:b&gt;
                            &lt;xsl:apply-templates mode="phrase" select="."&gt;
                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:b&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="."&gt;
                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='i'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='i'])"&gt;
                        &lt;xd:i&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:i&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="$wrapin-i"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='i'])"&gt;
                        &lt;xd:i&gt;
                            &lt;xsl:apply-templates mode="phrase" select="."&gt;
                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:i&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="."&gt;
                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='a'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='a'])"&gt;
                        &lt;xd:a&gt;
                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                            &lt;xsl:apply-templates mode="phrase" select="node()"&gt;
                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:a&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="$wrapin-a"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='a'])"&gt;
                        &lt;xd:a&gt;
                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                            &lt;xsl:apply-templates mode="phrase" select="."&gt;
                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:a&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="."&gt;
                            &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="self::text()"&gt;
                        &lt;xsl:copy/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;This template unwraps problematic elements into sections.&lt;/xd:short&gt;&lt;xd:param name="wasWrapped"/&gt;&lt;xd:param name="wrapin-p"/&gt;&lt;xd:param name="wrapin-ul"/&gt;&lt;xd:param name="wrapin-li"/&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="unwrap-to-sections"&gt;
        &lt;xsl:param name="wasWrapped" select="false()"/&gt;
        &lt;xsl:param name="wrapin-p" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-ul" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-li" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:variable name="element" select="."/&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="not($wasWrapped) and count(child::node()[self::* or self::text() and string-length(normalize-space())&amp;gt;0])&amp;gt;1"&gt;
                &lt;xd:section&gt;
                    &lt;xsl:call-template name="unwrap-to-sections"&gt;
                        &lt;xsl:with-param name="wasWrapped" select="true()"/&gt;
                    &lt;/xsl:call-template&gt;
                &lt;/xd:section&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
                &lt;xsl:for-each-group select="child::node()[self::* or self::text() and string-length(normalize-space())&amp;gt;0]" group-adjacent="self::* and not(ancestor::*[local-name()='pre']) and (local-name()='section' or local-name()='ul' or local-name()='li' or local-name()='pre' or local-name()='p')"&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="current-grouping-key()"&gt;
                            &lt;xsl:choose&gt;
                                &lt;xsl:when test="count(current-group())&amp;gt;1 and last()&amp;gt;1"&gt;
                                    &lt;xd:section&gt;
                                        &lt;xsl:apply-templates mode="section" select="current-group()"&gt;
                                            &lt;xsl:with-param name="wrapin-p" tunnel="yes" select="if ($wrapin-p or local-name($element)='p') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-ul" tunnel="yes" select="if ($wrapin-ul or local-name($element)='ul') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-li" tunnel="yes" select="if ($wrapin-li or local-name($element)='li') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-b" tunnel="yes" select="if ($wrapin-b or local-name($element)='b') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-i" tunnel="yes" select="if ($wrapin-i or local-name($element)='i') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-a" tunnel="yes" select="if ($wrapin-a or local-name($element)='a') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-a-elem" tunnel="yes" select="if (not($wrapin-a) and local-name($element)='a') then $element else false()"/&gt;
                                        &lt;/xsl:apply-templates&gt;
                                    &lt;/xd:section&gt;
                                &lt;/xsl:when&gt;
                                &lt;xsl:otherwise&gt;
                                    &lt;xsl:apply-templates mode="section" select="current-group()"&gt;
                                        &lt;xsl:with-param name="wrapin-p" tunnel="yes" select="if ($wrapin-p or local-name($element)='p') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-ul" tunnel="yes" select="if ($wrapin-ul or local-name($element)='ul') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-li" tunnel="yes" select="if ($wrapin-li or local-name($element)='li') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-b" tunnel="yes" select="if ($wrapin-b or local-name($element)='b') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-i" tunnel="yes" select="if ($wrapin-i or local-name($element)='i') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-a" tunnel="yes" select="if ($wrapin-a or local-name($element)='a') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-a-elem" tunnel="yes" select="if (not($wrapin-a) and local-name($element)='a') then $element else false()"/&gt;
                                    &lt;/xsl:apply-templates&gt;
                                &lt;/xsl:otherwise&gt;
                            &lt;/xsl:choose&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:element name="xd:{local-name($element)}"&gt;
                                &lt;xsl:for-each select="$element/@*"&gt;
                                    &lt;xsl:attribute name="xd:{local-name()}" select="."/&gt;
                                &lt;/xsl:for-each&gt;
                                &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                    &lt;xsl:with-param name="wrapin-p" tunnel="yes" select="if ($wrapin-p or local-name($element)='p') then false() else $wrapin-p"/&gt;
                                    &lt;xsl:with-param name="wrapin-ul" tunnel="yes" select="if ($wrapin-ul or local-name($element)='ul') then false() else $wrapin-ul"/&gt;
                                    &lt;xsl:with-param name="wrapin-li" tunnel="yes" select="if ($wrapin-li or local-name($element)='li') then false() else $wrapin-li"/&gt;
                                    &lt;xsl:with-param name="wrapin-b" tunnel="yes" select="if ($wrapin-b or local-name($element)='b') then false() else $wrapin-b"/&gt;
                                    &lt;xsl:with-param name="wrapin-i" tunnel="yes" select="if ($wrapin-i or local-name($element)='i') then false() else $wrapin-i"/&gt;
                                    &lt;xsl:with-param name="wrapin-a" tunnel="yes" select="if ($wrapin-a or local-name($element)='a') then false() else $wrapin-a"/&gt;
                                &lt;/xsl:apply-templates&gt;
                            &lt;/xsl:element&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xsl:for-each-group&gt;
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;This template unwraps problematic elements into blocks.&lt;/xd:short&gt;&lt;xd:param name="wrapin-p"/&gt;&lt;xd:param name="wrapin-ul"/&gt;&lt;xd:param name="wrapin-li"/&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="unwrap-to-blocks"&gt;
        &lt;xsl:param name="wrapin-p" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-ul" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-li" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:variable name="element" select="."/&gt;
        &lt;xsl:for-each-group select="child::node()[self::* or self::text() and string-length(normalize-space())&amp;gt;0]" group-adjacent="count(descendant-or-self::*[local-name()='ul' or local-name()='li' or local-name()='pre' or local-name()='p'])&amp;gt;0"&gt;
            &lt;xsl:choose&gt;
                &lt;xsl:when test="current-grouping-key()"&gt;
                    &lt;xsl:for-each select="current-group()"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-p" select="$wrapin-p or local-name()='p' or local-name($element)='p'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="$wrapin-ul or local-name()='ul' or local-name($element)='ul'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="$wrapin-li or local-name()='li' or local-name($element)='li'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-b" select="$wrapin-b or local-name()='b' or local-name($element)='b'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-i" select="$wrapin-i or local-name()='i' or local-name($element)='i'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-a" select="$wrapin-a or local-name()='a' or local-name($element)='a'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-a-elem" select="if (local-name()='a') then . else (if (local-name($element)='a') then $element else $wrapin-a-elem)" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:for-each&gt;
                &lt;/xsl:when&gt;
                &lt;xsl:otherwise&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="$wrapin-p"&gt;
                            &lt;xd:p&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="$wrapin-b"&gt;
                                        &lt;xd:b&gt;
                                            &lt;xsl:choose&gt;
                                                &lt;xsl:when test="$wrapin-i"&gt;
                                                  &lt;xd:i&gt;
                                                  &lt;xsl:choose&gt;
                                                  &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                  &lt;/xsl:when&gt;
                                                  &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xsl:otherwise&gt;
                                                  &lt;/xsl:choose&gt;
                                                  &lt;/xd:i&gt;
                                                &lt;/xsl:when&gt;
                                                &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                &lt;/xsl:otherwise&gt;
                                            &lt;/xsl:choose&gt;
                                        &lt;/xd:b&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:when test="$wrapin-i"&gt;
                                        &lt;xd:i&gt;
                                            &lt;xsl:choose&gt;
                                                &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                &lt;/xsl:when&gt;
                                                &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                &lt;/xsl:otherwise&gt;
                                            &lt;/xsl:choose&gt;
                                        &lt;/xd:i&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:when test="$wrapin-a"&gt;
                                        &lt;xd:a&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                            &lt;/xsl:apply-templates&gt;
                                        &lt;/xd:a&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                            &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                        &lt;/xsl:apply-templates&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xd:p&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="$wrapin-li"&gt;
                            &lt;xd:ul&gt;
                                &lt;xd:li&gt;
                                    &lt;xsl:choose&gt;
                                        &lt;xsl:when test="$wrapin-b"&gt;
                                            &lt;xd:b&gt;
                                                &lt;xsl:choose&gt;
                                                  &lt;xsl:when test="$wrapin-i"&gt;
                                                  &lt;xd:i&gt;
                                                  &lt;xsl:choose&gt;
                                                  &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                  &lt;/xsl:when&gt;
                                                  &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xsl:otherwise&gt;
                                                  &lt;/xsl:choose&gt;
                                                  &lt;/xd:i&gt;
                                                  &lt;/xsl:when&gt;
                                                  &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xsl:otherwise&gt;
                                                &lt;/xsl:choose&gt;
                                            &lt;/xd:b&gt;
                                        &lt;/xsl:when&gt;
                                        &lt;xsl:when test="$wrapin-i"&gt;
                                            &lt;xd:i&gt;
                                                &lt;xsl:choose&gt;
                                                  &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                  &lt;/xsl:when&gt;
                                                  &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xsl:otherwise&gt;
                                                &lt;/xsl:choose&gt;
                                            &lt;/xd:i&gt;
                                        &lt;/xsl:when&gt;
                                        &lt;xsl:when test="$wrapin-a"&gt;
                                            &lt;xd:a&gt;
                                                &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                &lt;/xsl:apply-templates&gt;
                                            &lt;/xd:a&gt;
                                        &lt;/xsl:when&gt;
                                        &lt;xsl:otherwise&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                            &lt;/xsl:apply-templates&gt;
                                        &lt;/xsl:otherwise&gt;
                                    &lt;/xsl:choose&gt;
                                &lt;/xd:li&gt;
                            &lt;/xd:ul&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="$wrapin-ul"&gt;
                            &lt;xd:p&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="$wrapin-b"&gt;
                                        &lt;xd:b&gt;
                                            &lt;xsl:choose&gt;
                                                &lt;xsl:when test="$wrapin-i"&gt;
                                                  &lt;xd:i&gt;
                                                  &lt;xsl:choose&gt;
                                                  &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                  &lt;/xsl:when&gt;
                                                  &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xsl:otherwise&gt;
                                                  &lt;/xsl:choose&gt;
                                                  &lt;/xd:i&gt;
                                                &lt;/xsl:when&gt;
                                                &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                &lt;/xsl:otherwise&gt;
                                            &lt;/xsl:choose&gt;
                                        &lt;/xd:b&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:when test="$wrapin-i"&gt;
                                        &lt;xd:i&gt;
                                            &lt;xsl:choose&gt;
                                                &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                &lt;/xsl:when&gt;
                                                &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                &lt;/xsl:otherwise&gt;
                                            &lt;/xsl:choose&gt;
                                        &lt;/xd:i&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:when test="$wrapin-a"&gt;
                                        &lt;xd:a&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                            &lt;/xsl:apply-templates&gt;
                                        &lt;/xd:a&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                            &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                        &lt;/xsl:apply-templates&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xd:p&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="$wrapin-b"&gt;
                            &lt;xd:b&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="$wrapin-i"&gt;
                                        &lt;xd:i&gt;
                                            &lt;xsl:choose&gt;
                                                &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                &lt;/xsl:when&gt;
                                                &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                &lt;/xsl:otherwise&gt;
                                            &lt;/xsl:choose&gt;
                                        &lt;/xd:i&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:when test="$wrapin-a"&gt;
                                        &lt;xd:a&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                            &lt;/xsl:apply-templates&gt;
                                        &lt;/xd:a&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                            &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                        &lt;/xsl:apply-templates&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xd:b&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="$wrapin-i"&gt;
                            &lt;xd:i&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="$wrapin-a"&gt;
                                        &lt;xd:a&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                            &lt;/xsl:apply-templates&gt;
                                        &lt;/xd:a&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                            &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                        &lt;/xsl:apply-templates&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xd:i&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="$wrapin-a"&gt;
                            &lt;xd:a&gt;
                                &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                    &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                &lt;/xsl:apply-templates&gt;
                            &lt;/xd:a&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xsl:otherwise&gt;
            &lt;/xsl:choose&gt;
        &lt;/xsl:for-each-group&gt;
    &lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;&lt;/codeblock&gt;
    &lt;xsl:template mode="list" match="@*|node()"&gt;
        &lt;xsl:param name="wrapin-p" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-ul" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-li" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:variable name="is-empty" select="count(descendant-or-self::node()[self::text() and string-length(normalize-space())&amp;gt;0 or local-name()='pre'])=0"/&gt;
        &lt;xsl:variable name="contains-block" select="count(descendant::*[local-name()='ul' or local-name()='li' or local-name()='pre' or local-name()='p'])&amp;gt;0"/&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="local-name()='li'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$wrapin-ul"&gt;
                        &lt;xd:ul&gt;
                            &lt;xd:li&gt;
                                &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                            &lt;/xd:li&gt;
                        &lt;/xd:ul&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:li&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:li&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="self::text()"&gt;
                        &lt;xsl:copy/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="list" select="@*|node()"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;codeblock&gt;&lt;xsl:stylesheet version="2.0"&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Identity template.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template match="@*|node()"&gt;
        &lt;xsl:copy&gt;
            &lt;xsl:apply-templates select="@*|node()"/&gt;
        &lt;/xsl:copy&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Matches each xd:doc element.&lt;/xd:short&gt;&lt;xd:detail&gt;
        
        Determines what code is being documented and calls appropriate templates for: &lt;xd:ul&gt;
                &lt;xd:li&gt;short description (xd:short)&lt;/xd:li&gt;
                &lt;xd:li&gt;detailed description (xd:detail)&lt;/xd:li&gt;
                &lt;xd:li&gt;authors (xd:author)&lt;/xd:li&gt;
                &lt;xd:li&gt;contributors (xd:contributor)&lt;/xd:li&gt;
                &lt;xd:li&gt;maintainers (xd:maintainer)&lt;/xd:li&gt;
                &lt;xd:li&gt;copyright (xd:copyright)&lt;/xd:li&gt;
                &lt;xd:li&gt;version (xd:version)&lt;/xd:li&gt;
                &lt;xd:li&gt;code existed since version (xd:since)&lt;/xd:li&gt;
                &lt;xd:li&gt;see also (xd:see)&lt;/xd:li&gt;
                &lt;xd:li&gt;deprecated since version (xd:deprecated)&lt;/xd:li&gt;
                &lt;xd:li&gt;import statements (xd:import and xsl:import)&lt;/xd:li&gt;
                &lt;xd:li&gt;include statements (xd:include and xsl:include)&lt;/xd:li&gt;
                &lt;xd:li&gt;parameters (xd:param and xsl:param)&lt;/xd:li&gt;
                &lt;xd:li&gt;return values / output (xd:return)&lt;/xd:li&gt;
            &lt;/xd:ul&gt;
        
        
    &lt;/xd:detail&gt;&lt;xd:return&gt;The normalized xd:doc.&lt;/xd:return&gt;&lt;/xd:doc&gt;
    &lt;xsl:template match="xd:doc"&gt;
        &lt;xsl:copy&gt;
            &lt;xsl:variable name="target"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="@target"&gt;
                        &lt;xsl:value-of select="@target"/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="count(preceding-sibling::*)=0"&gt;
                        &lt;xsl:value-of select="'parent'"/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:value-of select="'following'"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:variable&gt;
            &lt;xsl:variable name="code" select="if ($target='parent') then parent::* else following-sibling::*[1]"/&gt;

            &lt;xsl:attribute name="target" select="$target"/&gt;

            &lt;xsl:call-template name="short"/&gt;
            &lt;xsl:call-template name="detail"/&gt;
            &lt;xsl:call-template name="authors"/&gt;
            &lt;xsl:call-template name="contributors"/&gt;
            &lt;xsl:call-template name="maintainers"/&gt;
            &lt;xsl:call-template name="copyright"/&gt;
            &lt;xsl:call-template name="version"/&gt;
            &lt;xsl:call-template name="since"/&gt;
            &lt;xsl:call-template name="see"/&gt;
            &lt;xsl:call-template name="deprecated"/&gt;
            &lt;xsl:call-template name="import"&gt;
                &lt;xsl:with-param name="code" select="$code"/&gt;
            &lt;/xsl:call-template&gt;
            &lt;xsl:call-template name="include"&gt;
                &lt;xsl:with-param name="code" select="$code"/&gt;
            &lt;/xsl:call-template&gt;
            &lt;xsl:call-template name="param"&gt;
                &lt;xsl:with-param name="code" select="$code"/&gt;
            &lt;/xsl:call-template&gt;
            &lt;xsl:call-template name="return"/&gt;
        &lt;/xsl:copy&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Determines the short description.&lt;/xd:short&gt;&lt;xd:detail&gt;
        
        
            &lt;xd:ul&gt;
                &lt;xd:li&gt;If there is no &amp;lt;xd:short/&amp;gt;-element present, but plain text is present as a
                    child of the &amp;lt;xd:doc/&amp;gt;element, then the first sentence from that text (up
                    until the first period (".") will be used as a short description.&lt;/xd:li&gt;
                &lt;xd:li&gt;Else; if there are multiple &amp;lt;xd:short/&amp;gt;-elements, each one of their
                    contents will be wrapped in separate &amp;lt;section/&amp;gt;s.&lt;/xd:li&gt;
                &lt;xd:li&gt;Else; use the one &amp;lt;xd:short/&amp;gt;-element that is present for the short
                    description.&lt;/xd:li&gt;
            &lt;/xd:ul&gt;
        
    &lt;/xd:detail&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="short"&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="count(child::*[local-name()='short'])&amp;gt;1"&gt;
                &lt;xd:short&gt;
                    &lt;xsl:for-each select="child::*[local-name()='short']"&gt;
                        &lt;xd:section&gt;
                            &lt;xsl:apply-templates mode="section"/&gt;
                        &lt;/xd:section&gt;
                    &lt;/xsl:for-each&gt;
                &lt;/xd:short&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="count(child::*[local-name()='short'])=1"&gt;
                &lt;xd:short&gt;
                    &lt;xsl:apply-templates select="child::*[local-name()='short']/node()" mode="section"/&gt;
                &lt;/xd:short&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="child::text()[string-length(normalize-space())&amp;gt;0]"&gt;
                &lt;xsl:variable name="short" select="replace(normalize-space(child::text()[1]),'^([^\.]+\.?)\s?.*$','$1')"/&gt;
                &lt;xd:short&gt;
                    &lt;xsl:value-of select="$short"/&gt;
                &lt;/xd:short&gt;
            &lt;/xsl:when&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Determines the detailed description.&lt;/xd:short&gt;&lt;xd:detail&gt;
        
        The detailed description will be put together based on any number of
            &amp;lt;xd:detail/&amp;gt;-elements, as well as any number of text nodes that are direct
            children of the &amp;lt;xd:doc/&amp;gt;-element. If the xd:short was extracted from the first
            text node, then the first sentence from that text node will be ignored. If there are
            multiple &amp;lt;xd:detail/&amp;gt; and text nodes, then each of them will be wrapped in
            &amp;lt;xd:section/&amp;gt;s.
    &lt;/xd:detail&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="detail"&gt;
        &lt;xsl:variable name="shortInFirstText" select="count(./*[local-name()='short'])=0"/&gt;
        &lt;xsl:variable name="detailCount" select="(if (matches(normalize-space(./text()[1]),'\.[^\.].')) then 1 else 0) + count(*[local-name()='detail' and (descendant-or-self::node()[self::text() and string-length(normalize-space())&amp;gt;0 or local-name()='pre' and not(ancestor::*[local-name()='pre'])])]) + count(./text()[not(position()=1) and string-length(normalize-space())&amp;gt;0])"/&gt;
        &lt;xsl:if test="$detailCount&amp;gt;0"&gt;
            &lt;xd:detail&gt;
                &lt;xsl:for-each select="*|text()"&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="self::text() and count(preceding-sibling::text()[string-length(normalize-space())&amp;gt;0])=0"&gt;
                            &lt;!-- first text --&gt;
                            &lt;xsl:choose&gt;
                                &lt;xsl:when test="$shortInFirstText"&gt;
                                    &lt;xsl:variable name="detail" select="replace(normalize-space(),'^[^\.]+.?\s?(.*)$','$1')"/&gt;
                                    &lt;xsl:choose&gt;
                                        &lt;xsl:when test="$detailCount&amp;gt;1"&gt;
                                            &lt;xd:section&gt;
                                                &lt;xsl:value-of select="$detail"/&gt;
                                            &lt;/xd:section&gt;
                                        &lt;/xsl:when&gt;
                                        &lt;xsl:otherwise&gt;
                                            &lt;xsl:value-of select="$detail"/&gt;
                                        &lt;/xsl:otherwise&gt;
                                    &lt;/xsl:choose&gt;
                                &lt;/xsl:when&gt;
                                &lt;xsl:otherwise&gt;
                                    &lt;xsl:choose&gt;
                                        &lt;xsl:when test="$detailCount&amp;gt;1"&gt;
                                            &lt;xd:section&gt;
                                                &lt;xsl:value-of select="."/&gt;
                                            &lt;/xd:section&gt;
                                        &lt;/xsl:when&gt;
                                        &lt;xsl:otherwise&gt;
                                            &lt;xsl:value-of select="."/&gt;
                                        &lt;/xsl:otherwise&gt;
                                    &lt;/xsl:choose&gt;
                                &lt;/xsl:otherwise&gt;
                            &lt;/xsl:choose&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="self::text()"&gt;
                            &lt;!-- non-first text --&gt;
                            &lt;xsl:choose&gt;
                                &lt;xsl:when test="$detailCount&amp;gt;1"&gt;
                                    &lt;xd:section&gt;
                                        &lt;xsl:value-of select="."/&gt;
                                    &lt;/xd:section&gt;
                                &lt;/xsl:when&gt;
                                &lt;xsl:otherwise&gt;
                                    &lt;xsl:value-of select="."/&gt;
                                &lt;/xsl:otherwise&gt;
                            &lt;/xsl:choose&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="local-name()='detail'"&gt;
                            &lt;!-- detail element --&gt;
                            &lt;xsl:choose&gt;
                                &lt;xsl:when test="$detailCount&amp;gt;1"&gt;
                                    &lt;xd:section&gt;
                                        &lt;xsl:apply-templates select="child::node()" mode="section"/&gt;
                                    &lt;/xd:section&gt;
                                &lt;/xsl:when&gt;
                                &lt;xsl:otherwise&gt;
                                    &lt;xsl:apply-templates select="child::node()" mode="section"/&gt;
                                &lt;/xsl:otherwise&gt;
                            &lt;/xsl:choose&gt;
                        &lt;/xsl:when&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xsl:for-each&gt;
            &lt;/xd:detail&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes the xd:author-elements.&lt;/xd:short&gt;&lt;xd:detail&gt;&amp;gt;xd:author/&amp;lt;s with no text are removed. &amp;lt;xd:author/&amp;gt;s with no child elements will have their text content wrapped in a &amp;lt;xd:name/&amp;gt; element. Children other than xd:name, xd:mailto and xd:organization are ignored.&lt;/xd:detail&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="authors" xml:id="authors"&gt;
        &lt;xsl:for-each select="*[local-name()='author']"&gt;
            &lt;xsl:variable name="is-empty" select="count(descendant-or-self::text()[string-length(normalize-space())&amp;gt;0])=0"/&gt;
            &lt;xsl:if test="not($is-empty)"&gt;
                &lt;xd:author&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="count(child::*)=0"&gt;
                            &lt;xd:name&gt;
                                &lt;xsl:value-of select="."/&gt;
                            &lt;/xd:name&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:if test="child::*[local-name()='name']"&gt;
                                &lt;xd:name&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='name']"/&gt;
                                &lt;/xd:name&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='mailto']"&gt;
                                &lt;xd:mailto&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='mailto']"/&gt;
                                &lt;/xd:mailto&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='organization']"&gt;
                                &lt;xd:organization&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='organization']"/&gt;
                                &lt;/xd:organization&gt;
                            &lt;/xsl:if&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xd:author&gt;
            &lt;/xsl:if&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;&amp;lt;xd:contributor/&amp;gt;s are normalized in the same way as &amp;lt;xd:author/&amp;gt;s&lt;/xd:short&gt;&lt;xd:see&gt;#authors&lt;/xd:see&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="contributors"&gt;
        &lt;xsl:for-each select="*[local-name()='contributor']"&gt;
            &lt;xsl:variable name="is-empty" select="count(descendant-or-self::text()[string-length(normalize-space())&amp;gt;0])=0"/&gt;
            &lt;xsl:if test="not($is-empty)"&gt;
                &lt;xd:contributor&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="count(child::*)=0"&gt;
                            &lt;xd:name&gt;
                                &lt;xsl:value-of select="."/&gt;
                            &lt;/xd:name&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:if test="child::*[local-name()='name']"&gt;
                                &lt;xd:name&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='name']"/&gt;
                                &lt;/xd:name&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='mailto']"&gt;
                                &lt;xd:mailto&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='mailto']"/&gt;
                                &lt;/xd:mailto&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='organization']"&gt;
                                &lt;xd:organization&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='organization']"/&gt;
                                &lt;/xd:organization&gt;
                            &lt;/xsl:if&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xd:contributor&gt;
            &lt;/xsl:if&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;&amp;lt;xd:maintainer/&amp;gt;s are normalized in the same way as &amp;lt;xd:author/&amp;gt;s&lt;/xd:short&gt;&lt;xd:see&gt;#authors&lt;/xd:see&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="maintainers"&gt;
        &lt;xsl:for-each select="*[local-name()='maintainer']"&gt;
            &lt;xsl:variable name="is-empty" select="count(descendant-or-self::text()[string-length(normalize-space())&amp;gt;0])=0"/&gt;
            &lt;xsl:if test="not($is-empty)"&gt;
                &lt;xd:maintainer&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="count(child::*)=0"&gt;
                            &lt;xd:name&gt;
                                &lt;xsl:value-of select="."/&gt;
                            &lt;/xd:name&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:if test="child::*[local-name()='name']"&gt;
                                &lt;xd:name&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='name']"/&gt;
                                &lt;/xd:name&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='mailto']"&gt;
                                &lt;xd:mailto&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='mailto']"/&gt;
                                &lt;/xd:mailto&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='organization']"&gt;
                                &lt;xd:organization&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='organization']"/&gt;
                                &lt;/xd:organization&gt;
                            &lt;/xsl:if&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xd:maintainer&gt;
            &lt;/xsl:if&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes the xd:copyright-element.&lt;/xd:short&gt;&lt;xd:detail&gt;&amp;gt;xd:copyright/&amp;lt;s with no text are removed. &amp;lt;xd:copyright/&amp;gt;s with no child elements will have their text content wrapped in a &amp;lt;xd:name/&amp;gt; element. Children other than xd:year, xd:name, xd:mailto and xd:organization are ignored.&lt;/xd:detail&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="copyright"&gt;
        &lt;xsl:for-each select="*[local-name()='copyright']"&gt;
            &lt;xsl:variable name="is-empty" select="count(descendant-or-self::text()[string-length(normalize-space())&amp;gt;0])=0"/&gt;
            &lt;xsl:if test="not($is-empty)"&gt;
                &lt;xd:copyright&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="count(child::*)=0"&gt;
                            &lt;xd:name&gt;
                                &lt;xsl:value-of select="."/&gt;
                            &lt;/xd:name&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:if test="child::*[local-name()='year']"&gt;
                                &lt;xd:year&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='year']"/&gt;
                                &lt;/xd:year&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='name']"&gt;
                                &lt;xd:name&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='name']"/&gt;
                                &lt;/xd:name&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='mailto']"&gt;
                                &lt;xd:mailto&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='mailto']"/&gt;
                                &lt;/xd:mailto&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='organization']"&gt;
                                &lt;xd:organization&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='organization']"/&gt;
                                &lt;/xd:organization&gt;
                            &lt;/xsl:if&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xd:copyright&gt;
            &lt;/xsl:if&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:version elements.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="version"&gt;
        &lt;xsl:if test="child::*[local-name()='version' and string-length(normalize-space(./text()))&amp;gt;0]"&gt;
            &lt;xd:version&gt;
                &lt;xsl:value-of select="child::*[local-name()='version' and string-length(normalize-space(./text()))&amp;gt;0]"/&gt;
            &lt;/xd:version&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:since elements.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="since"&gt;
        &lt;xsl:if test="child::*[local-name()='since' and string-length(normalize-space(./text()))&amp;gt;0]"&gt;
            &lt;xd:since&gt;
                &lt;xsl:value-of select="child::*[local-name()='since' and string-length(normalize-space(./text()))&amp;gt;0]"/&gt;
            &lt;/xd:since&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:see elements.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="see"&gt;
        &lt;xsl:if test="child::*[local-name()='see' and string-length(normalize-space(./text()))&amp;gt;0]"&gt;
            &lt;xd:see&gt;
                &lt;xsl:value-of select="child::*[local-name()='see' and string-length(normalize-space(./text()))&amp;gt;0]"/&gt;
            &lt;/xd:see&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:deprecated elements.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="deprecated"&gt;
        &lt;xsl:if test="child::*[local-name()='deprecated' and string-length(normalize-space(./text()))&amp;gt;0]"&gt;
            &lt;xd:deprecated&gt;
                &lt;xsl:value-of select="child::*[local-name()='deprecated' and string-length(normalize-space(./text()))&amp;gt;0]"/&gt;
            &lt;/xd:deprecated&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:import elements.&lt;/xd:short&gt;&lt;xd:detail&gt;Will create empty documentation for imports that are not documented, and removes documentation of imports that does not exist in the code.&lt;/xd:detail&gt;&lt;xd:param name="code"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="import"&gt;
        &lt;xsl:param name="code" required="yes"/&gt;
        &lt;xsl:variable name="doc" select="."/&gt;
        &lt;xsl:for-each select="$code/xsl:import"&gt;
            &lt;xsl:variable name="href" select="@href"/&gt;
            &lt;xd:import href="{@href}"&gt;
                &lt;xsl:if test="$doc/*[local-name()='import' and @href=$href]"&gt;
                    &lt;xsl:value-of select="$doc/*[local-name()='import' and @href=$href]"/&gt;
                &lt;/xsl:if&gt;
            &lt;/xd:import&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:include elements.&lt;/xd:short&gt;&lt;xd:detail&gt;Will create empty documentation for includes that are not documented, and removes documentation of includes that does not exist in the code.&lt;/xd:detail&gt;&lt;xd:param name="code"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="include"&gt;
        &lt;xsl:param name="code" required="yes"/&gt;
        &lt;xsl:variable name="doc" select="."/&gt;
        &lt;xsl:for-each select="$code/xsl:include"&gt;
            &lt;xsl:variable name="href" select="@href"/&gt;
            &lt;xd:include href="{@href}"&gt;
                &lt;xsl:if test="$doc/*[local-name()='include' and @href=$href]"&gt;
                    &lt;xsl:value-of select="$doc/*[local-name()='include' and @href=$href]"/&gt;
                &lt;/xsl:if&gt;
            &lt;/xd:include&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:import elements.&lt;/xd:short&gt;&lt;xd:detail&gt;Will create empty documentation for imports that are not documented, and removes documentation of imports that does not exist in the code.&lt;/xd:detail&gt;&lt;xd:param name="code"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="param"&gt;
        &lt;xsl:param name="code" required="yes"/&gt;
        &lt;xsl:variable name="doc" select="."/&gt;
        &lt;xsl:for-each select="*[local-name()='param']"&gt;
            &lt;xd:param&gt;
                &lt;xsl:apply-templates select="@*"/&gt;
                &lt;xsl:apply-templates mode="section" select="node()"/&gt;
            &lt;/xd:param&gt;
        &lt;/xsl:for-each&gt;
        &lt;xsl:for-each select="$code/xsl:param"&gt;
            &lt;xsl:variable name="name" select="@name"/&gt;
            &lt;xsl:if test="not($doc/*[local-name()='param' and @name=$name])"&gt;
                &lt;xd:param name="{@name}"/&gt;
            &lt;/xsl:if&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Describes the result of the code.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="return"&gt;
        &lt;xsl:variable name="is-empty" select="count(*[local-name()='return']/descendant-or-self::node()[self::text() and string-length(normalize-space())&amp;gt;0 or local-name()='pre'])=0"/&gt;
        &lt;xsl:if test="not($is-empty)"&gt;
            &lt;xd:return&gt;
                &lt;xsl:apply-templates mode="section" select="*[local-name()='return']/node()"/&gt;
            &lt;/xd:return&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Matches all elements when in "section"-mode.&lt;/xd:short&gt;&lt;xd:detail&gt;
        
        Checks all child elements and their descendants and wraps and handles as is
            appropriate. If a child or descendant is placed in a problematic position, then one of
            the unwrap*-templates are called to solve the problem. Otherwise, just make sure that
            the element is in the correct namespace and copy it.
    &lt;/xd:detail&gt;&lt;xd:param name="wrapin-p"/&gt;&lt;xd:param name="wrapin-ul"/&gt;&lt;xd:param name="wrapin-li"/&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template mode="section" match="@*|node()"&gt;
        &lt;xsl:param name="wrapin-p" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-ul" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-li" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:variable name="is-empty" select="count(descendant-or-self::node()[self::text() and string-length(normalize-space())&amp;gt;0 or local-name()='pre'])=0"/&gt;
        &lt;xsl:variable name="contains-section" select="count(descendant::*[local-name()='section'])&amp;gt;0"/&gt;
        &lt;xsl:variable name="contains-block" select="count(descendant::*[local-name()='ul' or local-name()='li' or local-name()='pre' or local-name()='p'])&amp;gt;0"/&gt;
        &lt;xsl:variable name="contains-block-non-li" select="count(descendant::*[local-name()='ul' or local-name()='pre' or local-name()='p'])&amp;gt;0"/&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="local-name()='section'"&gt;
                &lt;xd:section&gt;
                    &lt;xsl:apply-templates mode="section" select="@*|node()"/&gt;
                &lt;/xd:section&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='p'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$contains-section or $contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-p" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:p&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:p&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='pre'"&gt;
                &lt;xd:pre&gt;
                    &lt;xsl:copy-of select="@*|node()"/&gt;
                &lt;/xd:pre&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='ul'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-section"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$contains-block-non-li"&gt;
                        &lt;xd:section&gt;
                            &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                                &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                            &lt;/xsl:call-template&gt;
                        &lt;/xd:section&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="count(descendant::*[local-name()='li'])=0"&gt;
                        &lt;xsl:choose&gt;
                            &lt;xsl:when test="count(child::node()[self::* or self::text() and string-length(normalize-space())&amp;gt;0])&amp;gt;1"&gt;
                                &lt;xd:section&gt;
                                    &lt;xsl:apply-templates mode="section" select="@*|node()"&gt;
                                        &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                                        &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                                    &lt;/xsl:apply-templates&gt;
                                &lt;/xd:section&gt;
                            &lt;/xsl:when&gt;
                            &lt;xsl:otherwise&gt;
                                &lt;xsl:apply-templates mode="section" select="@*|node()"&gt;
                                    &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                                &lt;/xsl:apply-templates&gt;
                            &lt;/xsl:otherwise&gt;
                        &lt;/xsl:choose&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:ul&gt;
                            &lt;xsl:apply-templates mode="list" select="@*|node()"&gt;
                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:ul&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='li'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-section"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:ul&gt;
                            &lt;xd:li&gt;
                                &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                            &lt;/xd:li&gt;
                        &lt;/xd:ul&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='b'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-section"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-b" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-b" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:b&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:b&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='i'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-section"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-i" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-i" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:i&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:i&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='a'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-section"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-a" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-a-elem" select="." tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-a" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-a-elem" select="." tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:a&gt;
                            &lt;xsl:apply-templates select="@*"/&gt;
                            &lt;xsl:apply-templates mode="phrase" select="node()"/&gt;
                        &lt;/xd:a&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="self::*"&gt;
                        &lt;xsl:choose&gt;
                            &lt;xsl:when test="not(preceding-sibling::*) and not(following-sibling::*)"&gt;
                                &lt;xsl:apply-templates mode="section" select="@*|node()"/&gt;
                            &lt;/xsl:when&gt;
                            &lt;xsl:otherwise&gt;
                                &lt;xd:section&gt;
                                    &lt;xsl:apply-templates mode="section" select="@*|node()"/&gt;
                                &lt;/xd:section&gt;
                            &lt;/xsl:otherwise&gt;
                        &lt;/xsl:choose&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="self::text()"&gt;
                        &lt;xsl:copy/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="section" select="@*|node()"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Handles non-problematic lists.&lt;/xd:short&gt;&lt;xd:param name="wrapin-p"/&gt;&lt;xd:param name="wrapin-ul"/&gt;&lt;xd:param name="wrapin-li"/&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template mode="list" match="@*|node()"&gt;
        &lt;xsl:param name="wrapin-p" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-ul" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-li" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:variable name="is-empty" select="count(descendant-or-self::node()[self::text() and string-length(normalize-space())&amp;gt;0 or local-name()='pre'])=0"/&gt;
        &lt;xsl:variable name="contains-block" select="count(descendant::*[local-name()='ul' or local-name()='li' or local-name()='pre' or local-name()='p'])&amp;gt;0"/&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="local-name()='li'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$wrapin-ul"&gt;
                        &lt;xd:ul&gt;
                            &lt;xd:li&gt;
                                &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                            &lt;/xd:li&gt;
                        &lt;/xd:ul&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:li&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:li&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="self::text()"&gt;
                        &lt;xsl:copy/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="list" select="@*|node()"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Handles all elements when in "block" mode and applies fixes where needed.&lt;/xd:short&gt;&lt;xd:param name="wrapin-p"/&gt;&lt;xd:param name="wrapin-ul"/&gt;&lt;xd:param name="wrapin-li"/&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template mode="block" match="@*|node()"&gt;
        &lt;xsl:param name="wrapin-p" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-ul" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-li" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:variable name="element" select="."/&gt;
        &lt;xsl:variable name="is-empty" select="count(descendant-or-self::node()[self::* or self::text() and string-length(normalize-space())&amp;gt;0])=0"/&gt;
        &lt;xsl:variable name="contains-block" select="count(descendant::*[local-name()='ul' or local-name()='li' or local-name()='pre' or local-name()='p'])&amp;gt;0"/&gt;
        &lt;xsl:variable name="contains-block-non-li" select="count(descendant::*[local-name()='ul' or local-name()='pre' or local-name()='p'])&amp;gt;0"/&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="local-name()='p'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:p&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:p&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='pre'"&gt;
                &lt;xd:pre&gt;
                    &lt;xsl:copy-of select="@*|node()"/&gt;
                &lt;/xd:pre&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='ul'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block-non-li"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="count(descendant::*[local-name()='li' and string-length(normalize-space(descendant-or-self::text()))&amp;gt;0])=0"&gt;
                        &lt;xsl:apply-templates mode="block" select="@*|node()"/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:ul&gt;
                            &lt;xsl:apply-templates mode="list" select="@*|node()"&gt;
                                &lt;xsl:with-param name="wrapin-ul" select="false()"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:ul&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='li'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:ul&gt;
                            &lt;xd:li&gt;
                                &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                                    &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                &lt;/xsl:apply-templates&gt;
                            &lt;/xd:li&gt;
                        &lt;/xd:ul&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="not($contains-block) and $wrapin-p"&gt;
                &lt;xd:p&gt;
                    &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                        &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                        &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                        &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                    &lt;/xsl:apply-templates&gt;
                &lt;/xd:p&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="not($contains-block) and $wrapin-li"&gt;
                &lt;xd:ul&gt;
                    &lt;xd:li&gt;
                        &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                            &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xd:li&gt;
                &lt;/xd:ul&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='b'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-b" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:b&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:b&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='i'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-i" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:i&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:i&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='a'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-a" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-a-elem" select="$element" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:a&gt;
                            &lt;xsl:apply-templates mode="phrase" select="$element/@*"/&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:a&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="self::text()"&gt;
                        &lt;xsl:copy/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="block" select="@*|node()"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Phrases are matched with this template (mode="phrase") and handled appropriately.&lt;/xd:short&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template mode="phrase" match="@*|node()"&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="local-name()='b'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='b'])"&gt;
                        &lt;xd:b&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:b&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="$wrapin-b"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='b'])"&gt;
                        &lt;xd:b&gt;
                            &lt;xsl:apply-templates mode="phrase" select="."&gt;
                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:b&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="."&gt;
                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='i'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='i'])"&gt;
                        &lt;xd:i&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:i&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="$wrapin-i"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='i'])"&gt;
                        &lt;xd:i&gt;
                            &lt;xsl:apply-templates mode="phrase" select="."&gt;
                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:i&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="."&gt;
                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='a'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='a'])"&gt;
                        &lt;xd:a&gt;
                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                            &lt;xsl:apply-templates mode="phrase" select="node()"&gt;
                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:a&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="$wrapin-a"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='a'])"&gt;
                        &lt;xd:a&gt;
                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                            &lt;xsl:apply-templates mode="phrase" select="."&gt;
                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:a&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="."&gt;
                            &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="self::text()"&gt;
                        &lt;xsl:copy/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;This template unwraps problematic elements into sections.&lt;/xd:short&gt;&lt;xd:param name="wasWrapped"/&gt;&lt;xd:param name="wrapin-p"/&gt;&lt;xd:param name="wrapin-ul"/&gt;&lt;xd:param name="wrapin-li"/&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="unwrap-to-sections"&gt;
        &lt;xsl:param name="wasWrapped" select="false()"/&gt;
        &lt;xsl:param name="wrapin-p" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-ul" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-li" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:variable name="element" select="."/&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="not($wasWrapped) and count(child::node()[self::* or self::text() and string-length(normalize-space())&amp;gt;0])&amp;gt;1"&gt;
                &lt;xd:section&gt;
                    &lt;xsl:call-template name="unwrap-to-sections"&gt;
                        &lt;xsl:with-param name="wasWrapped" select="true()"/&gt;
                    &lt;/xsl:call-template&gt;
                &lt;/xd:section&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
                &lt;xsl:for-each-group select="child::node()[self::* or self::text() and string-length(normalize-space())&amp;gt;0]" group-adjacent="self::* and not(ancestor::*[local-name()='pre']) and (local-name()='section' or local-name()='ul' or local-name()='li' or local-name()='pre' or local-name()='p')"&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="current-grouping-key()"&gt;
                            &lt;xsl:choose&gt;
                                &lt;xsl:when test="count(current-group())&amp;gt;1 and last()&amp;gt;1"&gt;
                                    &lt;xd:section&gt;
                                        &lt;xsl:apply-templates mode="section" select="current-group()"&gt;
                                            &lt;xsl:with-param name="wrapin-p" tunnel="yes" select="if ($wrapin-p or local-name($element)='p') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-ul" tunnel="yes" select="if ($wrapin-ul or local-name($element)='ul') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-li" tunnel="yes" select="if ($wrapin-li or local-name($element)='li') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-b" tunnel="yes" select="if ($wrapin-b or local-name($element)='b') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-i" tunnel="yes" select="if ($wrapin-i or local-name($element)='i') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-a" tunnel="yes" select="if ($wrapin-a or local-name($element)='a') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-a-elem" tunnel="yes" select="if (not($wrapin-a) and local-name($element)='a') then $element else false()"/&gt;
                                        &lt;/xsl:apply-templates&gt;
                                    &lt;/xd:section&gt;
                                &lt;/xsl:when&gt;
                                &lt;xsl:otherwise&gt;
                                    &lt;xsl:apply-templates mode="section" select="current-group()"&gt;
                                        &lt;xsl:with-param name="wrapin-p" tunnel="yes" select="if ($wrapin-p or local-name($element)='p') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-ul" tunnel="yes" select="if ($wrapin-ul or local-name($element)='ul') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-li" tunnel="yes" select="if ($wrapin-li or local-name($element)='li') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-b" tunnel="yes" select="if ($wrapin-b or local-name($element)='b') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-i" tunnel="yes" select="if ($wrapin-i or local-name($element)='i') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-a" tunnel="yes" select="if ($wrapin-a or local-name($element)='a') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-a-elem" tunnel="yes" select="if (not($wrapin-a) and local-name($element)='a') then $element else false()"/&gt;
                                    &lt;/xsl:apply-templates&gt;
                                &lt;/xsl:otherwise&gt;
                            &lt;/xsl:choose&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:element name="xd:{local-name($element)}"&gt;
                                &lt;xsl:for-each select="$element/@*"&gt;
                                    &lt;xsl:attribute name="xd:{local-name()}" select="."/&gt;
                                &lt;/xsl:for-each&gt;
                                &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                    &lt;xsl:with-param name="wrapin-p" tunnel="yes" select="if ($wrapin-p or local-name($element)='p') then false() else $wrapin-p"/&gt;
                                    &lt;xsl:with-param name="wrapin-ul" tunnel="yes" select="if ($wrapin-ul or local-name($element)='ul') then false() else $wrapin-ul"/&gt;
                                    &lt;xsl:with-param name="wrapin-li" tunnel="yes" select="if ($wrapin-li or local-name($element)='li') then false() else $wrapin-li"/&gt;
                                    &lt;xsl:with-param name="wrapin-b" tunnel="yes" select="if ($wrapin-b or local-name($element)='b') then false() else $wrapin-b"/&gt;
                                    &lt;xsl:with-param name="wrapin-i" tunnel="yes" select="if ($wrapin-i or local-name($element)='i') then false() else $wrapin-i"/&gt;
                                    &lt;xsl:with-param name="wrapin-a" tunnel="yes" select="if ($wrapin-a or local-name($element)='a') then false() else $wrapin-a"/&gt;
                                &lt;/xsl:apply-templates&gt;
                            &lt;/xsl:element&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xsl:for-each-group&gt;
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;This template unwraps problematic elements into blocks.&lt;/xd:short&gt;&lt;xd:param name="wrapin-p"/&gt;&lt;xd:param name="wrapin-ul"/&gt;&lt;xd:param name="wrapin-li"/&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="unwrap-to-blocks"&gt;
        &lt;xsl:param name="wrapin-p" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-ul" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-li" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:variable name="element" select="."/&gt;
        &lt;xsl:for-each-group select="child::node()[self::* or self::text() and string-length(normalize-space())&amp;gt;0]" group-adjacent="count(descendant-or-self::*[local-name()='ul' or local-name()='li' or local-name()='pre' or local-name()='p'])&amp;gt;0"&gt;
            &lt;xsl:choose&gt;
                &lt;xsl:when test="current-grouping-key()"&gt;
                    &lt;xsl:for-each select="current-group()"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-p" select="$wrapin-p or local-name()='p' or local-name($element)='p'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="$wrapin-ul or local-name()='ul' or local-name($element)='ul'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="$wrapin-li or local-name()='li' or local-name($element)='li'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-b" select="$wrapin-b or local-name()='b' or local-name($element)='b'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-i" select="$wrapin-i or local-name()='i' or local-name($element)='i'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-a" select="$wrapin-a or local-name()='a' or local-name($element)='a'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-a-elem" select="if (local-name()='a') then . else (if (local-name($element)='a') then $element else $wrapin-a-elem)" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:for-each&gt;
                &lt;/xsl:when&gt;
                &lt;xsl:otherwise&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="$wrapin-p"&gt;
                            &lt;xd:p&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="$wrapin-b"&gt;
                                        &lt;xd:b&gt;
                                            &lt;xsl:choose&gt;
                                                &lt;xsl:when test="$wrapin-i"&gt;
                                                  &lt;xd:i&gt;
                                                  &lt;xsl:choose&gt;
                                                  &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                  &lt;/xsl:when&gt;
                                                  &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xsl:otherwise&gt;
                                                  &lt;/xsl:choose&gt;
                                                  &lt;/xd:i&gt;
                                                &lt;/xsl:when&gt;
                                                &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                &lt;/xsl:otherwise&gt;
                                            &lt;/xsl:choose&gt;
                                        &lt;/xd:b&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:when test="$wrapin-i"&gt;
                                        &lt;xd:i&gt;
                                            &lt;xsl:choose&gt;
                                                &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                &lt;/xsl:when&gt;
                                                &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                &lt;/xsl:otherwise&gt;
                                            &lt;/xsl:choose&gt;
                                        &lt;/xd:i&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:when test="$wrapin-a"&gt;
                                        &lt;xd:a&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                            &lt;/xsl:apply-templates&gt;
                                        &lt;/xd:a&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                            &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                        &lt;/xsl:apply-templates&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xd:p&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="$wrapin-li"&gt;
                            &lt;xd:ul&gt;
                                &lt;xd:li&gt;
                                    &lt;xsl:choose&gt;
                                        &lt;xsl:when test="$wrapin-b"&gt;
                                            &lt;xd:b&gt;
                                                &lt;xsl:choose&gt;
                                                  &lt;xsl:when test="$wrapin-i"&gt;
                                                  &lt;xd:i&gt;
                                                  &lt;xsl:choose&gt;
                                                  &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                  &lt;/xsl:when&gt;
                                                  &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xsl:otherwise&gt;
                                                  &lt;/xsl:choose&gt;
                                                  &lt;/xd:i&gt;
                                                  &lt;/xsl:when&gt;
                                                  &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xsl:otherwise&gt;
                                                &lt;/xsl:choose&gt;
                                            &lt;/xd:b&gt;
                                        &lt;/xsl:when&gt;
                                        &lt;xsl:when test="$wrapin-i"&gt;
                                            &lt;xd:i&gt;
                                                &lt;xsl:choose&gt;
                                                  &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                  &lt;/xsl:when&gt;
                                                  &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xsl:otherwise&gt;
                                                &lt;/xsl:choose&gt;
                                            &lt;/xd:i&gt;
                                        &lt;/xsl:when&gt;
                                        &lt;xsl:when test="$wrapin-a"&gt;
                                            &lt;xd:a&gt;
                                                &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                &lt;/xsl:apply-templates&gt;
                                            &lt;/xd:a&gt;
                                        &lt;/xsl:when&gt;
                                        &lt;xsl:otherwise&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                            &lt;/xsl:apply-templates&gt;
                                        &lt;/xsl:otherwise&gt;
                                    &lt;/xsl:choose&gt;
                                &lt;/xd:li&gt;
                            &lt;/xd:ul&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="$wrapin-ul"&gt;
                            &lt;xd:p&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="$wrapin-b"&gt;
                                        &lt;xd:b&gt;
                                            &lt;xsl:choose&gt;
                                                &lt;xsl:when test="$wrapin-i"&gt;
                                                  &lt;xd:i&gt;
                                                  &lt;xsl:choose&gt;
                                                  &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                  &lt;/xsl:when&gt;
                                                  &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xsl:otherwise&gt;
                                                  &lt;/xsl:choose&gt;
                                                  &lt;/xd:i&gt;
                                                &lt;/xsl:when&gt;
                                                &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                &lt;/xsl:otherwise&gt;
                                            &lt;/xsl:choose&gt;
                                        &lt;/xd:b&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:when test="$wrapin-i"&gt;
                                        &lt;xd:i&gt;
                                            &lt;xsl:choose&gt;
                                                &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                &lt;/xsl:when&gt;
                                                &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                &lt;/xsl:otherwise&gt;
                                            &lt;/xsl:choose&gt;
                                        &lt;/xd:i&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:when test="$wrapin-a"&gt;
                                        &lt;xd:a&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                            &lt;/xsl:apply-templates&gt;
                                        &lt;/xd:a&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                            &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                        &lt;/xsl:apply-templates&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xd:p&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="$wrapin-b"&gt;
                            &lt;xd:b&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="$wrapin-i"&gt;
                                        &lt;xd:i&gt;
                                            &lt;xsl:choose&gt;
                                                &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                &lt;/xsl:when&gt;
                                                &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                &lt;/xsl:otherwise&gt;
                                            &lt;/xsl:choose&gt;
                                        &lt;/xd:i&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:when test="$wrapin-a"&gt;
                                        &lt;xd:a&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                            &lt;/xsl:apply-templates&gt;
                                        &lt;/xd:a&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                            &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                        &lt;/xsl:apply-templates&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xd:b&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="$wrapin-i"&gt;
                            &lt;xd:i&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="$wrapin-a"&gt;
                                        &lt;xd:a&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                            &lt;/xsl:apply-templates&gt;
                                        &lt;/xd:a&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                            &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                        &lt;/xsl:apply-templates&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xd:i&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="$wrapin-a"&gt;
                            &lt;xd:a&gt;
                                &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                    &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                &lt;/xsl:apply-templates&gt;
                            &lt;/xd:a&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xsl:otherwise&gt;
            &lt;/xsl:choose&gt;
        &lt;/xsl:for-each-group&gt;
    &lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;&lt;/codeblock&gt;
    &lt;xsl:template mode="block" match="@*|node()"&gt;
        &lt;xsl:param name="wrapin-p" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-ul" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-li" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:variable name="element" select="."/&gt;
        &lt;xsl:variable name="is-empty" select="count(descendant-or-self::node()[self::* or self::text() and string-length(normalize-space())&amp;gt;0])=0"/&gt;
        &lt;xsl:variable name="contains-block" select="count(descendant::*[local-name()='ul' or local-name()='li' or local-name()='pre' or local-name()='p'])&amp;gt;0"/&gt;
        &lt;xsl:variable name="contains-block-non-li" select="count(descendant::*[local-name()='ul' or local-name()='pre' or local-name()='p'])&amp;gt;0"/&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="local-name()='p'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:p&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:p&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='pre'"&gt;
                &lt;xd:pre&gt;
                    &lt;xsl:copy-of select="@*|node()"/&gt;
                &lt;/xd:pre&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='ul'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block-non-li"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="count(descendant::*[local-name()='li' and string-length(normalize-space(descendant-or-self::text()))&amp;gt;0])=0"&gt;
                        &lt;xsl:apply-templates mode="block" select="@*|node()"/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:ul&gt;
                            &lt;xsl:apply-templates mode="list" select="@*|node()"&gt;
                                &lt;xsl:with-param name="wrapin-ul" select="false()"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:ul&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='li'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:ul&gt;
                            &lt;xd:li&gt;
                                &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                                    &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                &lt;/xsl:apply-templates&gt;
                            &lt;/xd:li&gt;
                        &lt;/xd:ul&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="not($contains-block) and $wrapin-p"&gt;
                &lt;xd:p&gt;
                    &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                        &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                        &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                        &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                    &lt;/xsl:apply-templates&gt;
                &lt;/xd:p&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="not($contains-block) and $wrapin-li"&gt;
                &lt;xd:ul&gt;
                    &lt;xd:li&gt;
                        &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                            &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xd:li&gt;
                &lt;/xd:ul&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='b'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-b" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:b&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:b&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='i'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-i" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:i&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:i&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='a'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-a" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-a-elem" select="$element" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:a&gt;
                            &lt;xsl:apply-templates mode="phrase" select="$element/@*"/&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:a&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="self::text()"&gt;
                        &lt;xsl:copy/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="block" select="@*|node()"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;codeblock&gt;&lt;xsl:stylesheet version="2.0"&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Identity template.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template match="@*|node()"&gt;
        &lt;xsl:copy&gt;
            &lt;xsl:apply-templates select="@*|node()"/&gt;
        &lt;/xsl:copy&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Matches each xd:doc element.&lt;/xd:short&gt;&lt;xd:detail&gt;
        
        Determines what code is being documented and calls appropriate templates for: &lt;xd:ul&gt;
                &lt;xd:li&gt;short description (xd:short)&lt;/xd:li&gt;
                &lt;xd:li&gt;detailed description (xd:detail)&lt;/xd:li&gt;
                &lt;xd:li&gt;authors (xd:author)&lt;/xd:li&gt;
                &lt;xd:li&gt;contributors (xd:contributor)&lt;/xd:li&gt;
                &lt;xd:li&gt;maintainers (xd:maintainer)&lt;/xd:li&gt;
                &lt;xd:li&gt;copyright (xd:copyright)&lt;/xd:li&gt;
                &lt;xd:li&gt;version (xd:version)&lt;/xd:li&gt;
                &lt;xd:li&gt;code existed since version (xd:since)&lt;/xd:li&gt;
                &lt;xd:li&gt;see also (xd:see)&lt;/xd:li&gt;
                &lt;xd:li&gt;deprecated since version (xd:deprecated)&lt;/xd:li&gt;
                &lt;xd:li&gt;import statements (xd:import and xsl:import)&lt;/xd:li&gt;
                &lt;xd:li&gt;include statements (xd:include and xsl:include)&lt;/xd:li&gt;
                &lt;xd:li&gt;parameters (xd:param and xsl:param)&lt;/xd:li&gt;
                &lt;xd:li&gt;return values / output (xd:return)&lt;/xd:li&gt;
            &lt;/xd:ul&gt;
        
        
    &lt;/xd:detail&gt;&lt;xd:return&gt;The normalized xd:doc.&lt;/xd:return&gt;&lt;/xd:doc&gt;
    &lt;xsl:template match="xd:doc"&gt;
        &lt;xsl:copy&gt;
            &lt;xsl:variable name="target"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="@target"&gt;
                        &lt;xsl:value-of select="@target"/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="count(preceding-sibling::*)=0"&gt;
                        &lt;xsl:value-of select="'parent'"/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:value-of select="'following'"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:variable&gt;
            &lt;xsl:variable name="code" select="if ($target='parent') then parent::* else following-sibling::*[1]"/&gt;

            &lt;xsl:attribute name="target" select="$target"/&gt;

            &lt;xsl:call-template name="short"/&gt;
            &lt;xsl:call-template name="detail"/&gt;
            &lt;xsl:call-template name="authors"/&gt;
            &lt;xsl:call-template name="contributors"/&gt;
            &lt;xsl:call-template name="maintainers"/&gt;
            &lt;xsl:call-template name="copyright"/&gt;
            &lt;xsl:call-template name="version"/&gt;
            &lt;xsl:call-template name="since"/&gt;
            &lt;xsl:call-template name="see"/&gt;
            &lt;xsl:call-template name="deprecated"/&gt;
            &lt;xsl:call-template name="import"&gt;
                &lt;xsl:with-param name="code" select="$code"/&gt;
            &lt;/xsl:call-template&gt;
            &lt;xsl:call-template name="include"&gt;
                &lt;xsl:with-param name="code" select="$code"/&gt;
            &lt;/xsl:call-template&gt;
            &lt;xsl:call-template name="param"&gt;
                &lt;xsl:with-param name="code" select="$code"/&gt;
            &lt;/xsl:call-template&gt;
            &lt;xsl:call-template name="return"/&gt;
        &lt;/xsl:copy&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Determines the short description.&lt;/xd:short&gt;&lt;xd:detail&gt;
        
        
            &lt;xd:ul&gt;
                &lt;xd:li&gt;If there is no &amp;lt;xd:short/&amp;gt;-element present, but plain text is present as a
                    child of the &amp;lt;xd:doc/&amp;gt;element, then the first sentence from that text (up
                    until the first period (".") will be used as a short description.&lt;/xd:li&gt;
                &lt;xd:li&gt;Else; if there are multiple &amp;lt;xd:short/&amp;gt;-elements, each one of their
                    contents will be wrapped in separate &amp;lt;section/&amp;gt;s.&lt;/xd:li&gt;
                &lt;xd:li&gt;Else; use the one &amp;lt;xd:short/&amp;gt;-element that is present for the short
                    description.&lt;/xd:li&gt;
            &lt;/xd:ul&gt;
        
    &lt;/xd:detail&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="short"&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="count(child::*[local-name()='short'])&amp;gt;1"&gt;
                &lt;xd:short&gt;
                    &lt;xsl:for-each select="child::*[local-name()='short']"&gt;
                        &lt;xd:section&gt;
                            &lt;xsl:apply-templates mode="section"/&gt;
                        &lt;/xd:section&gt;
                    &lt;/xsl:for-each&gt;
                &lt;/xd:short&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="count(child::*[local-name()='short'])=1"&gt;
                &lt;xd:short&gt;
                    &lt;xsl:apply-templates select="child::*[local-name()='short']/node()" mode="section"/&gt;
                &lt;/xd:short&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="child::text()[string-length(normalize-space())&amp;gt;0]"&gt;
                &lt;xsl:variable name="short" select="replace(normalize-space(child::text()[1]),'^([^\.]+\.?)\s?.*$','$1')"/&gt;
                &lt;xd:short&gt;
                    &lt;xsl:value-of select="$short"/&gt;
                &lt;/xd:short&gt;
            &lt;/xsl:when&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Determines the detailed description.&lt;/xd:short&gt;&lt;xd:detail&gt;
        
        The detailed description will be put together based on any number of
            &amp;lt;xd:detail/&amp;gt;-elements, as well as any number of text nodes that are direct
            children of the &amp;lt;xd:doc/&amp;gt;-element. If the xd:short was extracted from the first
            text node, then the first sentence from that text node will be ignored. If there are
            multiple &amp;lt;xd:detail/&amp;gt; and text nodes, then each of them will be wrapped in
            &amp;lt;xd:section/&amp;gt;s.
    &lt;/xd:detail&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="detail"&gt;
        &lt;xsl:variable name="shortInFirstText" select="count(./*[local-name()='short'])=0"/&gt;
        &lt;xsl:variable name="detailCount" select="(if (matches(normalize-space(./text()[1]),'\.[^\.].')) then 1 else 0) + count(*[local-name()='detail' and (descendant-or-self::node()[self::text() and string-length(normalize-space())&amp;gt;0 or local-name()='pre' and not(ancestor::*[local-name()='pre'])])]) + count(./text()[not(position()=1) and string-length(normalize-space())&amp;gt;0])"/&gt;
        &lt;xsl:if test="$detailCount&amp;gt;0"&gt;
            &lt;xd:detail&gt;
                &lt;xsl:for-each select="*|text()"&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="self::text() and count(preceding-sibling::text()[string-length(normalize-space())&amp;gt;0])=0"&gt;
                            &lt;!-- first text --&gt;
                            &lt;xsl:choose&gt;
                                &lt;xsl:when test="$shortInFirstText"&gt;
                                    &lt;xsl:variable name="detail" select="replace(normalize-space(),'^[^\.]+.?\s?(.*)$','$1')"/&gt;
                                    &lt;xsl:choose&gt;
                                        &lt;xsl:when test="$detailCount&amp;gt;1"&gt;
                                            &lt;xd:section&gt;
                                                &lt;xsl:value-of select="$detail"/&gt;
                                            &lt;/xd:section&gt;
                                        &lt;/xsl:when&gt;
                                        &lt;xsl:otherwise&gt;
                                            &lt;xsl:value-of select="$detail"/&gt;
                                        &lt;/xsl:otherwise&gt;
                                    &lt;/xsl:choose&gt;
                                &lt;/xsl:when&gt;
                                &lt;xsl:otherwise&gt;
                                    &lt;xsl:choose&gt;
                                        &lt;xsl:when test="$detailCount&amp;gt;1"&gt;
                                            &lt;xd:section&gt;
                                                &lt;xsl:value-of select="."/&gt;
                                            &lt;/xd:section&gt;
                                        &lt;/xsl:when&gt;
                                        &lt;xsl:otherwise&gt;
                                            &lt;xsl:value-of select="."/&gt;
                                        &lt;/xsl:otherwise&gt;
                                    &lt;/xsl:choose&gt;
                                &lt;/xsl:otherwise&gt;
                            &lt;/xsl:choose&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="self::text()"&gt;
                            &lt;!-- non-first text --&gt;
                            &lt;xsl:choose&gt;
                                &lt;xsl:when test="$detailCount&amp;gt;1"&gt;
                                    &lt;xd:section&gt;
                                        &lt;xsl:value-of select="."/&gt;
                                    &lt;/xd:section&gt;
                                &lt;/xsl:when&gt;
                                &lt;xsl:otherwise&gt;
                                    &lt;xsl:value-of select="."/&gt;
                                &lt;/xsl:otherwise&gt;
                            &lt;/xsl:choose&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="local-name()='detail'"&gt;
                            &lt;!-- detail element --&gt;
                            &lt;xsl:choose&gt;
                                &lt;xsl:when test="$detailCount&amp;gt;1"&gt;
                                    &lt;xd:section&gt;
                                        &lt;xsl:apply-templates select="child::node()" mode="section"/&gt;
                                    &lt;/xd:section&gt;
                                &lt;/xsl:when&gt;
                                &lt;xsl:otherwise&gt;
                                    &lt;xsl:apply-templates select="child::node()" mode="section"/&gt;
                                &lt;/xsl:otherwise&gt;
                            &lt;/xsl:choose&gt;
                        &lt;/xsl:when&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xsl:for-each&gt;
            &lt;/xd:detail&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes the xd:author-elements.&lt;/xd:short&gt;&lt;xd:detail&gt;&amp;gt;xd:author/&amp;lt;s with no text are removed. &amp;lt;xd:author/&amp;gt;s with no child elements will have their text content wrapped in a &amp;lt;xd:name/&amp;gt; element. Children other than xd:name, xd:mailto and xd:organization are ignored.&lt;/xd:detail&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="authors" xml:id="authors"&gt;
        &lt;xsl:for-each select="*[local-name()='author']"&gt;
            &lt;xsl:variable name="is-empty" select="count(descendant-or-self::text()[string-length(normalize-space())&amp;gt;0])=0"/&gt;
            &lt;xsl:if test="not($is-empty)"&gt;
                &lt;xd:author&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="count(child::*)=0"&gt;
                            &lt;xd:name&gt;
                                &lt;xsl:value-of select="."/&gt;
                            &lt;/xd:name&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:if test="child::*[local-name()='name']"&gt;
                                &lt;xd:name&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='name']"/&gt;
                                &lt;/xd:name&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='mailto']"&gt;
                                &lt;xd:mailto&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='mailto']"/&gt;
                                &lt;/xd:mailto&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='organization']"&gt;
                                &lt;xd:organization&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='organization']"/&gt;
                                &lt;/xd:organization&gt;
                            &lt;/xsl:if&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xd:author&gt;
            &lt;/xsl:if&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;&amp;lt;xd:contributor/&amp;gt;s are normalized in the same way as &amp;lt;xd:author/&amp;gt;s&lt;/xd:short&gt;&lt;xd:see&gt;#authors&lt;/xd:see&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="contributors"&gt;
        &lt;xsl:for-each select="*[local-name()='contributor']"&gt;
            &lt;xsl:variable name="is-empty" select="count(descendant-or-self::text()[string-length(normalize-space())&amp;gt;0])=0"/&gt;
            &lt;xsl:if test="not($is-empty)"&gt;
                &lt;xd:contributor&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="count(child::*)=0"&gt;
                            &lt;xd:name&gt;
                                &lt;xsl:value-of select="."/&gt;
                            &lt;/xd:name&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:if test="child::*[local-name()='name']"&gt;
                                &lt;xd:name&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='name']"/&gt;
                                &lt;/xd:name&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='mailto']"&gt;
                                &lt;xd:mailto&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='mailto']"/&gt;
                                &lt;/xd:mailto&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='organization']"&gt;
                                &lt;xd:organization&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='organization']"/&gt;
                                &lt;/xd:organization&gt;
                            &lt;/xsl:if&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xd:contributor&gt;
            &lt;/xsl:if&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;&amp;lt;xd:maintainer/&amp;gt;s are normalized in the same way as &amp;lt;xd:author/&amp;gt;s&lt;/xd:short&gt;&lt;xd:see&gt;#authors&lt;/xd:see&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="maintainers"&gt;
        &lt;xsl:for-each select="*[local-name()='maintainer']"&gt;
            &lt;xsl:variable name="is-empty" select="count(descendant-or-self::text()[string-length(normalize-space())&amp;gt;0])=0"/&gt;
            &lt;xsl:if test="not($is-empty)"&gt;
                &lt;xd:maintainer&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="count(child::*)=0"&gt;
                            &lt;xd:name&gt;
                                &lt;xsl:value-of select="."/&gt;
                            &lt;/xd:name&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:if test="child::*[local-name()='name']"&gt;
                                &lt;xd:name&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='name']"/&gt;
                                &lt;/xd:name&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='mailto']"&gt;
                                &lt;xd:mailto&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='mailto']"/&gt;
                                &lt;/xd:mailto&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='organization']"&gt;
                                &lt;xd:organization&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='organization']"/&gt;
                                &lt;/xd:organization&gt;
                            &lt;/xsl:if&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xd:maintainer&gt;
            &lt;/xsl:if&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes the xd:copyright-element.&lt;/xd:short&gt;&lt;xd:detail&gt;&amp;gt;xd:copyright/&amp;lt;s with no text are removed. &amp;lt;xd:copyright/&amp;gt;s with no child elements will have their text content wrapped in a &amp;lt;xd:name/&amp;gt; element. Children other than xd:year, xd:name, xd:mailto and xd:organization are ignored.&lt;/xd:detail&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="copyright"&gt;
        &lt;xsl:for-each select="*[local-name()='copyright']"&gt;
            &lt;xsl:variable name="is-empty" select="count(descendant-or-self::text()[string-length(normalize-space())&amp;gt;0])=0"/&gt;
            &lt;xsl:if test="not($is-empty)"&gt;
                &lt;xd:copyright&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="count(child::*)=0"&gt;
                            &lt;xd:name&gt;
                                &lt;xsl:value-of select="."/&gt;
                            &lt;/xd:name&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:if test="child::*[local-name()='year']"&gt;
                                &lt;xd:year&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='year']"/&gt;
                                &lt;/xd:year&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='name']"&gt;
                                &lt;xd:name&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='name']"/&gt;
                                &lt;/xd:name&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='mailto']"&gt;
                                &lt;xd:mailto&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='mailto']"/&gt;
                                &lt;/xd:mailto&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='organization']"&gt;
                                &lt;xd:organization&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='organization']"/&gt;
                                &lt;/xd:organization&gt;
                            &lt;/xsl:if&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xd:copyright&gt;
            &lt;/xsl:if&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:version elements.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="version"&gt;
        &lt;xsl:if test="child::*[local-name()='version' and string-length(normalize-space(./text()))&amp;gt;0]"&gt;
            &lt;xd:version&gt;
                &lt;xsl:value-of select="child::*[local-name()='version' and string-length(normalize-space(./text()))&amp;gt;0]"/&gt;
            &lt;/xd:version&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:since elements.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="since"&gt;
        &lt;xsl:if test="child::*[local-name()='since' and string-length(normalize-space(./text()))&amp;gt;0]"&gt;
            &lt;xd:since&gt;
                &lt;xsl:value-of select="child::*[local-name()='since' and string-length(normalize-space(./text()))&amp;gt;0]"/&gt;
            &lt;/xd:since&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:see elements.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="see"&gt;
        &lt;xsl:if test="child::*[local-name()='see' and string-length(normalize-space(./text()))&amp;gt;0]"&gt;
            &lt;xd:see&gt;
                &lt;xsl:value-of select="child::*[local-name()='see' and string-length(normalize-space(./text()))&amp;gt;0]"/&gt;
            &lt;/xd:see&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:deprecated elements.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="deprecated"&gt;
        &lt;xsl:if test="child::*[local-name()='deprecated' and string-length(normalize-space(./text()))&amp;gt;0]"&gt;
            &lt;xd:deprecated&gt;
                &lt;xsl:value-of select="child::*[local-name()='deprecated' and string-length(normalize-space(./text()))&amp;gt;0]"/&gt;
            &lt;/xd:deprecated&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:import elements.&lt;/xd:short&gt;&lt;xd:detail&gt;Will create empty documentation for imports that are not documented, and removes documentation of imports that does not exist in the code.&lt;/xd:detail&gt;&lt;xd:param name="code"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="import"&gt;
        &lt;xsl:param name="code" required="yes"/&gt;
        &lt;xsl:variable name="doc" select="."/&gt;
        &lt;xsl:for-each select="$code/xsl:import"&gt;
            &lt;xsl:variable name="href" select="@href"/&gt;
            &lt;xd:import href="{@href}"&gt;
                &lt;xsl:if test="$doc/*[local-name()='import' and @href=$href]"&gt;
                    &lt;xsl:value-of select="$doc/*[local-name()='import' and @href=$href]"/&gt;
                &lt;/xsl:if&gt;
            &lt;/xd:import&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:include elements.&lt;/xd:short&gt;&lt;xd:detail&gt;Will create empty documentation for includes that are not documented, and removes documentation of includes that does not exist in the code.&lt;/xd:detail&gt;&lt;xd:param name="code"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="include"&gt;
        &lt;xsl:param name="code" required="yes"/&gt;
        &lt;xsl:variable name="doc" select="."/&gt;
        &lt;xsl:for-each select="$code/xsl:include"&gt;
            &lt;xsl:variable name="href" select="@href"/&gt;
            &lt;xd:include href="{@href}"&gt;
                &lt;xsl:if test="$doc/*[local-name()='include' and @href=$href]"&gt;
                    &lt;xsl:value-of select="$doc/*[local-name()='include' and @href=$href]"/&gt;
                &lt;/xsl:if&gt;
            &lt;/xd:include&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:import elements.&lt;/xd:short&gt;&lt;xd:detail&gt;Will create empty documentation for imports that are not documented, and removes documentation of imports that does not exist in the code.&lt;/xd:detail&gt;&lt;xd:param name="code"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="param"&gt;
        &lt;xsl:param name="code" required="yes"/&gt;
        &lt;xsl:variable name="doc" select="."/&gt;
        &lt;xsl:for-each select="*[local-name()='param']"&gt;
            &lt;xd:param&gt;
                &lt;xsl:apply-templates select="@*"/&gt;
                &lt;xsl:apply-templates mode="section" select="node()"/&gt;
            &lt;/xd:param&gt;
        &lt;/xsl:for-each&gt;
        &lt;xsl:for-each select="$code/xsl:param"&gt;
            &lt;xsl:variable name="name" select="@name"/&gt;
            &lt;xsl:if test="not($doc/*[local-name()='param' and @name=$name])"&gt;
                &lt;xd:param name="{@name}"/&gt;
            &lt;/xsl:if&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Describes the result of the code.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="return"&gt;
        &lt;xsl:variable name="is-empty" select="count(*[local-name()='return']/descendant-or-self::node()[self::text() and string-length(normalize-space())&amp;gt;0 or local-name()='pre'])=0"/&gt;
        &lt;xsl:if test="not($is-empty)"&gt;
            &lt;xd:return&gt;
                &lt;xsl:apply-templates mode="section" select="*[local-name()='return']/node()"/&gt;
            &lt;/xd:return&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Matches all elements when in "section"-mode.&lt;/xd:short&gt;&lt;xd:detail&gt;
        
        Checks all child elements and their descendants and wraps and handles as is
            appropriate. If a child or descendant is placed in a problematic position, then one of
            the unwrap*-templates are called to solve the problem. Otherwise, just make sure that
            the element is in the correct namespace and copy it.
    &lt;/xd:detail&gt;&lt;xd:param name="wrapin-p"/&gt;&lt;xd:param name="wrapin-ul"/&gt;&lt;xd:param name="wrapin-li"/&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template mode="section" match="@*|node()"&gt;
        &lt;xsl:param name="wrapin-p" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-ul" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-li" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:variable name="is-empty" select="count(descendant-or-self::node()[self::text() and string-length(normalize-space())&amp;gt;0 or local-name()='pre'])=0"/&gt;
        &lt;xsl:variable name="contains-section" select="count(descendant::*[local-name()='section'])&amp;gt;0"/&gt;
        &lt;xsl:variable name="contains-block" select="count(descendant::*[local-name()='ul' or local-name()='li' or local-name()='pre' or local-name()='p'])&amp;gt;0"/&gt;
        &lt;xsl:variable name="contains-block-non-li" select="count(descendant::*[local-name()='ul' or local-name()='pre' or local-name()='p'])&amp;gt;0"/&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="local-name()='section'"&gt;
                &lt;xd:section&gt;
                    &lt;xsl:apply-templates mode="section" select="@*|node()"/&gt;
                &lt;/xd:section&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='p'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$contains-section or $contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-p" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:p&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:p&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='pre'"&gt;
                &lt;xd:pre&gt;
                    &lt;xsl:copy-of select="@*|node()"/&gt;
                &lt;/xd:pre&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='ul'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-section"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$contains-block-non-li"&gt;
                        &lt;xd:section&gt;
                            &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                                &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                            &lt;/xsl:call-template&gt;
                        &lt;/xd:section&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="count(descendant::*[local-name()='li'])=0"&gt;
                        &lt;xsl:choose&gt;
                            &lt;xsl:when test="count(child::node()[self::* or self::text() and string-length(normalize-space())&amp;gt;0])&amp;gt;1"&gt;
                                &lt;xd:section&gt;
                                    &lt;xsl:apply-templates mode="section" select="@*|node()"&gt;
                                        &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                                        &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                                    &lt;/xsl:apply-templates&gt;
                                &lt;/xd:section&gt;
                            &lt;/xsl:when&gt;
                            &lt;xsl:otherwise&gt;
                                &lt;xsl:apply-templates mode="section" select="@*|node()"&gt;
                                    &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                                &lt;/xsl:apply-templates&gt;
                            &lt;/xsl:otherwise&gt;
                        &lt;/xsl:choose&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:ul&gt;
                            &lt;xsl:apply-templates mode="list" select="@*|node()"&gt;
                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:ul&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='li'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-section"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:ul&gt;
                            &lt;xd:li&gt;
                                &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                            &lt;/xd:li&gt;
                        &lt;/xd:ul&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='b'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-section"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-b" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-b" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:b&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:b&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='i'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-section"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-i" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-i" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:i&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:i&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='a'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-section"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-a" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-a-elem" select="." tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-a" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-a-elem" select="." tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:a&gt;
                            &lt;xsl:apply-templates select="@*"/&gt;
                            &lt;xsl:apply-templates mode="phrase" select="node()"/&gt;
                        &lt;/xd:a&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="self::*"&gt;
                        &lt;xsl:choose&gt;
                            &lt;xsl:when test="not(preceding-sibling::*) and not(following-sibling::*)"&gt;
                                &lt;xsl:apply-templates mode="section" select="@*|node()"/&gt;
                            &lt;/xsl:when&gt;
                            &lt;xsl:otherwise&gt;
                                &lt;xd:section&gt;
                                    &lt;xsl:apply-templates mode="section" select="@*|node()"/&gt;
                                &lt;/xd:section&gt;
                            &lt;/xsl:otherwise&gt;
                        &lt;/xsl:choose&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="self::text()"&gt;
                        &lt;xsl:copy/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="section" select="@*|node()"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Handles non-problematic lists.&lt;/xd:short&gt;&lt;xd:param name="wrapin-p"/&gt;&lt;xd:param name="wrapin-ul"/&gt;&lt;xd:param name="wrapin-li"/&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template mode="list" match="@*|node()"&gt;
        &lt;xsl:param name="wrapin-p" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-ul" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-li" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:variable name="is-empty" select="count(descendant-or-self::node()[self::text() and string-length(normalize-space())&amp;gt;0 or local-name()='pre'])=0"/&gt;
        &lt;xsl:variable name="contains-block" select="count(descendant::*[local-name()='ul' or local-name()='li' or local-name()='pre' or local-name()='p'])&amp;gt;0"/&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="local-name()='li'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$wrapin-ul"&gt;
                        &lt;xd:ul&gt;
                            &lt;xd:li&gt;
                                &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                            &lt;/xd:li&gt;
                        &lt;/xd:ul&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:li&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:li&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="self::text()"&gt;
                        &lt;xsl:copy/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="list" select="@*|node()"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Handles all elements when in "block" mode and applies fixes where needed.&lt;/xd:short&gt;&lt;xd:param name="wrapin-p"/&gt;&lt;xd:param name="wrapin-ul"/&gt;&lt;xd:param name="wrapin-li"/&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template mode="block" match="@*|node()"&gt;
        &lt;xsl:param name="wrapin-p" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-ul" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-li" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:variable name="element" select="."/&gt;
        &lt;xsl:variable name="is-empty" select="count(descendant-or-self::node()[self::* or self::text() and string-length(normalize-space())&amp;gt;0])=0"/&gt;
        &lt;xsl:variable name="contains-block" select="count(descendant::*[local-name()='ul' or local-name()='li' or local-name()='pre' or local-name()='p'])&amp;gt;0"/&gt;
        &lt;xsl:variable name="contains-block-non-li" select="count(descendant::*[local-name()='ul' or local-name()='pre' or local-name()='p'])&amp;gt;0"/&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="local-name()='p'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:p&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:p&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='pre'"&gt;
                &lt;xd:pre&gt;
                    &lt;xsl:copy-of select="@*|node()"/&gt;
                &lt;/xd:pre&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='ul'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block-non-li"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="count(descendant::*[local-name()='li' and string-length(normalize-space(descendant-or-self::text()))&amp;gt;0])=0"&gt;
                        &lt;xsl:apply-templates mode="block" select="@*|node()"/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:ul&gt;
                            &lt;xsl:apply-templates mode="list" select="@*|node()"&gt;
                                &lt;xsl:with-param name="wrapin-ul" select="false()"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:ul&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='li'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:ul&gt;
                            &lt;xd:li&gt;
                                &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                                    &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                &lt;/xsl:apply-templates&gt;
                            &lt;/xd:li&gt;
                        &lt;/xd:ul&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="not($contains-block) and $wrapin-p"&gt;
                &lt;xd:p&gt;
                    &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                        &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                        &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                        &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                    &lt;/xsl:apply-templates&gt;
                &lt;/xd:p&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="not($contains-block) and $wrapin-li"&gt;
                &lt;xd:ul&gt;
                    &lt;xd:li&gt;
                        &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                            &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xd:li&gt;
                &lt;/xd:ul&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='b'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-b" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:b&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:b&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='i'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-i" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:i&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:i&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='a'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-a" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-a-elem" select="$element" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:a&gt;
                            &lt;xsl:apply-templates mode="phrase" select="$element/@*"/&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:a&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="self::text()"&gt;
                        &lt;xsl:copy/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="block" select="@*|node()"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Phrases are matched with this template (mode="phrase") and handled appropriately.&lt;/xd:short&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template mode="phrase" match="@*|node()"&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="local-name()='b'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='b'])"&gt;
                        &lt;xd:b&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:b&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="$wrapin-b"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='b'])"&gt;
                        &lt;xd:b&gt;
                            &lt;xsl:apply-templates mode="phrase" select="."&gt;
                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:b&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="."&gt;
                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='i'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='i'])"&gt;
                        &lt;xd:i&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:i&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="$wrapin-i"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='i'])"&gt;
                        &lt;xd:i&gt;
                            &lt;xsl:apply-templates mode="phrase" select="."&gt;
                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:i&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="."&gt;
                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='a'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='a'])"&gt;
                        &lt;xd:a&gt;
                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                            &lt;xsl:apply-templates mode="phrase" select="node()"&gt;
                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:a&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="$wrapin-a"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='a'])"&gt;
                        &lt;xd:a&gt;
                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                            &lt;xsl:apply-templates mode="phrase" select="."&gt;
                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:a&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="."&gt;
                            &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="self::text()"&gt;
                        &lt;xsl:copy/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;This template unwraps problematic elements into sections.&lt;/xd:short&gt;&lt;xd:param name="wasWrapped"/&gt;&lt;xd:param name="wrapin-p"/&gt;&lt;xd:param name="wrapin-ul"/&gt;&lt;xd:param name="wrapin-li"/&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="unwrap-to-sections"&gt;
        &lt;xsl:param name="wasWrapped" select="false()"/&gt;
        &lt;xsl:param name="wrapin-p" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-ul" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-li" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:variable name="element" select="."/&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="not($wasWrapped) and count(child::node()[self::* or self::text() and string-length(normalize-space())&amp;gt;0])&amp;gt;1"&gt;
                &lt;xd:section&gt;
                    &lt;xsl:call-template name="unwrap-to-sections"&gt;
                        &lt;xsl:with-param name="wasWrapped" select="true()"/&gt;
                    &lt;/xsl:call-template&gt;
                &lt;/xd:section&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
                &lt;xsl:for-each-group select="child::node()[self::* or self::text() and string-length(normalize-space())&amp;gt;0]" group-adjacent="self::* and not(ancestor::*[local-name()='pre']) and (local-name()='section' or local-name()='ul' or local-name()='li' or local-name()='pre' or local-name()='p')"&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="current-grouping-key()"&gt;
                            &lt;xsl:choose&gt;
                                &lt;xsl:when test="count(current-group())&amp;gt;1 and last()&amp;gt;1"&gt;
                                    &lt;xd:section&gt;
                                        &lt;xsl:apply-templates mode="section" select="current-group()"&gt;
                                            &lt;xsl:with-param name="wrapin-p" tunnel="yes" select="if ($wrapin-p or local-name($element)='p') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-ul" tunnel="yes" select="if ($wrapin-ul or local-name($element)='ul') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-li" tunnel="yes" select="if ($wrapin-li or local-name($element)='li') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-b" tunnel="yes" select="if ($wrapin-b or local-name($element)='b') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-i" tunnel="yes" select="if ($wrapin-i or local-name($element)='i') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-a" tunnel="yes" select="if ($wrapin-a or local-name($element)='a') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-a-elem" tunnel="yes" select="if (not($wrapin-a) and local-name($element)='a') then $element else false()"/&gt;
                                        &lt;/xsl:apply-templates&gt;
                                    &lt;/xd:section&gt;
                                &lt;/xsl:when&gt;
                                &lt;xsl:otherwise&gt;
                                    &lt;xsl:apply-templates mode="section" select="current-group()"&gt;
                                        &lt;xsl:with-param name="wrapin-p" tunnel="yes" select="if ($wrapin-p or local-name($element)='p') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-ul" tunnel="yes" select="if ($wrapin-ul or local-name($element)='ul') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-li" tunnel="yes" select="if ($wrapin-li or local-name($element)='li') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-b" tunnel="yes" select="if ($wrapin-b or local-name($element)='b') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-i" tunnel="yes" select="if ($wrapin-i or local-name($element)='i') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-a" tunnel="yes" select="if ($wrapin-a or local-name($element)='a') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-a-elem" tunnel="yes" select="if (not($wrapin-a) and local-name($element)='a') then $element else false()"/&gt;
                                    &lt;/xsl:apply-templates&gt;
                                &lt;/xsl:otherwise&gt;
                            &lt;/xsl:choose&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:element name="xd:{local-name($element)}"&gt;
                                &lt;xsl:for-each select="$element/@*"&gt;
                                    &lt;xsl:attribute name="xd:{local-name()}" select="."/&gt;
                                &lt;/xsl:for-each&gt;
                                &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                    &lt;xsl:with-param name="wrapin-p" tunnel="yes" select="if ($wrapin-p or local-name($element)='p') then false() else $wrapin-p"/&gt;
                                    &lt;xsl:with-param name="wrapin-ul" tunnel="yes" select="if ($wrapin-ul or local-name($element)='ul') then false() else $wrapin-ul"/&gt;
                                    &lt;xsl:with-param name="wrapin-li" tunnel="yes" select="if ($wrapin-li or local-name($element)='li') then false() else $wrapin-li"/&gt;
                                    &lt;xsl:with-param name="wrapin-b" tunnel="yes" select="if ($wrapin-b or local-name($element)='b') then false() else $wrapin-b"/&gt;
                                    &lt;xsl:with-param name="wrapin-i" tunnel="yes" select="if ($wrapin-i or local-name($element)='i') then false() else $wrapin-i"/&gt;
                                    &lt;xsl:with-param name="wrapin-a" tunnel="yes" select="if ($wrapin-a or local-name($element)='a') then false() else $wrapin-a"/&gt;
                                &lt;/xsl:apply-templates&gt;
                            &lt;/xsl:element&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xsl:for-each-group&gt;
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;This template unwraps problematic elements into blocks.&lt;/xd:short&gt;&lt;xd:param name="wrapin-p"/&gt;&lt;xd:param name="wrapin-ul"/&gt;&lt;xd:param name="wrapin-li"/&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="unwrap-to-blocks"&gt;
        &lt;xsl:param name="wrapin-p" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-ul" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-li" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:variable name="element" select="."/&gt;
        &lt;xsl:for-each-group select="child::node()[self::* or self::text() and string-length(normalize-space())&amp;gt;0]" group-adjacent="count(descendant-or-self::*[local-name()='ul' or local-name()='li' or local-name()='pre' or local-name()='p'])&amp;gt;0"&gt;
            &lt;xsl:choose&gt;
                &lt;xsl:when test="current-grouping-key()"&gt;
                    &lt;xsl:for-each select="current-group()"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-p" select="$wrapin-p or local-name()='p' or local-name($element)='p'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="$wrapin-ul or local-name()='ul' or local-name($element)='ul'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="$wrapin-li or local-name()='li' or local-name($element)='li'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-b" select="$wrapin-b or local-name()='b' or local-name($element)='b'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-i" select="$wrapin-i or local-name()='i' or local-name($element)='i'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-a" select="$wrapin-a or local-name()='a' or local-name($element)='a'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-a-elem" select="if (local-name()='a') then . else (if (local-name($element)='a') then $element else $wrapin-a-elem)" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:for-each&gt;
                &lt;/xsl:when&gt;
                &lt;xsl:otherwise&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="$wrapin-p"&gt;
                            &lt;xd:p&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="$wrapin-b"&gt;
                                        &lt;xd:b&gt;
                                            &lt;xsl:choose&gt;
                                                &lt;xsl:when test="$wrapin-i"&gt;
                                                  &lt;xd:i&gt;
                                                  &lt;xsl:choose&gt;
                                                  &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                  &lt;/xsl:when&gt;
                                                  &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xsl:otherwise&gt;
                                                  &lt;/xsl:choose&gt;
                                                  &lt;/xd:i&gt;
                                                &lt;/xsl:when&gt;
                                                &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                &lt;/xsl:otherwise&gt;
                                            &lt;/xsl:choose&gt;
                                        &lt;/xd:b&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:when test="$wrapin-i"&gt;
                                        &lt;xd:i&gt;
                                            &lt;xsl:choose&gt;
                                                &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                &lt;/xsl:when&gt;
                                                &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                &lt;/xsl:otherwise&gt;
                                            &lt;/xsl:choose&gt;
                                        &lt;/xd:i&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:when test="$wrapin-a"&gt;
                                        &lt;xd:a&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                            &lt;/xsl:apply-templates&gt;
                                        &lt;/xd:a&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                            &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                        &lt;/xsl:apply-templates&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xd:p&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="$wrapin-li"&gt;
                            &lt;xd:ul&gt;
                                &lt;xd:li&gt;
                                    &lt;xsl:choose&gt;
                                        &lt;xsl:when test="$wrapin-b"&gt;
                                            &lt;xd:b&gt;
                                                &lt;xsl:choose&gt;
                                                  &lt;xsl:when test="$wrapin-i"&gt;
                                                  &lt;xd:i&gt;
                                                  &lt;xsl:choose&gt;
                                                  &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                  &lt;/xsl:when&gt;
                                                  &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xsl:otherwise&gt;
                                                  &lt;/xsl:choose&gt;
                                                  &lt;/xd:i&gt;
                                                  &lt;/xsl:when&gt;
                                                  &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xsl:otherwise&gt;
                                                &lt;/xsl:choose&gt;
                                            &lt;/xd:b&gt;
                                        &lt;/xsl:when&gt;
                                        &lt;xsl:when test="$wrapin-i"&gt;
                                            &lt;xd:i&gt;
                                                &lt;xsl:choose&gt;
                                                  &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                  &lt;/xsl:when&gt;
                                                  &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xsl:otherwise&gt;
                                                &lt;/xsl:choose&gt;
                                            &lt;/xd:i&gt;
                                        &lt;/xsl:when&gt;
                                        &lt;xsl:when test="$wrapin-a"&gt;
                                            &lt;xd:a&gt;
                                                &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                &lt;/xsl:apply-templates&gt;
                                            &lt;/xd:a&gt;
                                        &lt;/xsl:when&gt;
                                        &lt;xsl:otherwise&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                            &lt;/xsl:apply-templates&gt;
                                        &lt;/xsl:otherwise&gt;
                                    &lt;/xsl:choose&gt;
                                &lt;/xd:li&gt;
                            &lt;/xd:ul&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="$wrapin-ul"&gt;
                            &lt;xd:p&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="$wrapin-b"&gt;
                                        &lt;xd:b&gt;
                                            &lt;xsl:choose&gt;
                                                &lt;xsl:when test="$wrapin-i"&gt;
                                                  &lt;xd:i&gt;
                                                  &lt;xsl:choose&gt;
                                                  &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                  &lt;/xsl:when&gt;
                                                  &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xsl:otherwise&gt;
                                                  &lt;/xsl:choose&gt;
                                                  &lt;/xd:i&gt;
                                                &lt;/xsl:when&gt;
                                                &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                &lt;/xsl:otherwise&gt;
                                            &lt;/xsl:choose&gt;
                                        &lt;/xd:b&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:when test="$wrapin-i"&gt;
                                        &lt;xd:i&gt;
                                            &lt;xsl:choose&gt;
                                                &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                &lt;/xsl:when&gt;
                                                &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                &lt;/xsl:otherwise&gt;
                                            &lt;/xsl:choose&gt;
                                        &lt;/xd:i&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:when test="$wrapin-a"&gt;
                                        &lt;xd:a&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                            &lt;/xsl:apply-templates&gt;
                                        &lt;/xd:a&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                            &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                        &lt;/xsl:apply-templates&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xd:p&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="$wrapin-b"&gt;
                            &lt;xd:b&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="$wrapin-i"&gt;
                                        &lt;xd:i&gt;
                                            &lt;xsl:choose&gt;
                                                &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                &lt;/xsl:when&gt;
                                                &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                &lt;/xsl:otherwise&gt;
                                            &lt;/xsl:choose&gt;
                                        &lt;/xd:i&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:when test="$wrapin-a"&gt;
                                        &lt;xd:a&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                            &lt;/xsl:apply-templates&gt;
                                        &lt;/xd:a&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                            &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                        &lt;/xsl:apply-templates&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xd:b&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="$wrapin-i"&gt;
                            &lt;xd:i&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="$wrapin-a"&gt;
                                        &lt;xd:a&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                            &lt;/xsl:apply-templates&gt;
                                        &lt;/xd:a&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                            &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                        &lt;/xsl:apply-templates&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xd:i&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="$wrapin-a"&gt;
                            &lt;xd:a&gt;
                                &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                    &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                &lt;/xsl:apply-templates&gt;
                            &lt;/xd:a&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xsl:otherwise&gt;
            &lt;/xsl:choose&gt;
        &lt;/xsl:for-each-group&gt;
    &lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;&lt;/codeblock&gt;
    &lt;xsl:template mode="phrase" match="@*|node()"&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="local-name()='b'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='b'])"&gt;
                        &lt;xd:b&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:b&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="$wrapin-b"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='b'])"&gt;
                        &lt;xd:b&gt;
                            &lt;xsl:apply-templates mode="phrase" select="."&gt;
                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:b&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="."&gt;
                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='i'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='i'])"&gt;
                        &lt;xd:i&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:i&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="$wrapin-i"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='i'])"&gt;
                        &lt;xd:i&gt;
                            &lt;xsl:apply-templates mode="phrase" select="."&gt;
                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:i&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="."&gt;
                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='a'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='a'])"&gt;
                        &lt;xd:a&gt;
                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                            &lt;xsl:apply-templates mode="phrase" select="node()"&gt;
                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:a&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="$wrapin-a"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='a'])"&gt;
                        &lt;xd:a&gt;
                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                            &lt;xsl:apply-templates mode="phrase" select="."&gt;
                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:a&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="."&gt;
                            &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="self::text()"&gt;
                        &lt;xsl:copy/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;codeblock&gt;&lt;xsl:stylesheet version="2.0"&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Identity template.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template match="@*|node()"&gt;
        &lt;xsl:copy&gt;
            &lt;xsl:apply-templates select="@*|node()"/&gt;
        &lt;/xsl:copy&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Matches each xd:doc element.&lt;/xd:short&gt;&lt;xd:detail&gt;
        
        Determines what code is being documented and calls appropriate templates for: &lt;xd:ul&gt;
                &lt;xd:li&gt;short description (xd:short)&lt;/xd:li&gt;
                &lt;xd:li&gt;detailed description (xd:detail)&lt;/xd:li&gt;
                &lt;xd:li&gt;authors (xd:author)&lt;/xd:li&gt;
                &lt;xd:li&gt;contributors (xd:contributor)&lt;/xd:li&gt;
                &lt;xd:li&gt;maintainers (xd:maintainer)&lt;/xd:li&gt;
                &lt;xd:li&gt;copyright (xd:copyright)&lt;/xd:li&gt;
                &lt;xd:li&gt;version (xd:version)&lt;/xd:li&gt;
                &lt;xd:li&gt;code existed since version (xd:since)&lt;/xd:li&gt;
                &lt;xd:li&gt;see also (xd:see)&lt;/xd:li&gt;
                &lt;xd:li&gt;deprecated since version (xd:deprecated)&lt;/xd:li&gt;
                &lt;xd:li&gt;import statements (xd:import and xsl:import)&lt;/xd:li&gt;
                &lt;xd:li&gt;include statements (xd:include and xsl:include)&lt;/xd:li&gt;
                &lt;xd:li&gt;parameters (xd:param and xsl:param)&lt;/xd:li&gt;
                &lt;xd:li&gt;return values / output (xd:return)&lt;/xd:li&gt;
            &lt;/xd:ul&gt;
        
        
    &lt;/xd:detail&gt;&lt;xd:return&gt;The normalized xd:doc.&lt;/xd:return&gt;&lt;/xd:doc&gt;
    &lt;xsl:template match="xd:doc"&gt;
        &lt;xsl:copy&gt;
            &lt;xsl:variable name="target"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="@target"&gt;
                        &lt;xsl:value-of select="@target"/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="count(preceding-sibling::*)=0"&gt;
                        &lt;xsl:value-of select="'parent'"/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:value-of select="'following'"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:variable&gt;
            &lt;xsl:variable name="code" select="if ($target='parent') then parent::* else following-sibling::*[1]"/&gt;

            &lt;xsl:attribute name="target" select="$target"/&gt;

            &lt;xsl:call-template name="short"/&gt;
            &lt;xsl:call-template name="detail"/&gt;
            &lt;xsl:call-template name="authors"/&gt;
            &lt;xsl:call-template name="contributors"/&gt;
            &lt;xsl:call-template name="maintainers"/&gt;
            &lt;xsl:call-template name="copyright"/&gt;
            &lt;xsl:call-template name="version"/&gt;
            &lt;xsl:call-template name="since"/&gt;
            &lt;xsl:call-template name="see"/&gt;
            &lt;xsl:call-template name="deprecated"/&gt;
            &lt;xsl:call-template name="import"&gt;
                &lt;xsl:with-param name="code" select="$code"/&gt;
            &lt;/xsl:call-template&gt;
            &lt;xsl:call-template name="include"&gt;
                &lt;xsl:with-param name="code" select="$code"/&gt;
            &lt;/xsl:call-template&gt;
            &lt;xsl:call-template name="param"&gt;
                &lt;xsl:with-param name="code" select="$code"/&gt;
            &lt;/xsl:call-template&gt;
            &lt;xsl:call-template name="return"/&gt;
        &lt;/xsl:copy&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Determines the short description.&lt;/xd:short&gt;&lt;xd:detail&gt;
        
        
            &lt;xd:ul&gt;
                &lt;xd:li&gt;If there is no &amp;lt;xd:short/&amp;gt;-element present, but plain text is present as a
                    child of the &amp;lt;xd:doc/&amp;gt;element, then the first sentence from that text (up
                    until the first period (".") will be used as a short description.&lt;/xd:li&gt;
                &lt;xd:li&gt;Else; if there are multiple &amp;lt;xd:short/&amp;gt;-elements, each one of their
                    contents will be wrapped in separate &amp;lt;section/&amp;gt;s.&lt;/xd:li&gt;
                &lt;xd:li&gt;Else; use the one &amp;lt;xd:short/&amp;gt;-element that is present for the short
                    description.&lt;/xd:li&gt;
            &lt;/xd:ul&gt;
        
    &lt;/xd:detail&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="short"&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="count(child::*[local-name()='short'])&amp;gt;1"&gt;
                &lt;xd:short&gt;
                    &lt;xsl:for-each select="child::*[local-name()='short']"&gt;
                        &lt;xd:section&gt;
                            &lt;xsl:apply-templates mode="section"/&gt;
                        &lt;/xd:section&gt;
                    &lt;/xsl:for-each&gt;
                &lt;/xd:short&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="count(child::*[local-name()='short'])=1"&gt;
                &lt;xd:short&gt;
                    &lt;xsl:apply-templates select="child::*[local-name()='short']/node()" mode="section"/&gt;
                &lt;/xd:short&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="child::text()[string-length(normalize-space())&amp;gt;0]"&gt;
                &lt;xsl:variable name="short" select="replace(normalize-space(child::text()[1]),'^([^\.]+\.?)\s?.*$','$1')"/&gt;
                &lt;xd:short&gt;
                    &lt;xsl:value-of select="$short"/&gt;
                &lt;/xd:short&gt;
            &lt;/xsl:when&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Determines the detailed description.&lt;/xd:short&gt;&lt;xd:detail&gt;
        
        The detailed description will be put together based on any number of
            &amp;lt;xd:detail/&amp;gt;-elements, as well as any number of text nodes that are direct
            children of the &amp;lt;xd:doc/&amp;gt;-element. If the xd:short was extracted from the first
            text node, then the first sentence from that text node will be ignored. If there are
            multiple &amp;lt;xd:detail/&amp;gt; and text nodes, then each of them will be wrapped in
            &amp;lt;xd:section/&amp;gt;s.
    &lt;/xd:detail&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="detail"&gt;
        &lt;xsl:variable name="shortInFirstText" select="count(./*[local-name()='short'])=0"/&gt;
        &lt;xsl:variable name="detailCount" select="(if (matches(normalize-space(./text()[1]),'\.[^\.].')) then 1 else 0) + count(*[local-name()='detail' and (descendant-or-self::node()[self::text() and string-length(normalize-space())&amp;gt;0 or local-name()='pre' and not(ancestor::*[local-name()='pre'])])]) + count(./text()[not(position()=1) and string-length(normalize-space())&amp;gt;0])"/&gt;
        &lt;xsl:if test="$detailCount&amp;gt;0"&gt;
            &lt;xd:detail&gt;
                &lt;xsl:for-each select="*|text()"&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="self::text() and count(preceding-sibling::text()[string-length(normalize-space())&amp;gt;0])=0"&gt;
                            &lt;!-- first text --&gt;
                            &lt;xsl:choose&gt;
                                &lt;xsl:when test="$shortInFirstText"&gt;
                                    &lt;xsl:variable name="detail" select="replace(normalize-space(),'^[^\.]+.?\s?(.*)$','$1')"/&gt;
                                    &lt;xsl:choose&gt;
                                        &lt;xsl:when test="$detailCount&amp;gt;1"&gt;
                                            &lt;xd:section&gt;
                                                &lt;xsl:value-of select="$detail"/&gt;
                                            &lt;/xd:section&gt;
                                        &lt;/xsl:when&gt;
                                        &lt;xsl:otherwise&gt;
                                            &lt;xsl:value-of select="$detail"/&gt;
                                        &lt;/xsl:otherwise&gt;
                                    &lt;/xsl:choose&gt;
                                &lt;/xsl:when&gt;
                                &lt;xsl:otherwise&gt;
                                    &lt;xsl:choose&gt;
                                        &lt;xsl:when test="$detailCount&amp;gt;1"&gt;
                                            &lt;xd:section&gt;
                                                &lt;xsl:value-of select="."/&gt;
                                            &lt;/xd:section&gt;
                                        &lt;/xsl:when&gt;
                                        &lt;xsl:otherwise&gt;
                                            &lt;xsl:value-of select="."/&gt;
                                        &lt;/xsl:otherwise&gt;
                                    &lt;/xsl:choose&gt;
                                &lt;/xsl:otherwise&gt;
                            &lt;/xsl:choose&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="self::text()"&gt;
                            &lt;!-- non-first text --&gt;
                            &lt;xsl:choose&gt;
                                &lt;xsl:when test="$detailCount&amp;gt;1"&gt;
                                    &lt;xd:section&gt;
                                        &lt;xsl:value-of select="."/&gt;
                                    &lt;/xd:section&gt;
                                &lt;/xsl:when&gt;
                                &lt;xsl:otherwise&gt;
                                    &lt;xsl:value-of select="."/&gt;
                                &lt;/xsl:otherwise&gt;
                            &lt;/xsl:choose&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="local-name()='detail'"&gt;
                            &lt;!-- detail element --&gt;
                            &lt;xsl:choose&gt;
                                &lt;xsl:when test="$detailCount&amp;gt;1"&gt;
                                    &lt;xd:section&gt;
                                        &lt;xsl:apply-templates select="child::node()" mode="section"/&gt;
                                    &lt;/xd:section&gt;
                                &lt;/xsl:when&gt;
                                &lt;xsl:otherwise&gt;
                                    &lt;xsl:apply-templates select="child::node()" mode="section"/&gt;
                                &lt;/xsl:otherwise&gt;
                            &lt;/xsl:choose&gt;
                        &lt;/xsl:when&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xsl:for-each&gt;
            &lt;/xd:detail&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes the xd:author-elements.&lt;/xd:short&gt;&lt;xd:detail&gt;&amp;gt;xd:author/&amp;lt;s with no text are removed. &amp;lt;xd:author/&amp;gt;s with no child elements will have their text content wrapped in a &amp;lt;xd:name/&amp;gt; element. Children other than xd:name, xd:mailto and xd:organization are ignored.&lt;/xd:detail&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="authors" xml:id="authors"&gt;
        &lt;xsl:for-each select="*[local-name()='author']"&gt;
            &lt;xsl:variable name="is-empty" select="count(descendant-or-self::text()[string-length(normalize-space())&amp;gt;0])=0"/&gt;
            &lt;xsl:if test="not($is-empty)"&gt;
                &lt;xd:author&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="count(child::*)=0"&gt;
                            &lt;xd:name&gt;
                                &lt;xsl:value-of select="."/&gt;
                            &lt;/xd:name&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:if test="child::*[local-name()='name']"&gt;
                                &lt;xd:name&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='name']"/&gt;
                                &lt;/xd:name&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='mailto']"&gt;
                                &lt;xd:mailto&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='mailto']"/&gt;
                                &lt;/xd:mailto&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='organization']"&gt;
                                &lt;xd:organization&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='organization']"/&gt;
                                &lt;/xd:organization&gt;
                            &lt;/xsl:if&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xd:author&gt;
            &lt;/xsl:if&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;&amp;lt;xd:contributor/&amp;gt;s are normalized in the same way as &amp;lt;xd:author/&amp;gt;s&lt;/xd:short&gt;&lt;xd:see&gt;#authors&lt;/xd:see&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="contributors"&gt;
        &lt;xsl:for-each select="*[local-name()='contributor']"&gt;
            &lt;xsl:variable name="is-empty" select="count(descendant-or-self::text()[string-length(normalize-space())&amp;gt;0])=0"/&gt;
            &lt;xsl:if test="not($is-empty)"&gt;
                &lt;xd:contributor&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="count(child::*)=0"&gt;
                            &lt;xd:name&gt;
                                &lt;xsl:value-of select="."/&gt;
                            &lt;/xd:name&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:if test="child::*[local-name()='name']"&gt;
                                &lt;xd:name&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='name']"/&gt;
                                &lt;/xd:name&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='mailto']"&gt;
                                &lt;xd:mailto&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='mailto']"/&gt;
                                &lt;/xd:mailto&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='organization']"&gt;
                                &lt;xd:organization&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='organization']"/&gt;
                                &lt;/xd:organization&gt;
                            &lt;/xsl:if&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xd:contributor&gt;
            &lt;/xsl:if&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;&amp;lt;xd:maintainer/&amp;gt;s are normalized in the same way as &amp;lt;xd:author/&amp;gt;s&lt;/xd:short&gt;&lt;xd:see&gt;#authors&lt;/xd:see&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="maintainers"&gt;
        &lt;xsl:for-each select="*[local-name()='maintainer']"&gt;
            &lt;xsl:variable name="is-empty" select="count(descendant-or-self::text()[string-length(normalize-space())&amp;gt;0])=0"/&gt;
            &lt;xsl:if test="not($is-empty)"&gt;
                &lt;xd:maintainer&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="count(child::*)=0"&gt;
                            &lt;xd:name&gt;
                                &lt;xsl:value-of select="."/&gt;
                            &lt;/xd:name&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:if test="child::*[local-name()='name']"&gt;
                                &lt;xd:name&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='name']"/&gt;
                                &lt;/xd:name&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='mailto']"&gt;
                                &lt;xd:mailto&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='mailto']"/&gt;
                                &lt;/xd:mailto&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='organization']"&gt;
                                &lt;xd:organization&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='organization']"/&gt;
                                &lt;/xd:organization&gt;
                            &lt;/xsl:if&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xd:maintainer&gt;
            &lt;/xsl:if&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes the xd:copyright-element.&lt;/xd:short&gt;&lt;xd:detail&gt;&amp;gt;xd:copyright/&amp;lt;s with no text are removed. &amp;lt;xd:copyright/&amp;gt;s with no child elements will have their text content wrapped in a &amp;lt;xd:name/&amp;gt; element. Children other than xd:year, xd:name, xd:mailto and xd:organization are ignored.&lt;/xd:detail&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="copyright"&gt;
        &lt;xsl:for-each select="*[local-name()='copyright']"&gt;
            &lt;xsl:variable name="is-empty" select="count(descendant-or-self::text()[string-length(normalize-space())&amp;gt;0])=0"/&gt;
            &lt;xsl:if test="not($is-empty)"&gt;
                &lt;xd:copyright&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="count(child::*)=0"&gt;
                            &lt;xd:name&gt;
                                &lt;xsl:value-of select="."/&gt;
                            &lt;/xd:name&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:if test="child::*[local-name()='year']"&gt;
                                &lt;xd:year&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='year']"/&gt;
                                &lt;/xd:year&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='name']"&gt;
                                &lt;xd:name&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='name']"/&gt;
                                &lt;/xd:name&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='mailto']"&gt;
                                &lt;xd:mailto&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='mailto']"/&gt;
                                &lt;/xd:mailto&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='organization']"&gt;
                                &lt;xd:organization&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='organization']"/&gt;
                                &lt;/xd:organization&gt;
                            &lt;/xsl:if&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xd:copyright&gt;
            &lt;/xsl:if&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:version elements.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="version"&gt;
        &lt;xsl:if test="child::*[local-name()='version' and string-length(normalize-space(./text()))&amp;gt;0]"&gt;
            &lt;xd:version&gt;
                &lt;xsl:value-of select="child::*[local-name()='version' and string-length(normalize-space(./text()))&amp;gt;0]"/&gt;
            &lt;/xd:version&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:since elements.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="since"&gt;
        &lt;xsl:if test="child::*[local-name()='since' and string-length(normalize-space(./text()))&amp;gt;0]"&gt;
            &lt;xd:since&gt;
                &lt;xsl:value-of select="child::*[local-name()='since' and string-length(normalize-space(./text()))&amp;gt;0]"/&gt;
            &lt;/xd:since&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:see elements.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="see"&gt;
        &lt;xsl:if test="child::*[local-name()='see' and string-length(normalize-space(./text()))&amp;gt;0]"&gt;
            &lt;xd:see&gt;
                &lt;xsl:value-of select="child::*[local-name()='see' and string-length(normalize-space(./text()))&amp;gt;0]"/&gt;
            &lt;/xd:see&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:deprecated elements.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="deprecated"&gt;
        &lt;xsl:if test="child::*[local-name()='deprecated' and string-length(normalize-space(./text()))&amp;gt;0]"&gt;
            &lt;xd:deprecated&gt;
                &lt;xsl:value-of select="child::*[local-name()='deprecated' and string-length(normalize-space(./text()))&amp;gt;0]"/&gt;
            &lt;/xd:deprecated&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:import elements.&lt;/xd:short&gt;&lt;xd:detail&gt;Will create empty documentation for imports that are not documented, and removes documentation of imports that does not exist in the code.&lt;/xd:detail&gt;&lt;xd:param name="code"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="import"&gt;
        &lt;xsl:param name="code" required="yes"/&gt;
        &lt;xsl:variable name="doc" select="."/&gt;
        &lt;xsl:for-each select="$code/xsl:import"&gt;
            &lt;xsl:variable name="href" select="@href"/&gt;
            &lt;xd:import href="{@href}"&gt;
                &lt;xsl:if test="$doc/*[local-name()='import' and @href=$href]"&gt;
                    &lt;xsl:value-of select="$doc/*[local-name()='import' and @href=$href]"/&gt;
                &lt;/xsl:if&gt;
            &lt;/xd:import&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:include elements.&lt;/xd:short&gt;&lt;xd:detail&gt;Will create empty documentation for includes that are not documented, and removes documentation of includes that does not exist in the code.&lt;/xd:detail&gt;&lt;xd:param name="code"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="include"&gt;
        &lt;xsl:param name="code" required="yes"/&gt;
        &lt;xsl:variable name="doc" select="."/&gt;
        &lt;xsl:for-each select="$code/xsl:include"&gt;
            &lt;xsl:variable name="href" select="@href"/&gt;
            &lt;xd:include href="{@href}"&gt;
                &lt;xsl:if test="$doc/*[local-name()='include' and @href=$href]"&gt;
                    &lt;xsl:value-of select="$doc/*[local-name()='include' and @href=$href]"/&gt;
                &lt;/xsl:if&gt;
            &lt;/xd:include&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:import elements.&lt;/xd:short&gt;&lt;xd:detail&gt;Will create empty documentation for imports that are not documented, and removes documentation of imports that does not exist in the code.&lt;/xd:detail&gt;&lt;xd:param name="code"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="param"&gt;
        &lt;xsl:param name="code" required="yes"/&gt;
        &lt;xsl:variable name="doc" select="."/&gt;
        &lt;xsl:for-each select="*[local-name()='param']"&gt;
            &lt;xd:param&gt;
                &lt;xsl:apply-templates select="@*"/&gt;
                &lt;xsl:apply-templates mode="section" select="node()"/&gt;
            &lt;/xd:param&gt;
        &lt;/xsl:for-each&gt;
        &lt;xsl:for-each select="$code/xsl:param"&gt;
            &lt;xsl:variable name="name" select="@name"/&gt;
            &lt;xsl:if test="not($doc/*[local-name()='param' and @name=$name])"&gt;
                &lt;xd:param name="{@name}"/&gt;
            &lt;/xsl:if&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Describes the result of the code.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="return"&gt;
        &lt;xsl:variable name="is-empty" select="count(*[local-name()='return']/descendant-or-self::node()[self::text() and string-length(normalize-space())&amp;gt;0 or local-name()='pre'])=0"/&gt;
        &lt;xsl:if test="not($is-empty)"&gt;
            &lt;xd:return&gt;
                &lt;xsl:apply-templates mode="section" select="*[local-name()='return']/node()"/&gt;
            &lt;/xd:return&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Matches all elements when in "section"-mode.&lt;/xd:short&gt;&lt;xd:detail&gt;
        
        Checks all child elements and their descendants and wraps and handles as is
            appropriate. If a child or descendant is placed in a problematic position, then one of
            the unwrap*-templates are called to solve the problem. Otherwise, just make sure that
            the element is in the correct namespace and copy it.
    &lt;/xd:detail&gt;&lt;xd:param name="wrapin-p"/&gt;&lt;xd:param name="wrapin-ul"/&gt;&lt;xd:param name="wrapin-li"/&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template mode="section" match="@*|node()"&gt;
        &lt;xsl:param name="wrapin-p" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-ul" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-li" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:variable name="is-empty" select="count(descendant-or-self::node()[self::text() and string-length(normalize-space())&amp;gt;0 or local-name()='pre'])=0"/&gt;
        &lt;xsl:variable name="contains-section" select="count(descendant::*[local-name()='section'])&amp;gt;0"/&gt;
        &lt;xsl:variable name="contains-block" select="count(descendant::*[local-name()='ul' or local-name()='li' or local-name()='pre' or local-name()='p'])&amp;gt;0"/&gt;
        &lt;xsl:variable name="contains-block-non-li" select="count(descendant::*[local-name()='ul' or local-name()='pre' or local-name()='p'])&amp;gt;0"/&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="local-name()='section'"&gt;
                &lt;xd:section&gt;
                    &lt;xsl:apply-templates mode="section" select="@*|node()"/&gt;
                &lt;/xd:section&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='p'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$contains-section or $contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-p" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:p&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:p&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='pre'"&gt;
                &lt;xd:pre&gt;
                    &lt;xsl:copy-of select="@*|node()"/&gt;
                &lt;/xd:pre&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='ul'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-section"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$contains-block-non-li"&gt;
                        &lt;xd:section&gt;
                            &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                                &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                            &lt;/xsl:call-template&gt;
                        &lt;/xd:section&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="count(descendant::*[local-name()='li'])=0"&gt;
                        &lt;xsl:choose&gt;
                            &lt;xsl:when test="count(child::node()[self::* or self::text() and string-length(normalize-space())&amp;gt;0])&amp;gt;1"&gt;
                                &lt;xd:section&gt;
                                    &lt;xsl:apply-templates mode="section" select="@*|node()"&gt;
                                        &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                                        &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                                    &lt;/xsl:apply-templates&gt;
                                &lt;/xd:section&gt;
                            &lt;/xsl:when&gt;
                            &lt;xsl:otherwise&gt;
                                &lt;xsl:apply-templates mode="section" select="@*|node()"&gt;
                                    &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                                &lt;/xsl:apply-templates&gt;
                            &lt;/xsl:otherwise&gt;
                        &lt;/xsl:choose&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:ul&gt;
                            &lt;xsl:apply-templates mode="list" select="@*|node()"&gt;
                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:ul&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='li'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-section"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:ul&gt;
                            &lt;xd:li&gt;
                                &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                            &lt;/xd:li&gt;
                        &lt;/xd:ul&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='b'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-section"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-b" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-b" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:b&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:b&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='i'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-section"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-i" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-i" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:i&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:i&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='a'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-section"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-a" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-a-elem" select="." tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-a" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-a-elem" select="." tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:a&gt;
                            &lt;xsl:apply-templates select="@*"/&gt;
                            &lt;xsl:apply-templates mode="phrase" select="node()"/&gt;
                        &lt;/xd:a&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="self::*"&gt;
                        &lt;xsl:choose&gt;
                            &lt;xsl:when test="not(preceding-sibling::*) and not(following-sibling::*)"&gt;
                                &lt;xsl:apply-templates mode="section" select="@*|node()"/&gt;
                            &lt;/xsl:when&gt;
                            &lt;xsl:otherwise&gt;
                                &lt;xd:section&gt;
                                    &lt;xsl:apply-templates mode="section" select="@*|node()"/&gt;
                                &lt;/xd:section&gt;
                            &lt;/xsl:otherwise&gt;
                        &lt;/xsl:choose&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="self::text()"&gt;
                        &lt;xsl:copy/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="section" select="@*|node()"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Handles non-problematic lists.&lt;/xd:short&gt;&lt;xd:param name="wrapin-p"/&gt;&lt;xd:param name="wrapin-ul"/&gt;&lt;xd:param name="wrapin-li"/&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template mode="list" match="@*|node()"&gt;
        &lt;xsl:param name="wrapin-p" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-ul" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-li" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:variable name="is-empty" select="count(descendant-or-self::node()[self::text() and string-length(normalize-space())&amp;gt;0 or local-name()='pre'])=0"/&gt;
        &lt;xsl:variable name="contains-block" select="count(descendant::*[local-name()='ul' or local-name()='li' or local-name()='pre' or local-name()='p'])&amp;gt;0"/&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="local-name()='li'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$wrapin-ul"&gt;
                        &lt;xd:ul&gt;
                            &lt;xd:li&gt;
                                &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                            &lt;/xd:li&gt;
                        &lt;/xd:ul&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:li&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:li&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="self::text()"&gt;
                        &lt;xsl:copy/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="list" select="@*|node()"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Handles all elements when in "block" mode and applies fixes where needed.&lt;/xd:short&gt;&lt;xd:param name="wrapin-p"/&gt;&lt;xd:param name="wrapin-ul"/&gt;&lt;xd:param name="wrapin-li"/&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template mode="block" match="@*|node()"&gt;
        &lt;xsl:param name="wrapin-p" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-ul" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-li" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:variable name="element" select="."/&gt;
        &lt;xsl:variable name="is-empty" select="count(descendant-or-self::node()[self::* or self::text() and string-length(normalize-space())&amp;gt;0])=0"/&gt;
        &lt;xsl:variable name="contains-block" select="count(descendant::*[local-name()='ul' or local-name()='li' or local-name()='pre' or local-name()='p'])&amp;gt;0"/&gt;
        &lt;xsl:variable name="contains-block-non-li" select="count(descendant::*[local-name()='ul' or local-name()='pre' or local-name()='p'])&amp;gt;0"/&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="local-name()='p'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:p&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:p&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='pre'"&gt;
                &lt;xd:pre&gt;
                    &lt;xsl:copy-of select="@*|node()"/&gt;
                &lt;/xd:pre&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='ul'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block-non-li"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="count(descendant::*[local-name()='li' and string-length(normalize-space(descendant-or-self::text()))&amp;gt;0])=0"&gt;
                        &lt;xsl:apply-templates mode="block" select="@*|node()"/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:ul&gt;
                            &lt;xsl:apply-templates mode="list" select="@*|node()"&gt;
                                &lt;xsl:with-param name="wrapin-ul" select="false()"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:ul&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='li'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:ul&gt;
                            &lt;xd:li&gt;
                                &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                                    &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                &lt;/xsl:apply-templates&gt;
                            &lt;/xd:li&gt;
                        &lt;/xd:ul&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="not($contains-block) and $wrapin-p"&gt;
                &lt;xd:p&gt;
                    &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                        &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                        &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                        &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                    &lt;/xsl:apply-templates&gt;
                &lt;/xd:p&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="not($contains-block) and $wrapin-li"&gt;
                &lt;xd:ul&gt;
                    &lt;xd:li&gt;
                        &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                            &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xd:li&gt;
                &lt;/xd:ul&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='b'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-b" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:b&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:b&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='i'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-i" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:i&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:i&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='a'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-a" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-a-elem" select="$element" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:a&gt;
                            &lt;xsl:apply-templates mode="phrase" select="$element/@*"/&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:a&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="self::text()"&gt;
                        &lt;xsl:copy/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="block" select="@*|node()"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Phrases are matched with this template (mode="phrase") and handled appropriately.&lt;/xd:short&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template mode="phrase" match="@*|node()"&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="local-name()='b'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='b'])"&gt;
                        &lt;xd:b&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:b&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="$wrapin-b"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='b'])"&gt;
                        &lt;xd:b&gt;
                            &lt;xsl:apply-templates mode="phrase" select="."&gt;
                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:b&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="."&gt;
                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='i'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='i'])"&gt;
                        &lt;xd:i&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:i&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="$wrapin-i"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='i'])"&gt;
                        &lt;xd:i&gt;
                            &lt;xsl:apply-templates mode="phrase" select="."&gt;
                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:i&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="."&gt;
                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='a'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='a'])"&gt;
                        &lt;xd:a&gt;
                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                            &lt;xsl:apply-templates mode="phrase" select="node()"&gt;
                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:a&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="$wrapin-a"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='a'])"&gt;
                        &lt;xd:a&gt;
                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                            &lt;xsl:apply-templates mode="phrase" select="."&gt;
                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:a&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="."&gt;
                            &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="self::text()"&gt;
                        &lt;xsl:copy/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;This template unwraps problematic elements into sections.&lt;/xd:short&gt;&lt;xd:param name="wasWrapped"/&gt;&lt;xd:param name="wrapin-p"/&gt;&lt;xd:param name="wrapin-ul"/&gt;&lt;xd:param name="wrapin-li"/&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="unwrap-to-sections"&gt;
        &lt;xsl:param name="wasWrapped" select="false()"/&gt;
        &lt;xsl:param name="wrapin-p" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-ul" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-li" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:variable name="element" select="."/&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="not($wasWrapped) and count(child::node()[self::* or self::text() and string-length(normalize-space())&amp;gt;0])&amp;gt;1"&gt;
                &lt;xd:section&gt;
                    &lt;xsl:call-template name="unwrap-to-sections"&gt;
                        &lt;xsl:with-param name="wasWrapped" select="true()"/&gt;
                    &lt;/xsl:call-template&gt;
                &lt;/xd:section&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
                &lt;xsl:for-each-group select="child::node()[self::* or self::text() and string-length(normalize-space())&amp;gt;0]" group-adjacent="self::* and not(ancestor::*[local-name()='pre']) and (local-name()='section' or local-name()='ul' or local-name()='li' or local-name()='pre' or local-name()='p')"&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="current-grouping-key()"&gt;
                            &lt;xsl:choose&gt;
                                &lt;xsl:when test="count(current-group())&amp;gt;1 and last()&amp;gt;1"&gt;
                                    &lt;xd:section&gt;
                                        &lt;xsl:apply-templates mode="section" select="current-group()"&gt;
                                            &lt;xsl:with-param name="wrapin-p" tunnel="yes" select="if ($wrapin-p or local-name($element)='p') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-ul" tunnel="yes" select="if ($wrapin-ul or local-name($element)='ul') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-li" tunnel="yes" select="if ($wrapin-li or local-name($element)='li') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-b" tunnel="yes" select="if ($wrapin-b or local-name($element)='b') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-i" tunnel="yes" select="if ($wrapin-i or local-name($element)='i') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-a" tunnel="yes" select="if ($wrapin-a or local-name($element)='a') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-a-elem" tunnel="yes" select="if (not($wrapin-a) and local-name($element)='a') then $element else false()"/&gt;
                                        &lt;/xsl:apply-templates&gt;
                                    &lt;/xd:section&gt;
                                &lt;/xsl:when&gt;
                                &lt;xsl:otherwise&gt;
                                    &lt;xsl:apply-templates mode="section" select="current-group()"&gt;
                                        &lt;xsl:with-param name="wrapin-p" tunnel="yes" select="if ($wrapin-p or local-name($element)='p') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-ul" tunnel="yes" select="if ($wrapin-ul or local-name($element)='ul') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-li" tunnel="yes" select="if ($wrapin-li or local-name($element)='li') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-b" tunnel="yes" select="if ($wrapin-b or local-name($element)='b') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-i" tunnel="yes" select="if ($wrapin-i or local-name($element)='i') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-a" tunnel="yes" select="if ($wrapin-a or local-name($element)='a') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-a-elem" tunnel="yes" select="if (not($wrapin-a) and local-name($element)='a') then $element else false()"/&gt;
                                    &lt;/xsl:apply-templates&gt;
                                &lt;/xsl:otherwise&gt;
                            &lt;/xsl:choose&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:element name="xd:{local-name($element)}"&gt;
                                &lt;xsl:for-each select="$element/@*"&gt;
                                    &lt;xsl:attribute name="xd:{local-name()}" select="."/&gt;
                                &lt;/xsl:for-each&gt;
                                &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                    &lt;xsl:with-param name="wrapin-p" tunnel="yes" select="if ($wrapin-p or local-name($element)='p') then false() else $wrapin-p"/&gt;
                                    &lt;xsl:with-param name="wrapin-ul" tunnel="yes" select="if ($wrapin-ul or local-name($element)='ul') then false() else $wrapin-ul"/&gt;
                                    &lt;xsl:with-param name="wrapin-li" tunnel="yes" select="if ($wrapin-li or local-name($element)='li') then false() else $wrapin-li"/&gt;
                                    &lt;xsl:with-param name="wrapin-b" tunnel="yes" select="if ($wrapin-b or local-name($element)='b') then false() else $wrapin-b"/&gt;
                                    &lt;xsl:with-param name="wrapin-i" tunnel="yes" select="if ($wrapin-i or local-name($element)='i') then false() else $wrapin-i"/&gt;
                                    &lt;xsl:with-param name="wrapin-a" tunnel="yes" select="if ($wrapin-a or local-name($element)='a') then false() else $wrapin-a"/&gt;
                                &lt;/xsl:apply-templates&gt;
                            &lt;/xsl:element&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xsl:for-each-group&gt;
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;This template unwraps problematic elements into blocks.&lt;/xd:short&gt;&lt;xd:param name="wrapin-p"/&gt;&lt;xd:param name="wrapin-ul"/&gt;&lt;xd:param name="wrapin-li"/&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="unwrap-to-blocks"&gt;
        &lt;xsl:param name="wrapin-p" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-ul" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-li" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:variable name="element" select="."/&gt;
        &lt;xsl:for-each-group select="child::node()[self::* or self::text() and string-length(normalize-space())&amp;gt;0]" group-adjacent="count(descendant-or-self::*[local-name()='ul' or local-name()='li' or local-name()='pre' or local-name()='p'])&amp;gt;0"&gt;
            &lt;xsl:choose&gt;
                &lt;xsl:when test="current-grouping-key()"&gt;
                    &lt;xsl:for-each select="current-group()"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-p" select="$wrapin-p or local-name()='p' or local-name($element)='p'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="$wrapin-ul or local-name()='ul' or local-name($element)='ul'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="$wrapin-li or local-name()='li' or local-name($element)='li'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-b" select="$wrapin-b or local-name()='b' or local-name($element)='b'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-i" select="$wrapin-i or local-name()='i' or local-name($element)='i'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-a" select="$wrapin-a or local-name()='a' or local-name($element)='a'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-a-elem" select="if (local-name()='a') then . else (if (local-name($element)='a') then $element else $wrapin-a-elem)" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:for-each&gt;
                &lt;/xsl:when&gt;
                &lt;xsl:otherwise&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="$wrapin-p"&gt;
                            &lt;xd:p&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="$wrapin-b"&gt;
                                        &lt;xd:b&gt;
                                            &lt;xsl:choose&gt;
                                                &lt;xsl:when test="$wrapin-i"&gt;
                                                  &lt;xd:i&gt;
                                                  &lt;xsl:choose&gt;
                                                  &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                  &lt;/xsl:when&gt;
                                                  &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xsl:otherwise&gt;
                                                  &lt;/xsl:choose&gt;
                                                  &lt;/xd:i&gt;
                                                &lt;/xsl:when&gt;
                                                &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                &lt;/xsl:otherwise&gt;
                                            &lt;/xsl:choose&gt;
                                        &lt;/xd:b&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:when test="$wrapin-i"&gt;
                                        &lt;xd:i&gt;
                                            &lt;xsl:choose&gt;
                                                &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                &lt;/xsl:when&gt;
                                                &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                &lt;/xsl:otherwise&gt;
                                            &lt;/xsl:choose&gt;
                                        &lt;/xd:i&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:when test="$wrapin-a"&gt;
                                        &lt;xd:a&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                            &lt;/xsl:apply-templates&gt;
                                        &lt;/xd:a&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                            &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                        &lt;/xsl:apply-templates&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xd:p&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="$wrapin-li"&gt;
                            &lt;xd:ul&gt;
                                &lt;xd:li&gt;
                                    &lt;xsl:choose&gt;
                                        &lt;xsl:when test="$wrapin-b"&gt;
                                            &lt;xd:b&gt;
                                                &lt;xsl:choose&gt;
                                                  &lt;xsl:when test="$wrapin-i"&gt;
                                                  &lt;xd:i&gt;
                                                  &lt;xsl:choose&gt;
                                                  &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                  &lt;/xsl:when&gt;
                                                  &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xsl:otherwise&gt;
                                                  &lt;/xsl:choose&gt;
                                                  &lt;/xd:i&gt;
                                                  &lt;/xsl:when&gt;
                                                  &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xsl:otherwise&gt;
                                                &lt;/xsl:choose&gt;
                                            &lt;/xd:b&gt;
                                        &lt;/xsl:when&gt;
                                        &lt;xsl:when test="$wrapin-i"&gt;
                                            &lt;xd:i&gt;
                                                &lt;xsl:choose&gt;
                                                  &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                  &lt;/xsl:when&gt;
                                                  &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xsl:otherwise&gt;
                                                &lt;/xsl:choose&gt;
                                            &lt;/xd:i&gt;
                                        &lt;/xsl:when&gt;
                                        &lt;xsl:when test="$wrapin-a"&gt;
                                            &lt;xd:a&gt;
                                                &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                &lt;/xsl:apply-templates&gt;
                                            &lt;/xd:a&gt;
                                        &lt;/xsl:when&gt;
                                        &lt;xsl:otherwise&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                            &lt;/xsl:apply-templates&gt;
                                        &lt;/xsl:otherwise&gt;
                                    &lt;/xsl:choose&gt;
                                &lt;/xd:li&gt;
                            &lt;/xd:ul&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="$wrapin-ul"&gt;
                            &lt;xd:p&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="$wrapin-b"&gt;
                                        &lt;xd:b&gt;
                                            &lt;xsl:choose&gt;
                                                &lt;xsl:when test="$wrapin-i"&gt;
                                                  &lt;xd:i&gt;
                                                  &lt;xsl:choose&gt;
                                                  &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                  &lt;/xsl:when&gt;
                                                  &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xsl:otherwise&gt;
                                                  &lt;/xsl:choose&gt;
                                                  &lt;/xd:i&gt;
                                                &lt;/xsl:when&gt;
                                                &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                &lt;/xsl:otherwise&gt;
                                            &lt;/xsl:choose&gt;
                                        &lt;/xd:b&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:when test="$wrapin-i"&gt;
                                        &lt;xd:i&gt;
                                            &lt;xsl:choose&gt;
                                                &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                &lt;/xsl:when&gt;
                                                &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                &lt;/xsl:otherwise&gt;
                                            &lt;/xsl:choose&gt;
                                        &lt;/xd:i&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:when test="$wrapin-a"&gt;
                                        &lt;xd:a&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                            &lt;/xsl:apply-templates&gt;
                                        &lt;/xd:a&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                            &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                        &lt;/xsl:apply-templates&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xd:p&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="$wrapin-b"&gt;
                            &lt;xd:b&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="$wrapin-i"&gt;
                                        &lt;xd:i&gt;
                                            &lt;xsl:choose&gt;
                                                &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                &lt;/xsl:when&gt;
                                                &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                &lt;/xsl:otherwise&gt;
                                            &lt;/xsl:choose&gt;
                                        &lt;/xd:i&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:when test="$wrapin-a"&gt;
                                        &lt;xd:a&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                            &lt;/xsl:apply-templates&gt;
                                        &lt;/xd:a&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                            &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                        &lt;/xsl:apply-templates&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xd:b&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="$wrapin-i"&gt;
                            &lt;xd:i&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="$wrapin-a"&gt;
                                        &lt;xd:a&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                            &lt;/xsl:apply-templates&gt;
                                        &lt;/xd:a&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                            &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                        &lt;/xsl:apply-templates&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xd:i&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="$wrapin-a"&gt;
                            &lt;xd:a&gt;
                                &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                    &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                &lt;/xsl:apply-templates&gt;
                            &lt;/xd:a&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xsl:otherwise&gt;
            &lt;/xsl:choose&gt;
        &lt;/xsl:for-each-group&gt;
    &lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;&lt;/codeblock&gt;
    &lt;xsl:template name="unwrap-to-sections"&gt;
        &lt;xsl:param name="wasWrapped" select="false()"/&gt;
        &lt;xsl:param name="wrapin-p" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-ul" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-li" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:variable name="element" select="."/&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="not($wasWrapped) and count(child::node()[self::* or self::text() and string-length(normalize-space())&amp;gt;0])&amp;gt;1"&gt;
                &lt;xd:section&gt;
                    &lt;xsl:call-template name="unwrap-to-sections"&gt;
                        &lt;xsl:with-param name="wasWrapped" select="true()"/&gt;
                    &lt;/xsl:call-template&gt;
                &lt;/xd:section&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
                &lt;xsl:for-each-group select="child::node()[self::* or self::text() and string-length(normalize-space())&amp;gt;0]" group-adjacent="self::* and not(ancestor::*[local-name()='pre']) and (local-name()='section' or local-name()='ul' or local-name()='li' or local-name()='pre' or local-name()='p')"&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="current-grouping-key()"&gt;
                            &lt;xsl:choose&gt;
                                &lt;xsl:when test="count(current-group())&amp;gt;1 and last()&amp;gt;1"&gt;
                                    &lt;xd:section&gt;
                                        &lt;xsl:apply-templates mode="section" select="current-group()"&gt;
                                            &lt;xsl:with-param name="wrapin-p" tunnel="yes" select="if ($wrapin-p or local-name($element)='p') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-ul" tunnel="yes" select="if ($wrapin-ul or local-name($element)='ul') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-li" tunnel="yes" select="if ($wrapin-li or local-name($element)='li') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-b" tunnel="yes" select="if ($wrapin-b or local-name($element)='b') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-i" tunnel="yes" select="if ($wrapin-i or local-name($element)='i') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-a" tunnel="yes" select="if ($wrapin-a or local-name($element)='a') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-a-elem" tunnel="yes" select="if (not($wrapin-a) and local-name($element)='a') then $element else false()"/&gt;
                                        &lt;/xsl:apply-templates&gt;
                                    &lt;/xd:section&gt;
                                &lt;/xsl:when&gt;
                                &lt;xsl:otherwise&gt;
                                    &lt;xsl:apply-templates mode="section" select="current-group()"&gt;
                                        &lt;xsl:with-param name="wrapin-p" tunnel="yes" select="if ($wrapin-p or local-name($element)='p') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-ul" tunnel="yes" select="if ($wrapin-ul or local-name($element)='ul') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-li" tunnel="yes" select="if ($wrapin-li or local-name($element)='li') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-b" tunnel="yes" select="if ($wrapin-b or local-name($element)='b') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-i" tunnel="yes" select="if ($wrapin-i or local-name($element)='i') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-a" tunnel="yes" select="if ($wrapin-a or local-name($element)='a') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-a-elem" tunnel="yes" select="if (not($wrapin-a) and local-name($element)='a') then $element else false()"/&gt;
                                    &lt;/xsl:apply-templates&gt;
                                &lt;/xsl:otherwise&gt;
                            &lt;/xsl:choose&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:element name="xd:{local-name($element)}"&gt;
                                &lt;xsl:for-each select="$element/@*"&gt;
                                    &lt;xsl:attribute name="xd:{local-name()}" select="."/&gt;
                                &lt;/xsl:for-each&gt;
                                &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                    &lt;xsl:with-param name="wrapin-p" tunnel="yes" select="if ($wrapin-p or local-name($element)='p') then false() else $wrapin-p"/&gt;
                                    &lt;xsl:with-param name="wrapin-ul" tunnel="yes" select="if ($wrapin-ul or local-name($element)='ul') then false() else $wrapin-ul"/&gt;
                                    &lt;xsl:with-param name="wrapin-li" tunnel="yes" select="if ($wrapin-li or local-name($element)='li') then false() else $wrapin-li"/&gt;
                                    &lt;xsl:with-param name="wrapin-b" tunnel="yes" select="if ($wrapin-b or local-name($element)='b') then false() else $wrapin-b"/&gt;
                                    &lt;xsl:with-param name="wrapin-i" tunnel="yes" select="if ($wrapin-i or local-name($element)='i') then false() else $wrapin-i"/&gt;
                                    &lt;xsl:with-param name="wrapin-a" tunnel="yes" select="if ($wrapin-a or local-name($element)='a') then false() else $wrapin-a"/&gt;
                                &lt;/xsl:apply-templates&gt;
                            &lt;/xsl:element&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xsl:for-each-group&gt;
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;codeblock&gt;&lt;xsl:stylesheet version="2.0"&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Identity template.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template match="@*|node()"&gt;
        &lt;xsl:copy&gt;
            &lt;xsl:apply-templates select="@*|node()"/&gt;
        &lt;/xsl:copy&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Matches each xd:doc element.&lt;/xd:short&gt;&lt;xd:detail&gt;
        
        Determines what code is being documented and calls appropriate templates for: &lt;xd:ul&gt;
                &lt;xd:li&gt;short description (xd:short)&lt;/xd:li&gt;
                &lt;xd:li&gt;detailed description (xd:detail)&lt;/xd:li&gt;
                &lt;xd:li&gt;authors (xd:author)&lt;/xd:li&gt;
                &lt;xd:li&gt;contributors (xd:contributor)&lt;/xd:li&gt;
                &lt;xd:li&gt;maintainers (xd:maintainer)&lt;/xd:li&gt;
                &lt;xd:li&gt;copyright (xd:copyright)&lt;/xd:li&gt;
                &lt;xd:li&gt;version (xd:version)&lt;/xd:li&gt;
                &lt;xd:li&gt;code existed since version (xd:since)&lt;/xd:li&gt;
                &lt;xd:li&gt;see also (xd:see)&lt;/xd:li&gt;
                &lt;xd:li&gt;deprecated since version (xd:deprecated)&lt;/xd:li&gt;
                &lt;xd:li&gt;import statements (xd:import and xsl:import)&lt;/xd:li&gt;
                &lt;xd:li&gt;include statements (xd:include and xsl:include)&lt;/xd:li&gt;
                &lt;xd:li&gt;parameters (xd:param and xsl:param)&lt;/xd:li&gt;
                &lt;xd:li&gt;return values / output (xd:return)&lt;/xd:li&gt;
            &lt;/xd:ul&gt;
        
        
    &lt;/xd:detail&gt;&lt;xd:return&gt;The normalized xd:doc.&lt;/xd:return&gt;&lt;/xd:doc&gt;
    &lt;xsl:template match="xd:doc"&gt;
        &lt;xsl:copy&gt;
            &lt;xsl:variable name="target"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="@target"&gt;
                        &lt;xsl:value-of select="@target"/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="count(preceding-sibling::*)=0"&gt;
                        &lt;xsl:value-of select="'parent'"/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:value-of select="'following'"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:variable&gt;
            &lt;xsl:variable name="code" select="if ($target='parent') then parent::* else following-sibling::*[1]"/&gt;

            &lt;xsl:attribute name="target" select="$target"/&gt;

            &lt;xsl:call-template name="short"/&gt;
            &lt;xsl:call-template name="detail"/&gt;
            &lt;xsl:call-template name="authors"/&gt;
            &lt;xsl:call-template name="contributors"/&gt;
            &lt;xsl:call-template name="maintainers"/&gt;
            &lt;xsl:call-template name="copyright"/&gt;
            &lt;xsl:call-template name="version"/&gt;
            &lt;xsl:call-template name="since"/&gt;
            &lt;xsl:call-template name="see"/&gt;
            &lt;xsl:call-template name="deprecated"/&gt;
            &lt;xsl:call-template name="import"&gt;
                &lt;xsl:with-param name="code" select="$code"/&gt;
            &lt;/xsl:call-template&gt;
            &lt;xsl:call-template name="include"&gt;
                &lt;xsl:with-param name="code" select="$code"/&gt;
            &lt;/xsl:call-template&gt;
            &lt;xsl:call-template name="param"&gt;
                &lt;xsl:with-param name="code" select="$code"/&gt;
            &lt;/xsl:call-template&gt;
            &lt;xsl:call-template name="return"/&gt;
        &lt;/xsl:copy&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Determines the short description.&lt;/xd:short&gt;&lt;xd:detail&gt;
        
        
            &lt;xd:ul&gt;
                &lt;xd:li&gt;If there is no &amp;lt;xd:short/&amp;gt;-element present, but plain text is present as a
                    child of the &amp;lt;xd:doc/&amp;gt;element, then the first sentence from that text (up
                    until the first period (".") will be used as a short description.&lt;/xd:li&gt;
                &lt;xd:li&gt;Else; if there are multiple &amp;lt;xd:short/&amp;gt;-elements, each one of their
                    contents will be wrapped in separate &amp;lt;section/&amp;gt;s.&lt;/xd:li&gt;
                &lt;xd:li&gt;Else; use the one &amp;lt;xd:short/&amp;gt;-element that is present for the short
                    description.&lt;/xd:li&gt;
            &lt;/xd:ul&gt;
        
    &lt;/xd:detail&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="short"&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="count(child::*[local-name()='short'])&amp;gt;1"&gt;
                &lt;xd:short&gt;
                    &lt;xsl:for-each select="child::*[local-name()='short']"&gt;
                        &lt;xd:section&gt;
                            &lt;xsl:apply-templates mode="section"/&gt;
                        &lt;/xd:section&gt;
                    &lt;/xsl:for-each&gt;
                &lt;/xd:short&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="count(child::*[local-name()='short'])=1"&gt;
                &lt;xd:short&gt;
                    &lt;xsl:apply-templates select="child::*[local-name()='short']/node()" mode="section"/&gt;
                &lt;/xd:short&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="child::text()[string-length(normalize-space())&amp;gt;0]"&gt;
                &lt;xsl:variable name="short" select="replace(normalize-space(child::text()[1]),'^([^\.]+\.?)\s?.*$','$1')"/&gt;
                &lt;xd:short&gt;
                    &lt;xsl:value-of select="$short"/&gt;
                &lt;/xd:short&gt;
            &lt;/xsl:when&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Determines the detailed description.&lt;/xd:short&gt;&lt;xd:detail&gt;
        
        The detailed description will be put together based on any number of
            &amp;lt;xd:detail/&amp;gt;-elements, as well as any number of text nodes that are direct
            children of the &amp;lt;xd:doc/&amp;gt;-element. If the xd:short was extracted from the first
            text node, then the first sentence from that text node will be ignored. If there are
            multiple &amp;lt;xd:detail/&amp;gt; and text nodes, then each of them will be wrapped in
            &amp;lt;xd:section/&amp;gt;s.
    &lt;/xd:detail&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="detail"&gt;
        &lt;xsl:variable name="shortInFirstText" select="count(./*[local-name()='short'])=0"/&gt;
        &lt;xsl:variable name="detailCount" select="(if (matches(normalize-space(./text()[1]),'\.[^\.].')) then 1 else 0) + count(*[local-name()='detail' and (descendant-or-self::node()[self::text() and string-length(normalize-space())&amp;gt;0 or local-name()='pre' and not(ancestor::*[local-name()='pre'])])]) + count(./text()[not(position()=1) and string-length(normalize-space())&amp;gt;0])"/&gt;
        &lt;xsl:if test="$detailCount&amp;gt;0"&gt;
            &lt;xd:detail&gt;
                &lt;xsl:for-each select="*|text()"&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="self::text() and count(preceding-sibling::text()[string-length(normalize-space())&amp;gt;0])=0"&gt;
                            &lt;!-- first text --&gt;
                            &lt;xsl:choose&gt;
                                &lt;xsl:when test="$shortInFirstText"&gt;
                                    &lt;xsl:variable name="detail" select="replace(normalize-space(),'^[^\.]+.?\s?(.*)$','$1')"/&gt;
                                    &lt;xsl:choose&gt;
                                        &lt;xsl:when test="$detailCount&amp;gt;1"&gt;
                                            &lt;xd:section&gt;
                                                &lt;xsl:value-of select="$detail"/&gt;
                                            &lt;/xd:section&gt;
                                        &lt;/xsl:when&gt;
                                        &lt;xsl:otherwise&gt;
                                            &lt;xsl:value-of select="$detail"/&gt;
                                        &lt;/xsl:otherwise&gt;
                                    &lt;/xsl:choose&gt;
                                &lt;/xsl:when&gt;
                                &lt;xsl:otherwise&gt;
                                    &lt;xsl:choose&gt;
                                        &lt;xsl:when test="$detailCount&amp;gt;1"&gt;
                                            &lt;xd:section&gt;
                                                &lt;xsl:value-of select="."/&gt;
                                            &lt;/xd:section&gt;
                                        &lt;/xsl:when&gt;
                                        &lt;xsl:otherwise&gt;
                                            &lt;xsl:value-of select="."/&gt;
                                        &lt;/xsl:otherwise&gt;
                                    &lt;/xsl:choose&gt;
                                &lt;/xsl:otherwise&gt;
                            &lt;/xsl:choose&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="self::text()"&gt;
                            &lt;!-- non-first text --&gt;
                            &lt;xsl:choose&gt;
                                &lt;xsl:when test="$detailCount&amp;gt;1"&gt;
                                    &lt;xd:section&gt;
                                        &lt;xsl:value-of select="."/&gt;
                                    &lt;/xd:section&gt;
                                &lt;/xsl:when&gt;
                                &lt;xsl:otherwise&gt;
                                    &lt;xsl:value-of select="."/&gt;
                                &lt;/xsl:otherwise&gt;
                            &lt;/xsl:choose&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="local-name()='detail'"&gt;
                            &lt;!-- detail element --&gt;
                            &lt;xsl:choose&gt;
                                &lt;xsl:when test="$detailCount&amp;gt;1"&gt;
                                    &lt;xd:section&gt;
                                        &lt;xsl:apply-templates select="child::node()" mode="section"/&gt;
                                    &lt;/xd:section&gt;
                                &lt;/xsl:when&gt;
                                &lt;xsl:otherwise&gt;
                                    &lt;xsl:apply-templates select="child::node()" mode="section"/&gt;
                                &lt;/xsl:otherwise&gt;
                            &lt;/xsl:choose&gt;
                        &lt;/xsl:when&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xsl:for-each&gt;
            &lt;/xd:detail&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes the xd:author-elements.&lt;/xd:short&gt;&lt;xd:detail&gt;&amp;gt;xd:author/&amp;lt;s with no text are removed. &amp;lt;xd:author/&amp;gt;s with no child elements will have their text content wrapped in a &amp;lt;xd:name/&amp;gt; element. Children other than xd:name, xd:mailto and xd:organization are ignored.&lt;/xd:detail&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="authors" xml:id="authors"&gt;
        &lt;xsl:for-each select="*[local-name()='author']"&gt;
            &lt;xsl:variable name="is-empty" select="count(descendant-or-self::text()[string-length(normalize-space())&amp;gt;0])=0"/&gt;
            &lt;xsl:if test="not($is-empty)"&gt;
                &lt;xd:author&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="count(child::*)=0"&gt;
                            &lt;xd:name&gt;
                                &lt;xsl:value-of select="."/&gt;
                            &lt;/xd:name&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:if test="child::*[local-name()='name']"&gt;
                                &lt;xd:name&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='name']"/&gt;
                                &lt;/xd:name&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='mailto']"&gt;
                                &lt;xd:mailto&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='mailto']"/&gt;
                                &lt;/xd:mailto&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='organization']"&gt;
                                &lt;xd:organization&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='organization']"/&gt;
                                &lt;/xd:organization&gt;
                            &lt;/xsl:if&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xd:author&gt;
            &lt;/xsl:if&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;&amp;lt;xd:contributor/&amp;gt;s are normalized in the same way as &amp;lt;xd:author/&amp;gt;s&lt;/xd:short&gt;&lt;xd:see&gt;#authors&lt;/xd:see&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="contributors"&gt;
        &lt;xsl:for-each select="*[local-name()='contributor']"&gt;
            &lt;xsl:variable name="is-empty" select="count(descendant-or-self::text()[string-length(normalize-space())&amp;gt;0])=0"/&gt;
            &lt;xsl:if test="not($is-empty)"&gt;
                &lt;xd:contributor&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="count(child::*)=0"&gt;
                            &lt;xd:name&gt;
                                &lt;xsl:value-of select="."/&gt;
                            &lt;/xd:name&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:if test="child::*[local-name()='name']"&gt;
                                &lt;xd:name&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='name']"/&gt;
                                &lt;/xd:name&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='mailto']"&gt;
                                &lt;xd:mailto&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='mailto']"/&gt;
                                &lt;/xd:mailto&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='organization']"&gt;
                                &lt;xd:organization&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='organization']"/&gt;
                                &lt;/xd:organization&gt;
                            &lt;/xsl:if&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xd:contributor&gt;
            &lt;/xsl:if&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;&amp;lt;xd:maintainer/&amp;gt;s are normalized in the same way as &amp;lt;xd:author/&amp;gt;s&lt;/xd:short&gt;&lt;xd:see&gt;#authors&lt;/xd:see&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="maintainers"&gt;
        &lt;xsl:for-each select="*[local-name()='maintainer']"&gt;
            &lt;xsl:variable name="is-empty" select="count(descendant-or-self::text()[string-length(normalize-space())&amp;gt;0])=0"/&gt;
            &lt;xsl:if test="not($is-empty)"&gt;
                &lt;xd:maintainer&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="count(child::*)=0"&gt;
                            &lt;xd:name&gt;
                                &lt;xsl:value-of select="."/&gt;
                            &lt;/xd:name&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:if test="child::*[local-name()='name']"&gt;
                                &lt;xd:name&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='name']"/&gt;
                                &lt;/xd:name&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='mailto']"&gt;
                                &lt;xd:mailto&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='mailto']"/&gt;
                                &lt;/xd:mailto&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='organization']"&gt;
                                &lt;xd:organization&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='organization']"/&gt;
                                &lt;/xd:organization&gt;
                            &lt;/xsl:if&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xd:maintainer&gt;
            &lt;/xsl:if&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes the xd:copyright-element.&lt;/xd:short&gt;&lt;xd:detail&gt;&amp;gt;xd:copyright/&amp;lt;s with no text are removed. &amp;lt;xd:copyright/&amp;gt;s with no child elements will have their text content wrapped in a &amp;lt;xd:name/&amp;gt; element. Children other than xd:year, xd:name, xd:mailto and xd:organization are ignored.&lt;/xd:detail&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="copyright"&gt;
        &lt;xsl:for-each select="*[local-name()='copyright']"&gt;
            &lt;xsl:variable name="is-empty" select="count(descendant-or-self::text()[string-length(normalize-space())&amp;gt;0])=0"/&gt;
            &lt;xsl:if test="not($is-empty)"&gt;
                &lt;xd:copyright&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="count(child::*)=0"&gt;
                            &lt;xd:name&gt;
                                &lt;xsl:value-of select="."/&gt;
                            &lt;/xd:name&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:if test="child::*[local-name()='year']"&gt;
                                &lt;xd:year&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='year']"/&gt;
                                &lt;/xd:year&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='name']"&gt;
                                &lt;xd:name&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='name']"/&gt;
                                &lt;/xd:name&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='mailto']"&gt;
                                &lt;xd:mailto&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='mailto']"/&gt;
                                &lt;/xd:mailto&gt;
                            &lt;/xsl:if&gt;
                            &lt;xsl:if test="child::*[local-name()='organization']"&gt;
                                &lt;xd:organization&gt;
                                    &lt;xsl:value-of select="child::*[local-name()='organization']"/&gt;
                                &lt;/xd:organization&gt;
                            &lt;/xsl:if&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xd:copyright&gt;
            &lt;/xsl:if&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:version elements.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="version"&gt;
        &lt;xsl:if test="child::*[local-name()='version' and string-length(normalize-space(./text()))&amp;gt;0]"&gt;
            &lt;xd:version&gt;
                &lt;xsl:value-of select="child::*[local-name()='version' and string-length(normalize-space(./text()))&amp;gt;0]"/&gt;
            &lt;/xd:version&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:since elements.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="since"&gt;
        &lt;xsl:if test="child::*[local-name()='since' and string-length(normalize-space(./text()))&amp;gt;0]"&gt;
            &lt;xd:since&gt;
                &lt;xsl:value-of select="child::*[local-name()='since' and string-length(normalize-space(./text()))&amp;gt;0]"/&gt;
            &lt;/xd:since&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:see elements.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="see"&gt;
        &lt;xsl:if test="child::*[local-name()='see' and string-length(normalize-space(./text()))&amp;gt;0]"&gt;
            &lt;xd:see&gt;
                &lt;xsl:value-of select="child::*[local-name()='see' and string-length(normalize-space(./text()))&amp;gt;0]"/&gt;
            &lt;/xd:see&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:deprecated elements.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="deprecated"&gt;
        &lt;xsl:if test="child::*[local-name()='deprecated' and string-length(normalize-space(./text()))&amp;gt;0]"&gt;
            &lt;xd:deprecated&gt;
                &lt;xsl:value-of select="child::*[local-name()='deprecated' and string-length(normalize-space(./text()))&amp;gt;0]"/&gt;
            &lt;/xd:deprecated&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:import elements.&lt;/xd:short&gt;&lt;xd:detail&gt;Will create empty documentation for imports that are not documented, and removes documentation of imports that does not exist in the code.&lt;/xd:detail&gt;&lt;xd:param name="code"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="import"&gt;
        &lt;xsl:param name="code" required="yes"/&gt;
        &lt;xsl:variable name="doc" select="."/&gt;
        &lt;xsl:for-each select="$code/xsl:import"&gt;
            &lt;xsl:variable name="href" select="@href"/&gt;
            &lt;xd:import href="{@href}"&gt;
                &lt;xsl:if test="$doc/*[local-name()='import' and @href=$href]"&gt;
                    &lt;xsl:value-of select="$doc/*[local-name()='import' and @href=$href]"/&gt;
                &lt;/xsl:if&gt;
            &lt;/xd:import&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:include elements.&lt;/xd:short&gt;&lt;xd:detail&gt;Will create empty documentation for includes that are not documented, and removes documentation of includes that does not exist in the code.&lt;/xd:detail&gt;&lt;xd:param name="code"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="include"&gt;
        &lt;xsl:param name="code" required="yes"/&gt;
        &lt;xsl:variable name="doc" select="."/&gt;
        &lt;xsl:for-each select="$code/xsl:include"&gt;
            &lt;xsl:variable name="href" select="@href"/&gt;
            &lt;xd:include href="{@href}"&gt;
                &lt;xsl:if test="$doc/*[local-name()='include' and @href=$href]"&gt;
                    &lt;xsl:value-of select="$doc/*[local-name()='include' and @href=$href]"/&gt;
                &lt;/xsl:if&gt;
            &lt;/xd:include&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Normalizes xd:import elements.&lt;/xd:short&gt;&lt;xd:detail&gt;Will create empty documentation for imports that are not documented, and removes documentation of imports that does not exist in the code.&lt;/xd:detail&gt;&lt;xd:param name="code"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="param"&gt;
        &lt;xsl:param name="code" required="yes"/&gt;
        &lt;xsl:variable name="doc" select="."/&gt;
        &lt;xsl:for-each select="*[local-name()='param']"&gt;
            &lt;xd:param&gt;
                &lt;xsl:apply-templates select="@*"/&gt;
                &lt;xsl:apply-templates mode="section" select="node()"/&gt;
            &lt;/xd:param&gt;
        &lt;/xsl:for-each&gt;
        &lt;xsl:for-each select="$code/xsl:param"&gt;
            &lt;xsl:variable name="name" select="@name"/&gt;
            &lt;xsl:if test="not($doc/*[local-name()='param' and @name=$name])"&gt;
                &lt;xd:param name="{@name}"/&gt;
            &lt;/xsl:if&gt;
        &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Describes the result of the code.&lt;/xd:short&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="return"&gt;
        &lt;xsl:variable name="is-empty" select="count(*[local-name()='return']/descendant-or-self::node()[self::text() and string-length(normalize-space())&amp;gt;0 or local-name()='pre'])=0"/&gt;
        &lt;xsl:if test="not($is-empty)"&gt;
            &lt;xd:return&gt;
                &lt;xsl:apply-templates mode="section" select="*[local-name()='return']/node()"/&gt;
            &lt;/xd:return&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Matches all elements when in "section"-mode.&lt;/xd:short&gt;&lt;xd:detail&gt;
        
        Checks all child elements and their descendants and wraps and handles as is
            appropriate. If a child or descendant is placed in a problematic position, then one of
            the unwrap*-templates are called to solve the problem. Otherwise, just make sure that
            the element is in the correct namespace and copy it.
    &lt;/xd:detail&gt;&lt;xd:param name="wrapin-p"/&gt;&lt;xd:param name="wrapin-ul"/&gt;&lt;xd:param name="wrapin-li"/&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template mode="section" match="@*|node()"&gt;
        &lt;xsl:param name="wrapin-p" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-ul" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-li" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:variable name="is-empty" select="count(descendant-or-self::node()[self::text() and string-length(normalize-space())&amp;gt;0 or local-name()='pre'])=0"/&gt;
        &lt;xsl:variable name="contains-section" select="count(descendant::*[local-name()='section'])&amp;gt;0"/&gt;
        &lt;xsl:variable name="contains-block" select="count(descendant::*[local-name()='ul' or local-name()='li' or local-name()='pre' or local-name()='p'])&amp;gt;0"/&gt;
        &lt;xsl:variable name="contains-block-non-li" select="count(descendant::*[local-name()='ul' or local-name()='pre' or local-name()='p'])&amp;gt;0"/&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="local-name()='section'"&gt;
                &lt;xd:section&gt;
                    &lt;xsl:apply-templates mode="section" select="@*|node()"/&gt;
                &lt;/xd:section&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='p'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$contains-section or $contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-p" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:p&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:p&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='pre'"&gt;
                &lt;xd:pre&gt;
                    &lt;xsl:copy-of select="@*|node()"/&gt;
                &lt;/xd:pre&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='ul'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-section"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$contains-block-non-li"&gt;
                        &lt;xd:section&gt;
                            &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                                &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                            &lt;/xsl:call-template&gt;
                        &lt;/xd:section&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="count(descendant::*[local-name()='li'])=0"&gt;
                        &lt;xsl:choose&gt;
                            &lt;xsl:when test="count(child::node()[self::* or self::text() and string-length(normalize-space())&amp;gt;0])&amp;gt;1"&gt;
                                &lt;xd:section&gt;
                                    &lt;xsl:apply-templates mode="section" select="@*|node()"&gt;
                                        &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                                        &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                                    &lt;/xsl:apply-templates&gt;
                                &lt;/xd:section&gt;
                            &lt;/xsl:when&gt;
                            &lt;xsl:otherwise&gt;
                                &lt;xsl:apply-templates mode="section" select="@*|node()"&gt;
                                    &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                                &lt;/xsl:apply-templates&gt;
                            &lt;/xsl:otherwise&gt;
                        &lt;/xsl:choose&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:ul&gt;
                            &lt;xsl:apply-templates mode="list" select="@*|node()"&gt;
                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:ul&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='li'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-section"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:ul&gt;
                            &lt;xd:li&gt;
                                &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                            &lt;/xd:li&gt;
                        &lt;/xd:ul&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='b'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-section"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-b" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-b" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:b&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:b&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='i'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-section"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-i" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-i" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:i&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:i&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='a'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-section"&gt;
                        &lt;xsl:call-template name="unwrap-to-sections"&gt;
                            &lt;xsl:with-param name="wrapin-a" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-a-elem" select="." tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-a" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-a-elem" select="." tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:a&gt;
                            &lt;xsl:apply-templates select="@*"/&gt;
                            &lt;xsl:apply-templates mode="phrase" select="node()"/&gt;
                        &lt;/xd:a&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="self::*"&gt;
                        &lt;xsl:choose&gt;
                            &lt;xsl:when test="not(preceding-sibling::*) and not(following-sibling::*)"&gt;
                                &lt;xsl:apply-templates mode="section" select="@*|node()"/&gt;
                            &lt;/xsl:when&gt;
                            &lt;xsl:otherwise&gt;
                                &lt;xd:section&gt;
                                    &lt;xsl:apply-templates mode="section" select="@*|node()"/&gt;
                                &lt;/xd:section&gt;
                            &lt;/xsl:otherwise&gt;
                        &lt;/xsl:choose&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="self::text()"&gt;
                        &lt;xsl:copy/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="section" select="@*|node()"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Handles non-problematic lists.&lt;/xd:short&gt;&lt;xd:param name="wrapin-p"/&gt;&lt;xd:param name="wrapin-ul"/&gt;&lt;xd:param name="wrapin-li"/&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template mode="list" match="@*|node()"&gt;
        &lt;xsl:param name="wrapin-p" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-ul" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-li" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:variable name="is-empty" select="count(descendant-or-self::node()[self::text() and string-length(normalize-space())&amp;gt;0 or local-name()='pre'])=0"/&gt;
        &lt;xsl:variable name="contains-block" select="count(descendant::*[local-name()='ul' or local-name()='li' or local-name()='pre' or local-name()='p'])&amp;gt;0"/&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="local-name()='li'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="$wrapin-ul"&gt;
                        &lt;xd:ul&gt;
                            &lt;xd:li&gt;
                                &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                            &lt;/xd:li&gt;
                        &lt;/xd:ul&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:li&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:li&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="self::text()"&gt;
                        &lt;xsl:copy/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="list" select="@*|node()"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Handles all elements when in "block" mode and applies fixes where needed.&lt;/xd:short&gt;&lt;xd:param name="wrapin-p"/&gt;&lt;xd:param name="wrapin-ul"/&gt;&lt;xd:param name="wrapin-li"/&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template mode="block" match="@*|node()"&gt;
        &lt;xsl:param name="wrapin-p" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-ul" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-li" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:variable name="element" select="."/&gt;
        &lt;xsl:variable name="is-empty" select="count(descendant-or-self::node()[self::* or self::text() and string-length(normalize-space())&amp;gt;0])=0"/&gt;
        &lt;xsl:variable name="contains-block" select="count(descendant::*[local-name()='ul' or local-name()='li' or local-name()='pre' or local-name()='p'])&amp;gt;0"/&gt;
        &lt;xsl:variable name="contains-block-non-li" select="count(descendant::*[local-name()='ul' or local-name()='pre' or local-name()='p'])&amp;gt;0"/&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="local-name()='p'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:p&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:p&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='pre'"&gt;
                &lt;xd:pre&gt;
                    &lt;xsl:copy-of select="@*|node()"/&gt;
                &lt;/xd:pre&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='ul'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block-non-li"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:when test="count(descendant::*[local-name()='li' and string-length(normalize-space(descendant-or-self::text()))&amp;gt;0])=0"&gt;
                        &lt;xsl:apply-templates mode="block" select="@*|node()"/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:ul&gt;
                            &lt;xsl:apply-templates mode="list" select="@*|node()"&gt;
                                &lt;xsl:with-param name="wrapin-ul" select="false()"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:ul&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='li'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:ul&gt;
                            &lt;xd:li&gt;
                                &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                                    &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                &lt;/xsl:apply-templates&gt;
                            &lt;/xd:li&gt;
                        &lt;/xd:ul&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="not($contains-block) and $wrapin-p"&gt;
                &lt;xd:p&gt;
                    &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                        &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                        &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                        &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                    &lt;/xsl:apply-templates&gt;
                &lt;/xd:p&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="not($contains-block) and $wrapin-li"&gt;
                &lt;xd:ul&gt;
                    &lt;xd:li&gt;
                        &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                            &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xd:li&gt;
                &lt;/xd:ul&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='b'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-b" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:b&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:b&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='i'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-i" select="true()" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:i&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:i&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='a'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="$is-empty"/&gt;
                    &lt;xsl:when test="$contains-block"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-a" select="true()" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-a-elem" select="$element" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xd:a&gt;
                            &lt;xsl:apply-templates mode="phrase" select="$element/@*"/&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                        &lt;/xd:a&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="self::text()"&gt;
                        &lt;xsl:copy/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="block" select="@*|node()"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;Phrases are matched with this template (mode="phrase") and handled appropriately.&lt;/xd:short&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template mode="phrase" match="@*|node()"&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="local-name()='b'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='b'])"&gt;
                        &lt;xd:b&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:b&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="$wrapin-b"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='b'])"&gt;
                        &lt;xd:b&gt;
                            &lt;xsl:apply-templates mode="phrase" select="."&gt;
                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:b&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="."&gt;
                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='i'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='i'])"&gt;
                        &lt;xd:i&gt;
                            &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:i&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="@*|node()"&gt;
                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="$wrapin-i"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='i'])"&gt;
                        &lt;xd:i&gt;
                            &lt;xsl:apply-templates mode="phrase" select="."&gt;
                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:i&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="."&gt;
                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="local-name()='a'"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='a'])"&gt;
                        &lt;xd:a&gt;
                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                            &lt;xsl:apply-templates mode="phrase" select="node()"&gt;
                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:a&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="$wrapin-a"&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="not(ancestor::*[local-name()='a'])"&gt;
                        &lt;xd:a&gt;
                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                            &lt;xsl:apply-templates mode="phrase" select="."&gt;
                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xd:a&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="."&gt;
                            &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                        &lt;/xsl:apply-templates&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
                &lt;xsl:choose&gt;
                    &lt;xsl:when test="self::text()"&gt;
                        &lt;xsl:copy/&gt;
                    &lt;/xsl:when&gt;
                    &lt;xsl:otherwise&gt;
                        &lt;xsl:apply-templates mode="phrase" select="@*|node()"/&gt;
                    &lt;/xsl:otherwise&gt;
                &lt;/xsl:choose&gt;
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;This template unwraps problematic elements into sections.&lt;/xd:short&gt;&lt;xd:param name="wasWrapped"/&gt;&lt;xd:param name="wrapin-p"/&gt;&lt;xd:param name="wrapin-ul"/&gt;&lt;xd:param name="wrapin-li"/&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="unwrap-to-sections"&gt;
        &lt;xsl:param name="wasWrapped" select="false()"/&gt;
        &lt;xsl:param name="wrapin-p" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-ul" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-li" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:variable name="element" select="."/&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="not($wasWrapped) and count(child::node()[self::* or self::text() and string-length(normalize-space())&amp;gt;0])&amp;gt;1"&gt;
                &lt;xd:section&gt;
                    &lt;xsl:call-template name="unwrap-to-sections"&gt;
                        &lt;xsl:with-param name="wasWrapped" select="true()"/&gt;
                    &lt;/xsl:call-template&gt;
                &lt;/xd:section&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
                &lt;xsl:for-each-group select="child::node()[self::* or self::text() and string-length(normalize-space())&amp;gt;0]" group-adjacent="self::* and not(ancestor::*[local-name()='pre']) and (local-name()='section' or local-name()='ul' or local-name()='li' or local-name()='pre' or local-name()='p')"&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="current-grouping-key()"&gt;
                            &lt;xsl:choose&gt;
                                &lt;xsl:when test="count(current-group())&amp;gt;1 and last()&amp;gt;1"&gt;
                                    &lt;xd:section&gt;
                                        &lt;xsl:apply-templates mode="section" select="current-group()"&gt;
                                            &lt;xsl:with-param name="wrapin-p" tunnel="yes" select="if ($wrapin-p or local-name($element)='p') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-ul" tunnel="yes" select="if ($wrapin-ul or local-name($element)='ul') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-li" tunnel="yes" select="if ($wrapin-li or local-name($element)='li') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-b" tunnel="yes" select="if ($wrapin-b or local-name($element)='b') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-i" tunnel="yes" select="if ($wrapin-i or local-name($element)='i') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-a" tunnel="yes" select="if ($wrapin-a or local-name($element)='a') then true() else false()"/&gt;
                                            &lt;xsl:with-param name="wrapin-a-elem" tunnel="yes" select="if (not($wrapin-a) and local-name($element)='a') then $element else false()"/&gt;
                                        &lt;/xsl:apply-templates&gt;
                                    &lt;/xd:section&gt;
                                &lt;/xsl:when&gt;
                                &lt;xsl:otherwise&gt;
                                    &lt;xsl:apply-templates mode="section" select="current-group()"&gt;
                                        &lt;xsl:with-param name="wrapin-p" tunnel="yes" select="if ($wrapin-p or local-name($element)='p') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-ul" tunnel="yes" select="if ($wrapin-ul or local-name($element)='ul') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-li" tunnel="yes" select="if ($wrapin-li or local-name($element)='li') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-b" tunnel="yes" select="if ($wrapin-b or local-name($element)='b') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-i" tunnel="yes" select="if ($wrapin-i or local-name($element)='i') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-a" tunnel="yes" select="if ($wrapin-a or local-name($element)='a') then true() else false()"/&gt;
                                        &lt;xsl:with-param name="wrapin-a-elem" tunnel="yes" select="if (not($wrapin-a) and local-name($element)='a') then $element else false()"/&gt;
                                    &lt;/xsl:apply-templates&gt;
                                &lt;/xsl:otherwise&gt;
                            &lt;/xsl:choose&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:element name="xd:{local-name($element)}"&gt;
                                &lt;xsl:for-each select="$element/@*"&gt;
                                    &lt;xsl:attribute name="xd:{local-name()}" select="."/&gt;
                                &lt;/xsl:for-each&gt;
                                &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                    &lt;xsl:with-param name="wrapin-p" tunnel="yes" select="if ($wrapin-p or local-name($element)='p') then false() else $wrapin-p"/&gt;
                                    &lt;xsl:with-param name="wrapin-ul" tunnel="yes" select="if ($wrapin-ul or local-name($element)='ul') then false() else $wrapin-ul"/&gt;
                                    &lt;xsl:with-param name="wrapin-li" tunnel="yes" select="if ($wrapin-li or local-name($element)='li') then false() else $wrapin-li"/&gt;
                                    &lt;xsl:with-param name="wrapin-b" tunnel="yes" select="if ($wrapin-b or local-name($element)='b') then false() else $wrapin-b"/&gt;
                                    &lt;xsl:with-param name="wrapin-i" tunnel="yes" select="if ($wrapin-i or local-name($element)='i') then false() else $wrapin-i"/&gt;
                                    &lt;xsl:with-param name="wrapin-a" tunnel="yes" select="if ($wrapin-a or local-name($element)='a') then false() else $wrapin-a"/&gt;
                                &lt;/xsl:apply-templates&gt;
                            &lt;/xsl:element&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xsl:for-each-group&gt;
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xd:doc target="following"&gt;&lt;xd:short&gt;This template unwraps problematic elements into blocks.&lt;/xd:short&gt;&lt;xd:param name="wrapin-p"/&gt;&lt;xd:param name="wrapin-ul"/&gt;&lt;xd:param name="wrapin-li"/&gt;&lt;xd:param name="wrapin-b"/&gt;&lt;xd:param name="wrapin-i"/&gt;&lt;xd:param name="wrapin-a"/&gt;&lt;xd:param name="wrapin-a-elem"/&gt;&lt;/xd:doc&gt;
    &lt;xsl:template name="unwrap-to-blocks"&gt;
        &lt;xsl:param name="wrapin-p" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-ul" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-li" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:variable name="element" select="."/&gt;
        &lt;xsl:for-each-group select="child::node()[self::* or self::text() and string-length(normalize-space())&amp;gt;0]" group-adjacent="count(descendant-or-self::*[local-name()='ul' or local-name()='li' or local-name()='pre' or local-name()='p'])&amp;gt;0"&gt;
            &lt;xsl:choose&gt;
                &lt;xsl:when test="current-grouping-key()"&gt;
                    &lt;xsl:for-each select="current-group()"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-p" select="$wrapin-p or local-name()='p' or local-name($element)='p'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="$wrapin-ul or local-name()='ul' or local-name($element)='ul'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="$wrapin-li or local-name()='li' or local-name($element)='li'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-b" select="$wrapin-b or local-name()='b' or local-name($element)='b'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-i" select="$wrapin-i or local-name()='i' or local-name($element)='i'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-a" select="$wrapin-a or local-name()='a' or local-name($element)='a'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-a-elem" select="if (local-name()='a') then . else (if (local-name($element)='a') then $element else $wrapin-a-elem)" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:for-each&gt;
                &lt;/xsl:when&gt;
                &lt;xsl:otherwise&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="$wrapin-p"&gt;
                            &lt;xd:p&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="$wrapin-b"&gt;
                                        &lt;xd:b&gt;
                                            &lt;xsl:choose&gt;
                                                &lt;xsl:when test="$wrapin-i"&gt;
                                                  &lt;xd:i&gt;
                                                  &lt;xsl:choose&gt;
                                                  &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                  &lt;/xsl:when&gt;
                                                  &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xsl:otherwise&gt;
                                                  &lt;/xsl:choose&gt;
                                                  &lt;/xd:i&gt;
                                                &lt;/xsl:when&gt;
                                                &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                &lt;/xsl:otherwise&gt;
                                            &lt;/xsl:choose&gt;
                                        &lt;/xd:b&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:when test="$wrapin-i"&gt;
                                        &lt;xd:i&gt;
                                            &lt;xsl:choose&gt;
                                                &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                &lt;/xsl:when&gt;
                                                &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                &lt;/xsl:otherwise&gt;
                                            &lt;/xsl:choose&gt;
                                        &lt;/xd:i&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:when test="$wrapin-a"&gt;
                                        &lt;xd:a&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                            &lt;/xsl:apply-templates&gt;
                                        &lt;/xd:a&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                            &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                        &lt;/xsl:apply-templates&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xd:p&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="$wrapin-li"&gt;
                            &lt;xd:ul&gt;
                                &lt;xd:li&gt;
                                    &lt;xsl:choose&gt;
                                        &lt;xsl:when test="$wrapin-b"&gt;
                                            &lt;xd:b&gt;
                                                &lt;xsl:choose&gt;
                                                  &lt;xsl:when test="$wrapin-i"&gt;
                                                  &lt;xd:i&gt;
                                                  &lt;xsl:choose&gt;
                                                  &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                  &lt;/xsl:when&gt;
                                                  &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xsl:otherwise&gt;
                                                  &lt;/xsl:choose&gt;
                                                  &lt;/xd:i&gt;
                                                  &lt;/xsl:when&gt;
                                                  &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xsl:otherwise&gt;
                                                &lt;/xsl:choose&gt;
                                            &lt;/xd:b&gt;
                                        &lt;/xsl:when&gt;
                                        &lt;xsl:when test="$wrapin-i"&gt;
                                            &lt;xd:i&gt;
                                                &lt;xsl:choose&gt;
                                                  &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                  &lt;/xsl:when&gt;
                                                  &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xsl:otherwise&gt;
                                                &lt;/xsl:choose&gt;
                                            &lt;/xd:i&gt;
                                        &lt;/xsl:when&gt;
                                        &lt;xsl:when test="$wrapin-a"&gt;
                                            &lt;xd:a&gt;
                                                &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                &lt;/xsl:apply-templates&gt;
                                            &lt;/xd:a&gt;
                                        &lt;/xsl:when&gt;
                                        &lt;xsl:otherwise&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                            &lt;/xsl:apply-templates&gt;
                                        &lt;/xsl:otherwise&gt;
                                    &lt;/xsl:choose&gt;
                                &lt;/xd:li&gt;
                            &lt;/xd:ul&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="$wrapin-ul"&gt;
                            &lt;xd:p&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="$wrapin-b"&gt;
                                        &lt;xd:b&gt;
                                            &lt;xsl:choose&gt;
                                                &lt;xsl:when test="$wrapin-i"&gt;
                                                  &lt;xd:i&gt;
                                                  &lt;xsl:choose&gt;
                                                  &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                  &lt;/xsl:when&gt;
                                                  &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xsl:otherwise&gt;
                                                  &lt;/xsl:choose&gt;
                                                  &lt;/xd:i&gt;
                                                &lt;/xsl:when&gt;
                                                &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                &lt;/xsl:otherwise&gt;
                                            &lt;/xsl:choose&gt;
                                        &lt;/xd:b&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:when test="$wrapin-i"&gt;
                                        &lt;xd:i&gt;
                                            &lt;xsl:choose&gt;
                                                &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                &lt;/xsl:when&gt;
                                                &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                &lt;/xsl:otherwise&gt;
                                            &lt;/xsl:choose&gt;
                                        &lt;/xd:i&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:when test="$wrapin-a"&gt;
                                        &lt;xd:a&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                            &lt;/xsl:apply-templates&gt;
                                        &lt;/xd:a&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                            &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                        &lt;/xsl:apply-templates&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xd:p&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="$wrapin-b"&gt;
                            &lt;xd:b&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="$wrapin-i"&gt;
                                        &lt;xd:i&gt;
                                            &lt;xsl:choose&gt;
                                                &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                &lt;/xsl:when&gt;
                                                &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                &lt;/xsl:otherwise&gt;
                                            &lt;/xsl:choose&gt;
                                        &lt;/xd:i&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:when test="$wrapin-a"&gt;
                                        &lt;xd:a&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                            &lt;/xsl:apply-templates&gt;
                                        &lt;/xd:a&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                            &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                        &lt;/xsl:apply-templates&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xd:b&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="$wrapin-i"&gt;
                            &lt;xd:i&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="$wrapin-a"&gt;
                                        &lt;xd:a&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                            &lt;/xsl:apply-templates&gt;
                                        &lt;/xd:a&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                            &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                        &lt;/xsl:apply-templates&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xd:i&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="$wrapin-a"&gt;
                            &lt;xd:a&gt;
                                &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                    &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                &lt;/xsl:apply-templates&gt;
                            &lt;/xd:a&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xsl:otherwise&gt;
            &lt;/xsl:choose&gt;
        &lt;/xsl:for-each-group&gt;
    &lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;&lt;/codeblock&gt;
    &lt;xsl:template name="unwrap-to-blocks"&gt;
        &lt;xsl:param name="wrapin-p" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-ul" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-li" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-b" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-i" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a" tunnel="yes" select="false()"/&gt;
        &lt;xsl:param name="wrapin-a-elem" tunnel="yes" select="false()"/&gt;
        &lt;xsl:variable name="element" select="."/&gt;
        &lt;xsl:for-each-group select="child::node()[self::* or self::text() and string-length(normalize-space())&amp;gt;0]" group-adjacent="count(descendant-or-self::*[local-name()='ul' or local-name()='li' or local-name()='pre' or local-name()='p'])&amp;gt;0"&gt;
            &lt;xsl:choose&gt;
                &lt;xsl:when test="current-grouping-key()"&gt;
                    &lt;xsl:for-each select="current-group()"&gt;
                        &lt;xsl:call-template name="unwrap-to-blocks"&gt;
                            &lt;xsl:with-param name="wrapin-p" select="$wrapin-p or local-name()='p' or local-name($element)='p'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-ul" select="$wrapin-ul or local-name()='ul' or local-name($element)='ul'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-li" select="$wrapin-li or local-name()='li' or local-name($element)='li'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-b" select="$wrapin-b or local-name()='b' or local-name($element)='b'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-i" select="$wrapin-i or local-name()='i' or local-name($element)='i'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-a" select="$wrapin-a or local-name()='a' or local-name($element)='a'" tunnel="yes"/&gt;
                            &lt;xsl:with-param name="wrapin-a-elem" select="if (local-name()='a') then . else (if (local-name($element)='a') then $element else $wrapin-a-elem)" tunnel="yes"/&gt;
                        &lt;/xsl:call-template&gt;
                    &lt;/xsl:for-each&gt;
                &lt;/xsl:when&gt;
                &lt;xsl:otherwise&gt;
                    &lt;xsl:choose&gt;
                        &lt;xsl:when test="$wrapin-p"&gt;
                            &lt;xd:p&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="$wrapin-b"&gt;
                                        &lt;xd:b&gt;
                                            &lt;xsl:choose&gt;
                                                &lt;xsl:when test="$wrapin-i"&gt;
                                                  &lt;xd:i&gt;
                                                  &lt;xsl:choose&gt;
                                                  &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                  &lt;/xsl:when&gt;
                                                  &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xsl:otherwise&gt;
                                                  &lt;/xsl:choose&gt;
                                                  &lt;/xd:i&gt;
                                                &lt;/xsl:when&gt;
                                                &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                &lt;/xsl:otherwise&gt;
                                            &lt;/xsl:choose&gt;
                                        &lt;/xd:b&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:when test="$wrapin-i"&gt;
                                        &lt;xd:i&gt;
                                            &lt;xsl:choose&gt;
                                                &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                &lt;/xsl:when&gt;
                                                &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                &lt;/xsl:otherwise&gt;
                                            &lt;/xsl:choose&gt;
                                        &lt;/xd:i&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:when test="$wrapin-a"&gt;
                                        &lt;xd:a&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                            &lt;/xsl:apply-templates&gt;
                                        &lt;/xd:a&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                            &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                        &lt;/xsl:apply-templates&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xd:p&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="$wrapin-li"&gt;
                            &lt;xd:ul&gt;
                                &lt;xd:li&gt;
                                    &lt;xsl:choose&gt;
                                        &lt;xsl:when test="$wrapin-b"&gt;
                                            &lt;xd:b&gt;
                                                &lt;xsl:choose&gt;
                                                  &lt;xsl:when test="$wrapin-i"&gt;
                                                  &lt;xd:i&gt;
                                                  &lt;xsl:choose&gt;
                                                  &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                  &lt;/xsl:when&gt;
                                                  &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xsl:otherwise&gt;
                                                  &lt;/xsl:choose&gt;
                                                  &lt;/xd:i&gt;
                                                  &lt;/xsl:when&gt;
                                                  &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xsl:otherwise&gt;
                                                &lt;/xsl:choose&gt;
                                            &lt;/xd:b&gt;
                                        &lt;/xsl:when&gt;
                                        &lt;xsl:when test="$wrapin-i"&gt;
                                            &lt;xd:i&gt;
                                                &lt;xsl:choose&gt;
                                                  &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                  &lt;/xsl:when&gt;
                                                  &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xsl:otherwise&gt;
                                                &lt;/xsl:choose&gt;
                                            &lt;/xd:i&gt;
                                        &lt;/xsl:when&gt;
                                        &lt;xsl:when test="$wrapin-a"&gt;
                                            &lt;xd:a&gt;
                                                &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                &lt;/xsl:apply-templates&gt;
                                            &lt;/xd:a&gt;
                                        &lt;/xsl:when&gt;
                                        &lt;xsl:otherwise&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                            &lt;/xsl:apply-templates&gt;
                                        &lt;/xsl:otherwise&gt;
                                    &lt;/xsl:choose&gt;
                                &lt;/xd:li&gt;
                            &lt;/xd:ul&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="$wrapin-ul"&gt;
                            &lt;xd:p&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="$wrapin-b"&gt;
                                        &lt;xd:b&gt;
                                            &lt;xsl:choose&gt;
                                                &lt;xsl:when test="$wrapin-i"&gt;
                                                  &lt;xd:i&gt;
                                                  &lt;xsl:choose&gt;
                                                  &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                  &lt;/xsl:when&gt;
                                                  &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xsl:otherwise&gt;
                                                  &lt;/xsl:choose&gt;
                                                  &lt;/xd:i&gt;
                                                &lt;/xsl:when&gt;
                                                &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                &lt;/xsl:otherwise&gt;
                                            &lt;/xsl:choose&gt;
                                        &lt;/xd:b&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:when test="$wrapin-i"&gt;
                                        &lt;xd:i&gt;
                                            &lt;xsl:choose&gt;
                                                &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                &lt;/xsl:when&gt;
                                                &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                &lt;/xsl:otherwise&gt;
                                            &lt;/xsl:choose&gt;
                                        &lt;/xd:i&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:when test="$wrapin-a"&gt;
                                        &lt;xd:a&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                            &lt;/xsl:apply-templates&gt;
                                        &lt;/xd:a&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                            &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                        &lt;/xsl:apply-templates&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xd:p&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="$wrapin-b"&gt;
                            &lt;xd:b&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="$wrapin-i"&gt;
                                        &lt;xd:i&gt;
                                            &lt;xsl:choose&gt;
                                                &lt;xsl:when test="$wrapin-a"&gt;
                                                  &lt;xd:a&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                  &lt;/xd:a&gt;
                                                &lt;/xsl:when&gt;
                                                &lt;xsl:otherwise&gt;
                                                  &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                  &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                  &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                                  &lt;/xsl:apply-templates&gt;
                                                &lt;/xsl:otherwise&gt;
                                            &lt;/xsl:choose&gt;
                                        &lt;/xd:i&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:when test="$wrapin-a"&gt;
                                        &lt;xd:a&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                            &lt;/xsl:apply-templates&gt;
                                        &lt;/xd:a&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                            &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                        &lt;/xsl:apply-templates&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xd:b&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="$wrapin-i"&gt;
                            &lt;xd:i&gt;
                                &lt;xsl:choose&gt;
                                    &lt;xsl:when test="$wrapin-a"&gt;
                                        &lt;xd:a&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                            &lt;/xsl:apply-templates&gt;
                                        &lt;/xd:a&gt;
                                    &lt;/xsl:when&gt;
                                    &lt;xsl:otherwise&gt;
                                        &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                            &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                            &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                        &lt;/xsl:apply-templates&gt;
                                    &lt;/xsl:otherwise&gt;
                                &lt;/xsl:choose&gt;
                            &lt;/xd:i&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="$wrapin-a"&gt;
                            &lt;xd:a&gt;
                                &lt;xsl:apply-templates mode="phrase" select="$wrapin-a-elem/@*"/&gt;
                                &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                    &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                    &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                                &lt;/xsl:apply-templates&gt;
                            &lt;/xd:a&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:otherwise&gt;
                            &lt;xsl:apply-templates mode="phrase" select="current-group()"&gt;
                                &lt;xsl:with-param name="wrapin-p" select="false()" tunnel="yes"/&gt;
                                &lt;xsl:with-param name="wrapin-ul" select="false()" tunnel="yes"/&gt;
                                &lt;xsl:with-param name="wrapin-li" select="false()" tunnel="yes"/&gt;
                                &lt;xsl:with-param name="wrapin-b" select="false()" tunnel="yes"/&gt;
                                &lt;xsl:with-param name="wrapin-i" select="false()" tunnel="yes"/&gt;
                                &lt;xsl:with-param name="wrapin-a" select="false()" tunnel="yes"/&gt;
                            &lt;/xsl:apply-templates&gt;
                        &lt;/xsl:otherwise&gt;
                    &lt;/xsl:choose&gt;
                &lt;/xsl:otherwise&gt;
            &lt;/xsl:choose&gt;
        &lt;/xsl:for-each-group&gt;
    &lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;</codeblock>
   </section>
</reference>