<reference id="d19071e183">
   <title>xsl:template - subdoc</title>
   <abstract>
      <shortdesc>
         <xd:short xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                   xmlns:xd="http://pipeline.daisy.org/ns/sample/doc"
                   xmlns:xsltdoc="http://www.pnp-software.com/XSLTdoc">Recursive template that looks for xd:doc elements.</xd:short>
      </shortdesc>
      <xd:detail xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                 xmlns:xd="http://pipeline.daisy.org/ns/sample/doc"
                 xmlns:xsltdoc="http://www.pnp-software.com/XSLTdoc">If there is a xd:doc belonging to the current element; document the current element
      using it. At the same time; recurse further through the script looking for more elements to be
      documented.</xd:detail>
   </abstract>
   <prolog>
      <metadata>
         <audience type="programmer" job="programming" experiencelevel="expert"/>
         <othermeta name="programming-language" content="XSLT"/>
      </metadata>
   </prolog>
   <refbody>
      <section>
         <apiname>xsl:template - subdoc</apiname>
      </section>
      <section outputclass="parameters xslt-params">
         <title outputclass="io-header">Parameters (xsl:param / xsl:with-param)</title>
         <parml outputclass="xslt-params">
            <plentry>
               <pt>code</pt>
               <pt>undefined</pt>
               <pt>false</pt>
               <pt>no</pt>
               <pd>
                  <xd:param xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                            xmlns:xd="http://pipeline.daisy.org/ns/sample/doc"
                            xmlns:xsltdoc="http://www.pnp-software.com/XSLTdoc"
                            name="code">Contains the element to be evaluted for documentation.</xd:param>
               </pd>
            </plentry>
            <plentry>
               <pt>parentdoc</pt>
               <pt>undefined</pt>
               <pt>false</pt>
               <pt>no</pt>
               <pd>
                  <xd:param xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                            xmlns:xd="http://pipeline.daisy.org/ns/sample/doc"
                            xmlns:xsltdoc="http://www.pnp-software.com/XSLTdoc"
                            name="parentdoc">The xd:doc used to document the closest documented ancestor (used to
      make sure it isn't used twice).</xd:param>
               </pd>
            </plentry>
         </parml>
      </section>
   </refbody>
   <section outputclass="sourcecode">
      <title outputclass="sourcecode-header">Source Code</title>
      <codeblock>&lt;xsl:template name="subdoc" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;
    &lt;xsl:param name="code" required="yes"/&gt;
    &lt;xsl:param name="parentdoc"/&gt;

    &lt;xsl:if test="not(name($code) = 'xd:doc' or name($code) = 'xsltdoc:doc')"&gt;
      &lt;xsl:for-each select="$code/*"&gt;
        &lt;xsl:choose&gt;
          &lt;!-- Don't document the documentation ;) --&gt;
          &lt;xsl:when test="name(.) = 'xd:doc' or name(.) = 'xsltdoc:doc'"/&gt;

          &lt;!-- When the current element contains a p:documentation child targeting it, use it --&gt;
          &lt;xsl:when test="./xd:doc[@target='parent'][1] and not(generate-id(./xd:doc[@target='parent'][1]) = generate-id($parentdoc))"&gt;
            &lt;xsl:variable name="doc" select="./xd:doc[@target='parent'][1]"/&gt;
            &lt;xsl:call-template name="doc"&gt;
              &lt;xsl:with-param name="doc" select="$doc"/&gt;
              &lt;xsl:with-param name="code" select="."/&gt;
            &lt;/xsl:call-template&gt;
            &lt;xsl:call-template name="subdoc"&gt;
              &lt;xsl:with-param name="code" select="."/&gt;
              &lt;xsl:with-param name="parentdoc" select="$doc"/&gt;
            &lt;/xsl:call-template&gt;
          &lt;/xsl:when&gt;

          &lt;!-- When the current element contains a p:documentation child targeting it, use it --&gt;
          &lt;xsl:when test="(./xsltdoc:doc[@target='parent'][1]) and not(generate-id(./xsltdoc:doc[@target='parent'][1]) = generate-id($parentdoc))"&gt;
            &lt;xsl:variable name="doc" select="./xsltdoc:doc[@target='parent'][1]"/&gt;
            &lt;xsl:call-template name="doc"&gt;
              &lt;xsl:with-param name="doc" select="$doc"/&gt;
              &lt;xsl:with-param name="code" select="."/&gt;
            &lt;/xsl:call-template&gt;
            &lt;xsl:call-template name="subdoc"&gt;
              &lt;xsl:with-param name="code" select="."/&gt;
              &lt;xsl:with-param name="parentdoc" select="$doc"/&gt;
            &lt;/xsl:call-template&gt;
          &lt;/xsl:when&gt;

          &lt;!-- When the first child of the current element is a xd:doc and is not targeting another element, use it --&gt;
          &lt;xsl:when test="(name(./*[1]) = 'xd:doc' or name(./*[1]) = 'xsltdoc:doc') and not(./*[1]/@target = 'following') and not(generate-id(./*[1]) = generate-id($parentdoc))"&gt;
            &lt;xsl:variable name="doc" select="./*[1]"/&gt;
            &lt;xsl:call-template name="doc"&gt;
              &lt;xsl:with-param name="doc" select="$doc"/&gt;
              &lt;xsl:with-param name="code" select="."/&gt;
            &lt;/xsl:call-template&gt;
            &lt;xsl:call-template name="subdoc"&gt;
              &lt;xsl:with-param name="code" select="."/&gt;
              &lt;xsl:with-param name="parentdoc" select="$doc"/&gt;
            &lt;/xsl:call-template&gt;
          &lt;/xsl:when&gt;

          &lt;!-- When the first preceding sibling is a p:documentation and is not targeting another element, use it --&gt;
          &lt;xsl:when test="(name(preceding-sibling::*[1]) = 'xd:doc' or name(preceding-sibling::*[1]) = 'xsltdoc:doc') and not(preceding-sibling::*[1]/@target = 'parent') and not(generate-id(preceding-sibling::*[1]) = generate-id($parentdoc))"&gt;
            &lt;xsl:variable name="doc" select="preceding-sibling::*[1]"/&gt;
            &lt;xsl:call-template name="doc"&gt;
              &lt;xsl:with-param name="doc" select="$doc"/&gt;
              &lt;xsl:with-param name="code" select="."/&gt;
            &lt;/xsl:call-template&gt;
            &lt;xsl:call-template name="subdoc"&gt;
              &lt;xsl:with-param name="code" select="."/&gt;
              &lt;xsl:with-param name="parentdoc" select="$doc"/&gt;
            &lt;/xsl:call-template&gt;
          &lt;/xsl:when&gt;

          &lt;!-- The element has no documentation, and it's not the root element so don't document it --&gt;
          &lt;xsl:otherwise&gt;
            &lt;xsl:call-template name="subdoc"&gt;
              &lt;xsl:with-param name="code" select="."/&gt;
              &lt;xsl:with-param name="parentdoc" select="$parentdoc"/&gt;
            &lt;/xsl:call-template&gt;
          &lt;/xsl:otherwise&gt;

        &lt;/xsl:choose&gt;
      &lt;/xsl:for-each&gt;
    &lt;/xsl:if&gt;
  &lt;/xsl:template&gt;</codeblock>
   </section>
</reference>