<reference id="d13511e241">
   <title>xsl:template - pipedoc</title>
   <abstract>
      <shortdesc>Documents an element using its corresponding p:documentation element.</shortdesc>
    
    This is where the main action happens. Relevant bits of information are retrieved and
      structured as DITA-XML.
    
    
  </abstract>
   <prolog>
      <metadata>
         <audience type="programmer" job="programming" experiencelevel="expert"/>
         <othermeta name="programming-language" content="XSLT"/>
      </metadata>
   </prolog>
   <refbody>
      <section>
         <apiname>xsl:template - pipedoc</apiname>
      </section>
      <section outputclass="parameters xslt-params">
         <title outputclass="io-header">Parameters (xsl:param / xsl:with-param)</title>
         <parml outputclass="xslt-params">
            <plentry>
               <pt>code</pt>
               <pt>undefined</pt>
               <pt>false</pt>
               <pt>no</pt>
               <pd>Contains the XProc code to be documentated.</pd>
            </plentry>
            <plentry>
               <pt>doc</pt>
               <pt>undefined</pt>
               <pt>false</pt>
               <pt>no</pt>
               <pd>Contains the p:documentation used as documentation.</pd>
            </plentry>
         </parml>
      </section>
   </refbody>
   <section outputclass="sourcecode">
      <title outputclass="sourcecode-header">Source Code</title>
      <codeblock>&lt;xsl:template xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:p="http://www.w3.org/ns/xproc" xmlns:xd="http://pipeline.daisy.org/ns/sample/doc" name="pipedoc"&gt;
    &lt;xsl:param name="code" required="yes"/&gt;
    &lt;xsl:param name="doc" required="yes"/&gt;

    &lt;reference id="{generate-id($code)}"&gt;
      &lt;title&gt;
        &lt;xsl:value-of select="name($code)"/&gt;
        &lt;xsl:if test="$code/@name"&gt; - &lt;xsl:value-of select="$code/@name"/&gt;
        &lt;/xsl:if&gt;
      &lt;/title&gt;

      &lt;abstract&gt;
        &lt;shortdesc&gt;
          &lt;xsl:apply-templates select="$doc/xd:short"/&gt;
        &lt;/shortdesc&gt;
        &lt;xsl:apply-templates select="$doc/xd:detail"/&gt;
      &lt;/abstract&gt;

      &lt;prolog&gt;
        &lt;xsl:for-each select="$doc/xd:author | $doc/xd:contributor | $doc/xd:maintainer"&gt;
          &lt;author&gt;
            &lt;xsl:choose&gt;
              &lt;xsl:when test="local-name() = 'author'"&gt;
                &lt;xsl:attribute name="type"&gt;creator&lt;/xsl:attribute&gt;
              &lt;/xsl:when&gt;
              &lt;xsl:when test="local-name() = 'contributor'"&gt;
                &lt;xsl:attribute name="type"&gt;contributor&lt;/xsl:attribute&gt;
              &lt;/xsl:when&gt;
              &lt;xsl:when test="local-name() = 'maintainer'"&gt;
                &lt;xsl:attribute name="type"&gt;maintainer&lt;/xsl:attribute&gt;
              &lt;/xsl:when&gt;
            &lt;/xsl:choose&gt;
            &lt;xsl:apply-templates select="./xd:name"/&gt;
            &lt;xsl:if test="./xd:name and ./xd:mailto"&gt; (&lt;/xsl:if&gt;
            &lt;xsl:apply-templates select="./xd:mailto"/&gt;
            &lt;xsl:if test="./xd:name and ./xd:mailto"&gt;)&lt;/xsl:if&gt;
            &lt;xsl:if test="(./xd:name or ./xd:mailto) and ./xd:organization"&gt;, &lt;/xsl:if&gt;
            &lt;xsl:apply-templates select="./xd:organization"/&gt;
          &lt;/author&gt;
        &lt;/xsl:for-each&gt;
        &lt;xsl:for-each select="$doc/xd:copyright"&gt;
          &lt;copyright&gt;
            &lt;copyryear&gt;
              &lt;xsl:attribute name="year"&gt;
                &lt;xsl:apply-templates select="./xd:year"/&gt;
              &lt;/xsl:attribute&gt;
            &lt;/copyryear&gt;
            &lt;copyrholder&gt;
              &lt;xsl:apply-templates select="./xd:holder"/&gt;
            &lt;/copyrholder&gt;
          &lt;/copyright&gt;
        &lt;/xsl:for-each&gt;
        &lt;metadata&gt;
          &lt;audience type="programmer" job="programming" experiencelevel="expert"/&gt;
          &lt;othermeta name="programming-language" content="XProc"/&gt;
          &lt;xsl:for-each select="$doc/xd:version"&gt;
            &lt;othermeta name="version"&gt;
              &lt;xsl:attribute name="content"&gt;
                &lt;xsl:value-of select="./text()"/&gt;
              &lt;/xsl:attribute&gt;
            &lt;/othermeta&gt;
          &lt;/xsl:for-each&gt;
          &lt;xsl:for-each select="$doc/xd:since"&gt;
            &lt;othermeta name="since"&gt;
              &lt;xsl:attribute name="content"&gt;
                &lt;xsl:value-of select="./text()"/&gt;
              &lt;/xsl:attribute&gt;
            &lt;/othermeta&gt;
          &lt;/xsl:for-each&gt;
          &lt;!--xsl:for-each select="$doc/xd:see"&gt;
            &lt;othermeta name="see"&gt;
              &lt;xsl:attribute name="content"&gt;
                &lt;xsl:value-of select="./text()"/&gt;
              &lt;/xsl:attribute&gt;
            &lt;/othermeta&gt;
          &lt;/xsl:for-each--&gt;
          &lt;xsl:for-each select="$doc/xd:deprecated"&gt;
            &lt;othermeta name="deprecated"&gt;
              &lt;xsl:attribute name="content"&gt;
                &lt;xsl:value-of select="./text()"/&gt;
              &lt;/xsl:attribute&gt;
            &lt;/othermeta&gt;
          &lt;/xsl:for-each&gt;

          &lt;!-- XProc version --&gt;
          &lt;xsl:if test="$code/@version or $code/@p:version"&gt;
            &lt;othermeta name="xproc-version"&gt;
              &lt;xsl:attribute name="content"&gt;
                &lt;xsl:value-of select="$code/@version | $code/@p:version"/&gt;
              &lt;/xsl:attribute&gt;
            &lt;/othermeta&gt;
          &lt;/xsl:if&gt;

          &lt;!-- XPath version --&gt;
          &lt;xsl:if test="$code/@xpath-version or $code/@p:xpath-version"&gt;
            &lt;othermeta name="xpath-version"&gt;
              &lt;xsl:attribute name="content"&gt;
                &lt;xsl:value-of select="$code/@xpath-version | $code/@p:xpath-version"/&gt;
              &lt;/xsl:attribute&gt;
            &lt;/othermeta&gt;
          &lt;/xsl:if&gt;
        &lt;/metadata&gt;
      &lt;/prolog&gt;

      &lt;refbody&gt;
        &lt;section&gt;
          &lt;apiname&gt;
            &lt;xsl:choose&gt;
              &lt;xsl:when test="$code/@name"&gt;
                &lt;xsl:value-of select="$code/@name"/&gt;
              &lt;/xsl:when&gt;
              &lt;xsl:otherwise&gt;
                &lt;xsl:value-of select="name($code)"/&gt;
              &lt;/xsl:otherwise&gt;
            &lt;/xsl:choose&gt;
          &lt;/apiname&gt;
        &lt;/section&gt;
        &lt;xsl:if test="count($code/p:input)&amp;gt;0"&gt;
          &lt;section outputclass="parameters xproc-inputs"&gt;
            &lt;title outputclass="io-header"&gt;Inputs&lt;/title&gt;
            &lt;parml outputclass="xproc-inputs"&gt;
              &lt;xsl:choose&gt;
                &lt;xsl:when test="$code/p:input"&gt;
                  &lt;!--plentry&gt;
                  &lt;pt&gt;Name&lt;/pt&gt;
                  &lt;pt&gt;Primary&lt;/pt&gt;
                  &lt;pt&gt;Sequence&lt;/pt&gt;
                  &lt;pt&gt;Connection&lt;/pt&gt;
                  &lt;pd&gt;Description&lt;/pd&gt;
                &lt;/plentry--&gt;
                  &lt;xsl:for-each select="$code/p:input"&gt;
                    &lt;plentry&gt;
                      &lt;pt&gt;
                        &lt;xsl:value-of select="@port"/&gt;
                      &lt;/pt&gt;
                      &lt;pt&gt;
                        &lt;xsl:choose&gt;
                          &lt;xsl:when test="count($code/p:input) = 1 or @primary = 'true'"&gt;true&lt;/xsl:when&gt;
                          &lt;xsl:otherwise&gt;false&lt;/xsl:otherwise&gt;
                        &lt;/xsl:choose&gt;
                      &lt;/pt&gt;
                      &lt;pt&gt;
                        &lt;xsl:choose&gt;
                          &lt;xsl:when test="@sequence = 'true'"&gt;true&lt;/xsl:when&gt;
                          &lt;xsl:when test="@sequence = 'false'"&gt;false&lt;/xsl:when&gt;
                          &lt;xsl:otherwise/&gt;
                        &lt;/xsl:choose&gt;
                      &lt;/pt&gt;
                      &lt;pt&gt;
                        &lt;xsl:choose&gt;
                          &lt;xsl:when test="not(count(p:empty | p:inline | p:data | p:document | p:pipe) = 1)"/&gt;
                          &lt;xsl:when test="p:empty"&gt;empty&lt;/xsl:when&gt;
                          &lt;xsl:when test="p:inline"&gt;inline&lt;/xsl:when&gt;
                          &lt;xsl:when test="p:data"&gt;
                            &lt;xsl:value-of select="p:data/@href"/&gt;
                          &lt;/xsl:when&gt;
                          &lt;xsl:when test="p:document"&gt;
                            &lt;xsl:value-of select="p:document/@href"/&gt;
                          &lt;/xsl:when&gt;
                          &lt;xsl:when test="p:pipe"&gt;
                            &lt;xsl:value-of select="concat(p:pipe/@port,'@',p:pipe/@step)"/&gt;
                          &lt;/xsl:when&gt;
                        &lt;/xsl:choose&gt;
                      &lt;/pt&gt;
                      &lt;pd&gt;
                        &lt;xsl:variable name="port" select="@port"/&gt;
                        &lt;xsl:apply-templates select="$doc/xd:input[@port=$port]"/&gt;
                      &lt;/pd&gt;
                    &lt;/plentry&gt;
                  &lt;/xsl:for-each&gt;
                &lt;/xsl:when&gt;
                &lt;xsl:otherwise&gt;
                  &lt;plentry&gt;
                    &lt;pt/&gt;
                    &lt;pt/&gt;
                    &lt;pt/&gt;
                    &lt;pt&gt;Implicit&lt;/pt&gt;
                    &lt;pd&gt;
                      &lt;xsl:value-of select="$doc/xd:input"/&gt;
                    &lt;/pd&gt;
                  &lt;/plentry&gt;
                &lt;/xsl:otherwise&gt;
              &lt;/xsl:choose&gt;
            &lt;/parml&gt;
          &lt;/section&gt;
        &lt;/xsl:if&gt;

        &lt;xsl:if test="count($code/p:output)&amp;gt;0"&gt;
          &lt;section outputclass="parameters xproc-outputs"&gt;
            &lt;title outputclass="io-header"&gt;Outputs&lt;/title&gt;
            &lt;parml outputclass="xproc-outputs"&gt;
              &lt;xsl:choose&gt;
                &lt;xsl:when test="$code/p:output"&gt;
                  &lt;!--plentry&gt;
                  &lt;pt&gt;Name&lt;/pt&gt;
                  &lt;pt&gt;Primary&lt;/pt&gt;
                  &lt;pt&gt;Sequence&lt;/pt&gt;
                  &lt;pt&gt;Connection&lt;/pt&gt;
                  &lt;pd&gt;Description&lt;/pd&gt;
                &lt;/plentry--&gt;
                  &lt;xsl:for-each select="$code/p:output"&gt;
                    &lt;plentry&gt;
                      &lt;pt&gt;
                        &lt;xsl:value-of select="@port"/&gt;
                      &lt;/pt&gt;
                      &lt;pt&gt;
                        &lt;xsl:choose&gt;
                          &lt;xsl:when test="count($code/p:output) = 1 or @primary = 'true'"&gt;true&lt;/xsl:when&gt;
                          &lt;xsl:otherwise&gt;false&lt;/xsl:otherwise&gt;
                        &lt;/xsl:choose&gt;
                      &lt;/pt&gt;
                      &lt;pt&gt;
                        &lt;xsl:choose&gt;
                          &lt;xsl:when test="@sequence = 'true'"&gt;true&lt;/xsl:when&gt;
                          &lt;xsl:when test="@sequence = 'false'"&gt;false&lt;/xsl:when&gt;
                          &lt;xsl:otherwise/&gt;
                        &lt;/xsl:choose&gt;
                      &lt;/pt&gt;
                      &lt;pt&gt;
                        &lt;xsl:choose&gt;
                          &lt;xsl:when test="not(count(p:empty | p:inline | p:data | p:document | p:pipe) = 1)"/&gt;
                          &lt;xsl:when test="p:empty"&gt;empty&lt;/xsl:when&gt;
                          &lt;xsl:when test="p:inline"&gt;inline&lt;/xsl:when&gt;
                          &lt;xsl:when test="p:data"&gt;
                            &lt;xsl:value-of select="p:data/@href"/&gt;
                          &lt;/xsl:when&gt;
                          &lt;xsl:when test="p:document"&gt;
                            &lt;xsl:value-of select="p:document/@href"/&gt;
                          &lt;/xsl:when&gt;
                          &lt;xsl:when test="p:pipe"&gt;
                            &lt;xsl:value-of select="concat(p:pipe/@port,'@',p:pipe/@step)"/&gt;
                          &lt;/xsl:when&gt;
                        &lt;/xsl:choose&gt;
                      &lt;/pt&gt;
                      &lt;pd&gt;
                        &lt;xsl:variable name="port" select="@port"/&gt;
                        &lt;xsl:apply-templates select="$doc/xd:output[@port=$port]"/&gt;
                      &lt;/pd&gt;
                    &lt;/plentry&gt;
                  &lt;/xsl:for-each&gt;
                &lt;/xsl:when&gt;
                &lt;xsl:otherwise&gt;
                  &lt;plentry&gt;
                    &lt;pt/&gt;
                    &lt;pt/&gt;
                    &lt;pt/&gt;
                    &lt;pt&gt;Implicit&lt;/pt&gt;
                    &lt;pd&gt;
                      &lt;xsl:value-of select="$doc/xd:output"/&gt;
                    &lt;/pd&gt;
                  &lt;/plentry&gt;
                &lt;/xsl:otherwise&gt;
              &lt;/xsl:choose&gt;
            &lt;/parml&gt;
          &lt;/section&gt;
        &lt;/xsl:if&gt;

        &lt;xsl:if test="$code/p:option | $code/p:with-option"&gt;
          &lt;section outputclass="parameters xproc-options"&gt;
            &lt;title outputclass="io-header"&gt;Options&lt;/title&gt;
            &lt;parml outputclass="xproc-options"&gt;
              &lt;xsl:choose&gt;
                &lt;xsl:when test="count($code/p:with-option) &amp;gt; 0"&gt;
                  &lt;xsl:attribute name="outputclass" select="'xproc-options xproc-with-options'"/&gt;
                &lt;/xsl:when&gt;
                &lt;xsl:otherwise&gt;
                  &lt;xsl:attribute name="outputclass" select="'xproc-options'"/&gt;
                &lt;/xsl:otherwise&gt;
              &lt;/xsl:choose&gt;
              &lt;!--plentry&gt;
                &lt;pt&gt;Name&lt;/pt&gt;
                &lt;pd&gt;Required&lt;/pd&gt;
                &lt;xsl:if test="count($code/p:with-option) &gt; 0"&gt;
                &lt;pd&gt;Connection&lt;/pd&gt;
                &lt;/xsl:if&gt;
                &lt;pd&gt;Description&lt;/pd&gt;
                &lt;/plentry--&gt;
              &lt;xsl:for-each select="$code/p:option | $code/p:with-option"&gt;
                &lt;plentry&gt;
                  &lt;pt&gt;
                    &lt;xsl:value-of select="@name"/&gt;
                  &lt;/pt&gt;
                  &lt;pt&gt;
                    &lt;xsl:choose&gt;
                      &lt;xsl:when test="name(.) = 'p:with-option' and not(@required)"/&gt;
                      &lt;xsl:when test="@required = 'false'"&gt;false&lt;/xsl:when&gt;
                      &lt;xsl:when test="@required = 'true'"&gt;true&lt;/xsl:when&gt;
                      &lt;xsl:otherwise/&gt;
                    &lt;/xsl:choose&gt;
                  &lt;/pt&gt;
                  &lt;xsl:if test="name(.) = 'p:with-option'"&gt;
                    &lt;pt&gt;
                      &lt;xsl:choose&gt;
                        &lt;xsl:when test="not(count(p:empty | p:inline | p:data | p:document | p:pipe) = 1)"/&gt;
                        &lt;xsl:when test="p:empty"&gt;empty&lt;/xsl:when&gt;
                        &lt;xsl:when test="p:inline"&gt;inline&lt;/xsl:when&gt;
                        &lt;xsl:when test="p:data"&gt;
                          &lt;xsl:value-of select="p:data/@href"/&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="p:document"&gt;
                          &lt;xsl:value-of select="p:document/@href"/&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="p:pipe"&gt;
                          &lt;xsl:value-of select="concat(p:pipe/@port,'@',p:pipe/@step)"/&gt;
                        &lt;/xsl:when&gt;
                      &lt;/xsl:choose&gt;
                    &lt;/pt&gt;
                  &lt;/xsl:if&gt;
                  &lt;pd&gt;
                    &lt;xsl:variable name="port" select="@port"/&gt;
                    &lt;xsl:apply-templates select="$doc/xd:option[@port=$port]"/&gt;
                  &lt;/pd&gt;
                &lt;/plentry&gt;
              &lt;/xsl:for-each&gt;
            &lt;/parml&gt;
          &lt;/section&gt;
        &lt;/xsl:if&gt;

        &lt;xsl:if test="$code/p:with-param"&gt;
          &lt;section outputclass="parameters xproc-with-params"&gt;
            &lt;title outputclass="io-header"&gt;Parameters&lt;/title&gt;
            &lt;parml outputclass="xproc-with-params"&gt;
              &lt;xsl:attribute name="outputclass" select="'xproc-with-params'"/&gt;
              &lt;!--plentry&gt;
                &lt;pt&gt;Name&lt;/pt&gt;
                &lt;pd&gt;Required&lt;/pd&gt;
                &lt;xsl:if test="count($code/p:with-param) &gt; 0"&gt;
                &lt;pd&gt;Connection&lt;/pd&gt;
                &lt;/xsl:if&gt;
                &lt;pd&gt;Description&lt;/pd&gt;
                &lt;/plentry--&gt;
              &lt;xsl:for-each select="$code/p:with-param"&gt;
                &lt;plentry&gt;
                  &lt;pt&gt;
                    &lt;xsl:value-of select="@port"/&gt;
                  &lt;/pt&gt;
                  &lt;pt&gt;
                    &lt;xsl:choose&gt;
                      &lt;xsl:when test="not(count(p:empty | p:inline | p:data | p:document | p:pipe) = 1)"/&gt;
                      &lt;xsl:when test="p:empty"&gt;empty&lt;/xsl:when&gt;
                      &lt;xsl:when test="p:inline"&gt;inline&lt;/xsl:when&gt;
                      &lt;xsl:when test="p:data"&gt;
                        &lt;xsl:value-of select="p:data/@href"/&gt;
                      &lt;/xsl:when&gt;
                      &lt;xsl:when test="p:document"&gt;
                        &lt;xsl:value-of select="p:document/@href"/&gt;
                      &lt;/xsl:when&gt;
                      &lt;xsl:when test="p:pipe"&gt;
                        &lt;xsl:value-of select="concat(p:pipe/@port,'@',p:pipe/@step)"/&gt;
                      &lt;/xsl:when&gt;
                    &lt;/xsl:choose&gt;
                  &lt;/pt&gt;
                  &lt;pd&gt;
                    &lt;xsl:variable name="name" select="@name"/&gt;
                    &lt;xsl:apply-templates select="$doc/xd:param[@name=$name]"/&gt;
                  &lt;/pd&gt;
                &lt;/plentry&gt;
              &lt;/xsl:for-each&gt;
            &lt;/parml&gt;
          &lt;/section&gt;
        &lt;/xsl:if&gt;

      &lt;/refbody&gt;

      &lt;xsl:if test="count($code//p:import) &amp;gt; 0 or count($code//p:document) &amp;gt; 0 or count($doc/xd:see) &amp;gt; 0"&gt;
        &lt;related-links&gt;
          &lt;xsl:if test="count($code//p:import) &amp;gt; 0"&gt;
            &lt;linklist&gt;
              &lt;title&gt;Dependencies (p:import)&lt;/title&gt;
              &lt;xsl:for-each select="$code//p:import"&gt;
                &lt;link href="{@href}" format="ditamap"/&gt;
              &lt;/xsl:for-each&gt;
              &lt;linkinfo&gt;These dependencies are derived from the p:import statements from the XProc
                script.&lt;/linkinfo&gt;
            &lt;/linklist&gt;
          &lt;/xsl:if&gt;
          &lt;xsl:if test="count($code//p:document) &amp;gt; 0"&gt;
            &lt;linklist&gt;
              &lt;title&gt;Dependencies (p:document)&lt;/title&gt;
              &lt;xsl:for-each select="$code//p:document"&gt;
                &lt;link href="{@href}" format="ditamap"/&gt;
              &lt;/xsl:for-each&gt;
              &lt;linkinfo&gt;These dependencies are derived from documents loaded with the p:document
                step in the XProc script.&lt;/linkinfo&gt;
            &lt;/linklist&gt;
          &lt;/xsl:if&gt;
          &lt;xsl:if test="count($doc/xd:see) &amp;gt; 0"&gt;
            &lt;linklist&gt;
              &lt;title&gt;See also&lt;/title&gt;
              &lt;xsl:for-each select="$doc/xd:see"&gt;
                &lt;link href="{./text()}" format="ditamap"/&gt;
              &lt;/xsl:for-each&gt;
              &lt;linkinfo&gt;These are related readings suggested by the author of the XProc
                script.&lt;/linkinfo&gt;
            &lt;/linklist&gt;
          &lt;/xsl:if&gt;
        &lt;/related-links&gt;
      &lt;/xsl:if&gt;
      
      &lt;section outputclass="sourcecode"&gt;
        &lt;title outputclass="sourcecode-header"&gt;Source Code&lt;/title&gt;
        &lt;codeblock&gt;
          &lt;xsl:for-each select="$code"&gt;
            &lt;xsl:call-template name="xml-to-string"/&gt;
          &lt;/xsl:for-each&gt;
        &lt;/codeblock&gt;
      &lt;/section&gt;
    &lt;/reference&gt;

  &lt;/xsl:template&gt;</codeblock>
   </section>
</reference>