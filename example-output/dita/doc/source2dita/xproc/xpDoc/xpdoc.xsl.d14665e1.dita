<reference id="d14665e1">
   <title>xsl:stylesheet</title>
   <abstract>
      <shortdesc>
         <xd:short xmlns:xd="http://pipeline.daisy.org/ns/sample/doc" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:p="http://www.w3.org/ns/xproc">Transforms the input XProc document to a DITA Reference Topic.</xd:short>
      </shortdesc>
   </abstract>
   <prolog>
      <author type="creator">
         <xd:name xmlns:xd="http://pipeline.daisy.org/ns/sample/doc" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:p="http://www.w3.org/ns/xproc">Jostein Austvik Jacobsen</xd:name> (<xd:mailto xmlns:xd="http://pipeline.daisy.org/ns/sample/doc" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:p="http://www.w3.org/ns/xproc">josteinaj@gmail.com</xd:mailto>), <xd:organization xmlns:xd="http://pipeline.daisy.org/ns/sample/doc" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:p="http://www.w3.org/ns/xproc">NLB</xd:organization>
      </author>
      <copyright>
         <copyryear year="2010"/>
         <copyrholder>
            <xd:holder xmlns:xd="http://pipeline.daisy.org/ns/sample/doc" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:p="http://www.w3.org/ns/xproc">DAISY Consortium</xd:holder>
         </copyrholder>
      </copyright>
      <metadata>
         <audience type="programmer" job="programming" experiencelevel="expert"/>
         <othermeta name="programming-language" content="XSLT"/>
         <othermeta name="version" content="0.1"/>
         <othermeta name="xslt-version" content="2.0"/>
         <othermeta name="xpath-version" content="2.0"/>
      </metadata>
   </prolog>
   <refbody>
      <section>
         <apiname>xsl:stylesheet</apiname>
      </section>
      <section outputclass="parameters xslt-outputs">
         <title outputclass="io-header">Outputs (xsl:output)</title>
         <parml outputclass="xslt-outputs">
            <pt/>
            <pt>xml</pt>
            <pt>yes</pt>
            <pt/>
            <pt/>
            <pt>yes</pt>
            <pt>UTF-8</pt>
            <pt>text/xml</pt>
            <pt>no</pt>
            <pt>omit</pt>
            <pt/>
            <pd/>
         </parml>
      </section>
   </refbody>
   <related-links>
      <linklist>
         <title>Dependencies (xsl:import)</title>
         <link format="ditamap" href="../../../lib/xml-to-string.xsl.ditamap"/>
         <linkinfo>These dependencies are derived from the xsl:import statements.</linkinfo>
      </linklist>
   </related-links>
   <section outputclass="sourcecode">
      <title outputclass="sourcecode-header">Source Code</title>
      <codeblock>&lt;xsl:stylesheet exclude-result-prefixes="#all" version="2.0" xmlns:p="http://www.w3.org/ns/xproc" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:xd="http://pipeline.daisy.org/ns/sample/doc"&gt;
  
  &lt;xsl:import href="../../../lib/xml-to-string.xsl"/&gt;
  
  &lt;xd:doc target="parent"&gt;
    &lt;xd:short&gt;Transforms the input XProc document to a DITA Reference Topic.&lt;/xd:short&gt;
    &lt;xd:author&gt;
      &lt;xd:name&gt;Jostein Austvik Jacobsen&lt;/xd:name&gt;
      &lt;xd:mailto&gt;josteinaj@gmail.com&lt;/xd:mailto&gt;
      &lt;xd:organization&gt;NLB&lt;/xd:organization&gt;
    &lt;/xd:author&gt;
    &lt;xd:copyright&gt;
      &lt;xd:year&gt;2010&lt;/xd:year&gt;
      &lt;xd:holder&gt;DAISY Consortium&lt;/xd:holder&gt;
    &lt;/xd:copyright&gt;
    &lt;xd:version&gt;0.1&lt;/xd:version&gt;
  &lt;/xd:doc&gt;

  &lt;xsl:output method="xml" indent="yes" encoding="UTF-8"/&gt;

  &lt;xd:doc target="following"&gt;
    &lt;xd:short&gt;Override the "/" template in &lt;xd:code&gt;xml-to-string.xsl&lt;/xd:code&gt;.&lt;/xd:short&gt;
  &lt;/xd:doc&gt;
  &lt;xsl:template match="/"&gt;
    &lt;xsl:apply-templates/&gt;
  &lt;/xsl:template&gt;
  
  &lt;xd:doc target="following"&gt;
    &lt;xd:short&gt;Identity template.&lt;/xd:short&gt;
  &lt;/xd:doc&gt;
  &lt;xsl:template match="@*|node()"&gt;
    &lt;xsl:copy&gt;
      &lt;xsl:apply-templates select="@*|node()"/&gt;
    &lt;/xsl:copy&gt;
  &lt;/xsl:template&gt;

  &lt;xd:doc target="following"&gt;
    &lt;xd:short&gt;Main template&lt;/xd:short&gt;
    &lt;xd:detail&gt;Creates the top element &amp;lt;dita&gt;, determines how to document the XProc script
      itself, and recurses throught the code looking for p:documentation elements.&lt;/xd:detail&gt;
  &lt;/xd:doc&gt;
  &lt;xsl:template match="/*"&gt;
    &lt;dita&gt;
      &lt;xsl:choose&gt;

        &lt;!-- When the root element contains a p:documentation child targeting it, use it --&gt;
        &lt;xsl:when test="./p:documentation[@xd:target='parent']"&gt;
          &lt;xsl:variable name="parentdoc" select="./p:documentation[@xd:target='parent'][1]"/&gt;
          &lt;xsl:call-template name="pipedoc"&gt;
            &lt;xsl:with-param name="doc" select="$parentdoc"/&gt;
            &lt;xsl:with-param name="code" select="."/&gt;
          &lt;/xsl:call-template&gt;
          &lt;xsl:call-template name="subdoc"&gt;
            &lt;xsl:with-param name="code" select="."/&gt;
            &lt;xsl:with-param name="parentdoc" select="$parentdoc"/&gt;
          &lt;/xsl:call-template&gt;
        &lt;/xsl:when&gt;

        &lt;!-- When the first child of the root element is a p:documentation and is not targeting another element, use it --&gt;
        &lt;xsl:when test="name(./*[1]) = 'p:documentation' and not(./*[1]/@xd:target = 'following')"&gt;
          &lt;xsl:variable name="parentdoc" select="./*[1]"/&gt;
          &lt;xsl:call-template name="pipedoc"&gt;
            &lt;xsl:with-param name="doc" select="$parentdoc"/&gt;
            &lt;xsl:with-param name="code" select="."/&gt;
          &lt;/xsl:call-template&gt;
          &lt;xsl:call-template name="subdoc"&gt;
            &lt;xsl:with-param name="code" select="."/&gt;
            &lt;xsl:with-param name="parentdoc" select="$parentdoc"/&gt;
          &lt;/xsl:call-template&gt;
        &lt;/xsl:when&gt;

        &lt;!-- The root element is not documented. Create some empty documentation for it. --&gt;
        &lt;xsl:otherwise&gt;
          &lt;xsl:call-template name="pipedoc"&gt;
            &lt;xsl:with-param name="doc"&gt;
              &lt;p:documentation/&gt;
            &lt;/xsl:with-param&gt;
            &lt;xsl:with-param name="code" select="."/&gt;
          &lt;/xsl:call-template&gt;
          &lt;xsl:call-template name="subdoc"&gt;
            &lt;xsl:with-param name="code" select="."/&gt;
          &lt;/xsl:call-template&gt;
        &lt;/xsl:otherwise&gt;

      &lt;/xsl:choose&gt;
    &lt;/dita&gt;
  &lt;/xsl:template&gt;

  &lt;xd:doc target="following"&gt;
    &lt;xd:short&gt;Recursive template that looks for p:documentation elements.&lt;/xd:short&gt;
    &lt;xd:detail&gt;If there is a p:documentation belonging to the current element; document the current
      element using it. At the same time; recurse further through the script looking for more
      elements to be documented.&lt;/xd:detail&gt;
    &lt;xd:param name="code"&gt;Contains the element to be evaluted for documentation.&lt;/xd:param&gt;
    &lt;xd:param name="parentdoc"&gt;The p:documentation used to document the closest documented ancestor
      (used to make sure it isn't used twice).&lt;/xd:param&gt;
  &lt;/xd:doc&gt;
  &lt;xsl:template name="subdoc"&gt;
    &lt;xsl:param name="code" required="yes"/&gt;
    &lt;xsl:param name="parentdoc"/&gt;

    &lt;xsl:if test="not(name($code) = 'p:documentation')"&gt;
      &lt;xsl:for-each select="$code/*"&gt;
        &lt;xsl:choose&gt;
          &lt;!-- Don't document the documentation ;) --&gt;
          &lt;xsl:when test="name(.) = 'p:documentation'"/&gt;

          &lt;!-- When the current element contains a p:documentation child targeting it, use it --&gt;
          &lt;xsl:when test="./p:documentation[@xd:target='parent'][1] and not(generate-id(./p:documentation[@xd:target='parent'][1]) = generate-id($parentdoc))"&gt;
            &lt;xsl:variable name="doc" select="./p:documentation[@xd:target='parent'][1]"/&gt;
            &lt;xsl:call-template name="pipedoc"&gt;
              &lt;xsl:with-param name="doc" select="$doc"/&gt;
              &lt;xsl:with-param name="code" select="."/&gt;
            &lt;/xsl:call-template&gt;
            &lt;xsl:call-template name="subdoc"&gt;
              &lt;xsl:with-param name="code" select="."/&gt;
              &lt;xsl:with-param name="parentdoc" select="$doc"/&gt;
            &lt;/xsl:call-template&gt;
          &lt;/xsl:when&gt;

          &lt;!-- When the first child of the current element is a p:documentation and is not targeting another element, use it --&gt;
          &lt;xsl:when test="name(./*[1]) = 'p:documentation' and not(./*[1]/@xd:target = 'following') and not(generate-id(./*[1]) = generate-id($parentdoc))"&gt;
            &lt;xsl:variable name="doc" select="./*[1]"/&gt;
            &lt;xsl:call-template name="pipedoc"&gt;
              &lt;xsl:with-param name="doc" select="$doc"/&gt;
              &lt;xsl:with-param name="code" select="."/&gt;
            &lt;/xsl:call-template&gt;
            &lt;xsl:call-template name="subdoc"&gt;
              &lt;xsl:with-param name="code" select="."/&gt;
              &lt;xsl:with-param name="parentdoc" select="$doc"/&gt;
            &lt;/xsl:call-template&gt;
          &lt;/xsl:when&gt;

          &lt;!-- When the first preceding sibling is a p:documentation and is not targeting another element, use it --&gt;
          &lt;xsl:when test="name(preceding-sibling::*[1]) = 'p:documentation' and not(preceding-sibling::*[1]/@xd:target = 'parent') and not(generate-id(preceding-sibling::*[1]) = generate-id($parentdoc))"&gt;
            &lt;xsl:variable name="doc" select="preceding-sibling::*[1]"/&gt;
            &lt;xsl:call-template name="pipedoc"&gt;
              &lt;xsl:with-param name="doc" select="$doc"/&gt;
              &lt;xsl:with-param name="code" select="."/&gt;
            &lt;/xsl:call-template&gt;
            &lt;xsl:call-template name="subdoc"&gt;
              &lt;xsl:with-param name="code" select="."/&gt;
              &lt;xsl:with-param name="parentdoc" select="$doc"/&gt;
            &lt;/xsl:call-template&gt;
          &lt;/xsl:when&gt;

          &lt;!-- The element has no documentation, and it's not the root element so don't document it --&gt;
          &lt;xsl:otherwise&gt;
            &lt;xsl:call-template name="subdoc"&gt;
              &lt;xsl:with-param name="code" select="."/&gt;
              &lt;xsl:with-param name="parentdoc" select="$parentdoc"/&gt;
            &lt;/xsl:call-template&gt;
          &lt;/xsl:otherwise&gt;

        &lt;/xsl:choose&gt;
      &lt;/xsl:for-each&gt;
    &lt;/xsl:if&gt;
  &lt;/xsl:template&gt;

  &lt;xd:doc target="following"&gt;
    &lt;xd:short&gt;Documents an element using its corresponding p:documentation element.&lt;/xd:short&gt;
    &lt;xd:detail&gt;This is where the main action happens. Relevant bits of information are retrieved and
      structured as DITA-XML.&lt;/xd:detail&gt;
    &lt;xd:param name="code"&gt;Contains the XProc code to be documentated.&lt;/xd:param&gt;
    &lt;xd:param name="doc"&gt;Contains the p:documentation used as documentation.&lt;/xd:param&gt;
  &lt;/xd:doc&gt;
  &lt;xsl:template name="pipedoc"&gt;
    &lt;xsl:param name="code" required="yes"/&gt;
    &lt;xsl:param name="doc" required="yes"/&gt;

    &lt;reference id="{generate-id($code)}"&gt;
      &lt;title&gt;
        &lt;xsl:value-of select="name($code)"/&gt;
        &lt;xsl:if test="$code/@name"&gt; - &lt;xsl:value-of select="$code/@name"/&gt;
        &lt;/xsl:if&gt;
      &lt;/title&gt;

      &lt;abstract&gt;
        &lt;shortdesc&gt;
          &lt;xsl:apply-templates select="$doc/xd:short"/&gt;
        &lt;/shortdesc&gt;
        &lt;xsl:apply-templates select="$doc/xd:detail"/&gt;
      &lt;/abstract&gt;

      &lt;prolog&gt;
        &lt;xsl:for-each select="$doc/xd:author | $doc/xd:contributor | $doc/xd:maintainer"&gt;
          &lt;author&gt;
            &lt;xsl:choose&gt;
              &lt;xsl:when test="local-name() = 'author'"&gt;
                &lt;xsl:attribute name="type"&gt;creator&lt;/xsl:attribute&gt;
              &lt;/xsl:when&gt;
              &lt;xsl:when test="local-name() = 'contributor'"&gt;
                &lt;xsl:attribute name="type"&gt;contributor&lt;/xsl:attribute&gt;
              &lt;/xsl:when&gt;
              &lt;xsl:when test="local-name() = 'maintainer'"&gt;
                &lt;xsl:attribute name="type"&gt;maintainer&lt;/xsl:attribute&gt;
              &lt;/xsl:when&gt;
            &lt;/xsl:choose&gt;
            &lt;xsl:apply-templates select="./xd:name"/&gt;
            &lt;xsl:if test="./xd:name and ./xd:mailto"&gt; (&lt;/xsl:if&gt;
            &lt;xsl:apply-templates select="./xd:mailto"/&gt;
            &lt;xsl:if test="./xd:name and ./xd:mailto"&gt;)&lt;/xsl:if&gt;
            &lt;xsl:if test="(./xd:name or ./xd:mailto) and ./xd:organization"&gt;, &lt;/xsl:if&gt;
            &lt;xsl:apply-templates select="./xd:organization"/&gt;
          &lt;/author&gt;
        &lt;/xsl:for-each&gt;
        &lt;xsl:for-each select="$doc/xd:copyright"&gt;
          &lt;copyright&gt;
            &lt;copyryear&gt;
              &lt;xsl:attribute name="year"&gt;
                &lt;xsl:apply-templates select="./xd:year"/&gt;
              &lt;/xsl:attribute&gt;
            &lt;/copyryear&gt;
            &lt;copyrholder&gt;
              &lt;xsl:apply-templates select="./xd:holder"/&gt;
            &lt;/copyrholder&gt;
          &lt;/copyright&gt;
        &lt;/xsl:for-each&gt;
        &lt;metadata&gt;
          &lt;audience type="programmer" job="programming" experiencelevel="expert"/&gt;
          &lt;othermeta name="programming-language" content="XProc"/&gt;
          &lt;xsl:for-each select="$doc/xd:version"&gt;
            &lt;othermeta name="version"&gt;
              &lt;xsl:attribute name="content"&gt;
                &lt;xsl:value-of select="./text()"/&gt;
              &lt;/xsl:attribute&gt;
            &lt;/othermeta&gt;
          &lt;/xsl:for-each&gt;
          &lt;xsl:for-each select="$doc/xd:since"&gt;
            &lt;othermeta name="since"&gt;
              &lt;xsl:attribute name="content"&gt;
                &lt;xsl:value-of select="./text()"/&gt;
              &lt;/xsl:attribute&gt;
            &lt;/othermeta&gt;
          &lt;/xsl:for-each&gt;
          &lt;!--xsl:for-each select="$doc/xd:see"&gt;
            &lt;othermeta name="see"&gt;
              &lt;xsl:attribute name="content"&gt;
                &lt;xsl:value-of select="./text()"/&gt;
              &lt;/xsl:attribute&gt;
            &lt;/othermeta&gt;
          &lt;/xsl:for-each--&gt;
          &lt;xsl:for-each select="$doc/xd:deprecated"&gt;
            &lt;othermeta name="deprecated"&gt;
              &lt;xsl:attribute name="content"&gt;
                &lt;xsl:value-of select="./text()"/&gt;
              &lt;/xsl:attribute&gt;
            &lt;/othermeta&gt;
          &lt;/xsl:for-each&gt;

          &lt;!-- XProc version --&gt;
          &lt;xsl:if test="$code/@version or $code/@p:version"&gt;
            &lt;othermeta name="xproc-version"&gt;
              &lt;xsl:attribute name="content"&gt;
                &lt;xsl:value-of select="$code/@version | $code/@p:version"/&gt;
              &lt;/xsl:attribute&gt;
            &lt;/othermeta&gt;
          &lt;/xsl:if&gt;

          &lt;!-- XPath version --&gt;
          &lt;xsl:if test="$code/@xpath-version or $code/@p:xpath-version"&gt;
            &lt;othermeta name="xpath-version"&gt;
              &lt;xsl:attribute name="content"&gt;
                &lt;xsl:value-of select="$code/@xpath-version | $code/@p:xpath-version"/&gt;
              &lt;/xsl:attribute&gt;
            &lt;/othermeta&gt;
          &lt;/xsl:if&gt;
        &lt;/metadata&gt;
      &lt;/prolog&gt;

      &lt;refbody&gt;
        &lt;section&gt;
          &lt;apiname&gt;
            &lt;xsl:choose&gt;
              &lt;xsl:when test="$code/@name"&gt;
                &lt;xsl:value-of select="$code/@name"/&gt;
              &lt;/xsl:when&gt;
              &lt;xsl:otherwise&gt;
                &lt;xsl:value-of select="name($code)"/&gt;
              &lt;/xsl:otherwise&gt;
            &lt;/xsl:choose&gt;
          &lt;/apiname&gt;
        &lt;/section&gt;
        &lt;xsl:if test="count($code/p:input)&gt;0"&gt;
          &lt;section outputclass="parameters xproc-inputs"&gt;
            &lt;title outputclass="io-header"&gt;Inputs&lt;/title&gt;
            &lt;parml outputclass="xproc-inputs"&gt;
              &lt;xsl:choose&gt;
                &lt;xsl:when test="$code/p:input"&gt;
                  &lt;!--plentry&gt;
                  &lt;pt&gt;Name&lt;/pt&gt;
                  &lt;pt&gt;Primary&lt;/pt&gt;
                  &lt;pt&gt;Sequence&lt;/pt&gt;
                  &lt;pt&gt;Connection&lt;/pt&gt;
                  &lt;pd&gt;Description&lt;/pd&gt;
                &lt;/plentry--&gt;
                  &lt;xsl:for-each select="$code/p:input"&gt;
                    &lt;plentry&gt;
                      &lt;pt&gt;
                        &lt;xsl:value-of select="@port"/&gt;
                      &lt;/pt&gt;
                      &lt;pt&gt;
                        &lt;xsl:choose&gt;
                          &lt;xsl:when test="count($code/p:input) = 1 or @primary = 'true'"&gt;true&lt;/xsl:when&gt;
                          &lt;xsl:otherwise&gt;false&lt;/xsl:otherwise&gt;
                        &lt;/xsl:choose&gt;
                      &lt;/pt&gt;
                      &lt;pt&gt;
                        &lt;xsl:choose&gt;
                          &lt;xsl:when test="@sequence = 'true'"&gt;true&lt;/xsl:when&gt;
                          &lt;xsl:when test="@sequence = 'false'"&gt;false&lt;/xsl:when&gt;
                          &lt;xsl:otherwise/&gt;
                        &lt;/xsl:choose&gt;
                      &lt;/pt&gt;
                      &lt;pt&gt;
                        &lt;xsl:choose&gt;
                          &lt;xsl:when test="not(count(p:empty | p:inline | p:data | p:document | p:pipe) = 1)"/&gt;
                          &lt;xsl:when test="p:empty"&gt;empty&lt;/xsl:when&gt;
                          &lt;xsl:when test="p:inline"&gt;inline&lt;/xsl:when&gt;
                          &lt;xsl:when test="p:data"&gt;
                            &lt;xsl:value-of select="p:data/@href"/&gt;
                          &lt;/xsl:when&gt;
                          &lt;xsl:when test="p:document"&gt;
                            &lt;xsl:value-of select="p:document/@href"/&gt;
                          &lt;/xsl:when&gt;
                          &lt;xsl:when test="p:pipe"&gt;
                            &lt;xsl:value-of select="concat(p:pipe/@port,'@',p:pipe/@step)"/&gt;
                          &lt;/xsl:when&gt;
                        &lt;/xsl:choose&gt;
                      &lt;/pt&gt;
                      &lt;pd&gt;
                        &lt;xsl:variable name="port" select="@port"/&gt;
                        &lt;xsl:apply-templates select="$doc/xd:input[@port=$port]"/&gt;
                      &lt;/pd&gt;
                    &lt;/plentry&gt;
                  &lt;/xsl:for-each&gt;
                &lt;/xsl:when&gt;
                &lt;xsl:otherwise&gt;
                  &lt;plentry&gt;
                    &lt;pt/&gt;
                    &lt;pt/&gt;
                    &lt;pt/&gt;
                    &lt;pt&gt;Implicit&lt;/pt&gt;
                    &lt;pd&gt;
                      &lt;xsl:value-of select="$doc/xd:input"/&gt;
                    &lt;/pd&gt;
                  &lt;/plentry&gt;
                &lt;/xsl:otherwise&gt;
              &lt;/xsl:choose&gt;
            &lt;/parml&gt;
          &lt;/section&gt;
        &lt;/xsl:if&gt;

        &lt;xsl:if test="count($code/p:output)&gt;0"&gt;
          &lt;section outputclass="parameters xproc-outputs"&gt;
            &lt;title outputclass="io-header"&gt;Outputs&lt;/title&gt;
            &lt;parml outputclass="xproc-outputs"&gt;
              &lt;xsl:choose&gt;
                &lt;xsl:when test="$code/p:output"&gt;
                  &lt;!--plentry&gt;
                  &lt;pt&gt;Name&lt;/pt&gt;
                  &lt;pt&gt;Primary&lt;/pt&gt;
                  &lt;pt&gt;Sequence&lt;/pt&gt;
                  &lt;pt&gt;Connection&lt;/pt&gt;
                  &lt;pd&gt;Description&lt;/pd&gt;
                &lt;/plentry--&gt;
                  &lt;xsl:for-each select="$code/p:output"&gt;
                    &lt;plentry&gt;
                      &lt;pt&gt;
                        &lt;xsl:value-of select="@port"/&gt;
                      &lt;/pt&gt;
                      &lt;pt&gt;
                        &lt;xsl:choose&gt;
                          &lt;xsl:when test="count($code/p:output) = 1 or @primary = 'true'"&gt;true&lt;/xsl:when&gt;
                          &lt;xsl:otherwise&gt;false&lt;/xsl:otherwise&gt;
                        &lt;/xsl:choose&gt;
                      &lt;/pt&gt;
                      &lt;pt&gt;
                        &lt;xsl:choose&gt;
                          &lt;xsl:when test="@sequence = 'true'"&gt;true&lt;/xsl:when&gt;
                          &lt;xsl:when test="@sequence = 'false'"&gt;false&lt;/xsl:when&gt;
                          &lt;xsl:otherwise/&gt;
                        &lt;/xsl:choose&gt;
                      &lt;/pt&gt;
                      &lt;pt&gt;
                        &lt;xsl:choose&gt;
                          &lt;xsl:when test="not(count(p:empty | p:inline | p:data | p:document | p:pipe) = 1)"/&gt;
                          &lt;xsl:when test="p:empty"&gt;empty&lt;/xsl:when&gt;
                          &lt;xsl:when test="p:inline"&gt;inline&lt;/xsl:when&gt;
                          &lt;xsl:when test="p:data"&gt;
                            &lt;xsl:value-of select="p:data/@href"/&gt;
                          &lt;/xsl:when&gt;
                          &lt;xsl:when test="p:document"&gt;
                            &lt;xsl:value-of select="p:document/@href"/&gt;
                          &lt;/xsl:when&gt;
                          &lt;xsl:when test="p:pipe"&gt;
                            &lt;xsl:value-of select="concat(p:pipe/@port,'@',p:pipe/@step)"/&gt;
                          &lt;/xsl:when&gt;
                        &lt;/xsl:choose&gt;
                      &lt;/pt&gt;
                      &lt;pd&gt;
                        &lt;xsl:variable name="port" select="@port"/&gt;
                        &lt;xsl:apply-templates select="$doc/xd:output[@port=$port]"/&gt;
                      &lt;/pd&gt;
                    &lt;/plentry&gt;
                  &lt;/xsl:for-each&gt;
                &lt;/xsl:when&gt;
                &lt;xsl:otherwise&gt;
                  &lt;plentry&gt;
                    &lt;pt/&gt;
                    &lt;pt/&gt;
                    &lt;pt/&gt;
                    &lt;pt&gt;Implicit&lt;/pt&gt;
                    &lt;pd&gt;
                      &lt;xsl:value-of select="$doc/xd:output"/&gt;
                    &lt;/pd&gt;
                  &lt;/plentry&gt;
                &lt;/xsl:otherwise&gt;
              &lt;/xsl:choose&gt;
            &lt;/parml&gt;
          &lt;/section&gt;
        &lt;/xsl:if&gt;

        &lt;xsl:if test="$code/p:option | $code/p:with-option"&gt;
          &lt;section outputclass="parameters xproc-options"&gt;
            &lt;title outputclass="io-header"&gt;Options&lt;/title&gt;
            &lt;parml outputclass="xproc-options"&gt;
              &lt;xsl:choose&gt;
                &lt;xsl:when test="count($code/p:with-option) &gt; 0"&gt;
                  &lt;xsl:attribute name="outputclass" select="'xproc-options xproc-with-options'"/&gt;
                &lt;/xsl:when&gt;
                &lt;xsl:otherwise&gt;
                  &lt;xsl:attribute name="outputclass" select="'xproc-options'"/&gt;
                &lt;/xsl:otherwise&gt;
              &lt;/xsl:choose&gt;
              &lt;!--plentry&gt;
                &lt;pt&gt;Name&lt;/pt&gt;
                &lt;pd&gt;Required&lt;/pd&gt;
                &lt;xsl:if test="count($code/p:with-option) &gt; 0"&gt;
                &lt;pd&gt;Connection&lt;/pd&gt;
                &lt;/xsl:if&gt;
                &lt;pd&gt;Description&lt;/pd&gt;
                &lt;/plentry--&gt;
              &lt;xsl:for-each select="$code/p:option | $code/p:with-option"&gt;
                &lt;plentry&gt;
                  &lt;pt&gt;
                    &lt;xsl:value-of select="@name"/&gt;
                  &lt;/pt&gt;
                  &lt;pt&gt;
                    &lt;xsl:choose&gt;
                      &lt;xsl:when test="name(.) = 'p:with-option' and not(@required)"/&gt;
                      &lt;xsl:when test="@required = 'false'"&gt;false&lt;/xsl:when&gt;
                      &lt;xsl:when test="@required = 'true'"&gt;true&lt;/xsl:when&gt;
                      &lt;xsl:otherwise/&gt;
                    &lt;/xsl:choose&gt;
                  &lt;/pt&gt;
                  &lt;xsl:if test="name(.) = 'p:with-option'"&gt;
                    &lt;pt&gt;
                      &lt;xsl:choose&gt;
                        &lt;xsl:when test="not(count(p:empty | p:inline | p:data | p:document | p:pipe) = 1)"/&gt;
                        &lt;xsl:when test="p:empty"&gt;empty&lt;/xsl:when&gt;
                        &lt;xsl:when test="p:inline"&gt;inline&lt;/xsl:when&gt;
                        &lt;xsl:when test="p:data"&gt;
                          &lt;xsl:value-of select="p:data/@href"/&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="p:document"&gt;
                          &lt;xsl:value-of select="p:document/@href"/&gt;
                        &lt;/xsl:when&gt;
                        &lt;xsl:when test="p:pipe"&gt;
                          &lt;xsl:value-of select="concat(p:pipe/@port,'@',p:pipe/@step)"/&gt;
                        &lt;/xsl:when&gt;
                      &lt;/xsl:choose&gt;
                    &lt;/pt&gt;
                  &lt;/xsl:if&gt;
                  &lt;pd&gt;
                    &lt;xsl:variable name="port" select="@port"/&gt;
                    &lt;xsl:apply-templates select="$doc/xd:option[@port=$port]"/&gt;
                  &lt;/pd&gt;
                &lt;/plentry&gt;
              &lt;/xsl:for-each&gt;
            &lt;/parml&gt;
          &lt;/section&gt;
        &lt;/xsl:if&gt;

        &lt;xsl:if test="$code/p:with-param"&gt;
          &lt;section outputclass="parameters xproc-with-params"&gt;
            &lt;title outputclass="io-header"&gt;Parameters&lt;/title&gt;
            &lt;parml outputclass="xproc-with-params"&gt;
              &lt;xsl:attribute name="outputclass" select="'xproc-with-params'"/&gt;
              &lt;!--plentry&gt;
                &lt;pt&gt;Name&lt;/pt&gt;
                &lt;pd&gt;Required&lt;/pd&gt;
                &lt;xsl:if test="count($code/p:with-param) &gt; 0"&gt;
                &lt;pd&gt;Connection&lt;/pd&gt;
                &lt;/xsl:if&gt;
                &lt;pd&gt;Description&lt;/pd&gt;
                &lt;/plentry--&gt;
              &lt;xsl:for-each select="$code/p:with-param"&gt;
                &lt;plentry&gt;
                  &lt;pt&gt;
                    &lt;xsl:value-of select="@port"/&gt;
                  &lt;/pt&gt;
                  &lt;pt&gt;
                    &lt;xsl:choose&gt;
                      &lt;xsl:when test="not(count(p:empty | p:inline | p:data | p:document | p:pipe) = 1)"/&gt;
                      &lt;xsl:when test="p:empty"&gt;empty&lt;/xsl:when&gt;
                      &lt;xsl:when test="p:inline"&gt;inline&lt;/xsl:when&gt;
                      &lt;xsl:when test="p:data"&gt;
                        &lt;xsl:value-of select="p:data/@href"/&gt;
                      &lt;/xsl:when&gt;
                      &lt;xsl:when test="p:document"&gt;
                        &lt;xsl:value-of select="p:document/@href"/&gt;
                      &lt;/xsl:when&gt;
                      &lt;xsl:when test="p:pipe"&gt;
                        &lt;xsl:value-of select="concat(p:pipe/@port,'@',p:pipe/@step)"/&gt;
                      &lt;/xsl:when&gt;
                    &lt;/xsl:choose&gt;
                  &lt;/pt&gt;
                  &lt;pd&gt;
                    &lt;xsl:variable name="name" select="@name"/&gt;
                    &lt;xsl:apply-templates select="$doc/xd:param[@name=$name]"/&gt;
                  &lt;/pd&gt;
                &lt;/plentry&gt;
              &lt;/xsl:for-each&gt;
            &lt;/parml&gt;
          &lt;/section&gt;
        &lt;/xsl:if&gt;

      &lt;/refbody&gt;

      &lt;xsl:if test="count($code//p:import) &gt; 0 or count($code//p:document) &gt; 0 or count($doc/xd:see) &gt; 0"&gt;
        &lt;related-links&gt;
          &lt;xsl:if test="count($code//p:import) &gt; 0"&gt;
            &lt;linklist&gt;
              &lt;title&gt;Dependencies (p:import)&lt;/title&gt;
              &lt;xsl:for-each select="$code//p:import"&gt;
                &lt;link href="{@href}" format="ditamap"/&gt;
              &lt;/xsl:for-each&gt;
              &lt;linkinfo&gt;These dependencies are derived from the p:import statements from the XProc
                script.&lt;/linkinfo&gt;
            &lt;/linklist&gt;
          &lt;/xsl:if&gt;
          &lt;xsl:if test="count($code//p:document) &gt; 0"&gt;
            &lt;linklist&gt;
              &lt;title&gt;Dependencies (p:document)&lt;/title&gt;
              &lt;xsl:for-each select="$code//p:document"&gt;
                &lt;link href="{@href}" format="ditamap"/&gt;
              &lt;/xsl:for-each&gt;
              &lt;linkinfo&gt;These dependencies are derived from documents loaded with the p:document
                step in the XProc script.&lt;/linkinfo&gt;
            &lt;/linklist&gt;
          &lt;/xsl:if&gt;
          &lt;xsl:if test="count($doc/xd:see) &gt; 0"&gt;
            &lt;linklist&gt;
              &lt;title&gt;See also&lt;/title&gt;
              &lt;xsl:for-each select="$doc/xd:see"&gt;
                &lt;link href="{./text()}" format="ditamap"/&gt;
              &lt;/xsl:for-each&gt;
              &lt;linkinfo&gt;These are related readings suggested by the author of the XProc
                script.&lt;/linkinfo&gt;
            &lt;/linklist&gt;
          &lt;/xsl:if&gt;
        &lt;/related-links&gt;
      &lt;/xsl:if&gt;
      
      &lt;section outputclass="sourcecode"&gt;
        &lt;title outputclass="sourcecode-header"&gt;Source Code&lt;/title&gt;
        &lt;codeblock&gt;
          &lt;xsl:for-each select="$code"&gt;
            &lt;xsl:call-template name="xml-to-string"/&gt;
          &lt;/xsl:for-each&gt;
        &lt;/codeblock&gt;
      &lt;/section&gt;
    &lt;/reference&gt;

  &lt;/xsl:template&gt;

  &lt;xd:doc target="following"&gt;
    &lt;xd:short&gt;&amp;lt;xd:code/&gt; becomes &amp;lt;codeblock outputclass="language-xslt"/&gt;&lt;/xd:short&gt;
  &lt;/xd:doc&gt;
  &lt;xsl:template match="xd:code"&gt;
    &lt;codeblock outputclass="language-xslt"&gt;&lt;xsl:apply-templates/&gt;&lt;/codeblock&gt;
  &lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;</codeblock>
   </section>
</reference>