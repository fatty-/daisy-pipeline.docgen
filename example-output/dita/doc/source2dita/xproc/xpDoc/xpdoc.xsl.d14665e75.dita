<reference id="d14665e75">
   <title>xsl:template</title>
   <abstract>
      <shortdesc>
         <xd:short xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                   xmlns:p="http://www.w3.org/ns/xproc"
                   xmlns:xd="http://pipeline.daisy.org/ns/sample/doc">Main template</xd:short>
      </shortdesc>
      <xd:detail xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                 xmlns:p="http://www.w3.org/ns/xproc"
                 xmlns:xd="http://pipeline.daisy.org/ns/sample/doc">Creates the top element &lt;dita&gt;, determines how to document the XProc script
      itself, and recurses throught the code looking for p:documentation elements.</xd:detail>
   </abstract>
   <prolog>
      <metadata>
         <audience type="programmer" job="programming" experiencelevel="expert"/>
         <othermeta name="programming-language" content="XSLT"/>
      </metadata>
   </prolog>
   <refbody>
      <section>
         <apiname>xsl:template</apiname>
      </section>
   </refbody>
   <section outputclass="sourcecode">
      <title outputclass="sourcecode-header">Source Code</title>
      <codeblock>&lt;xsl:template match="/*" xmlns:p="http://www.w3.org/ns/xproc" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;
    &lt;dita&gt;
      &lt;xsl:choose&gt;

        &lt;!-- When the root element contains a p:documentation child targeting it, use it --&gt;
        &lt;xsl:when test="./p:documentation[@xd:target='parent']"&gt;
          &lt;xsl:variable name="parentdoc" select="./p:documentation[@xd:target='parent'][1]"/&gt;
          &lt;xsl:call-template name="pipedoc"&gt;
            &lt;xsl:with-param name="doc" select="$parentdoc"/&gt;
            &lt;xsl:with-param name="code" select="."/&gt;
          &lt;/xsl:call-template&gt;
          &lt;xsl:call-template name="subdoc"&gt;
            &lt;xsl:with-param name="code" select="."/&gt;
            &lt;xsl:with-param name="parentdoc" select="$parentdoc"/&gt;
          &lt;/xsl:call-template&gt;
        &lt;/xsl:when&gt;

        &lt;!-- When the first child of the root element is a p:documentation and is not targeting another element, use it --&gt;
        &lt;xsl:when test="name(./*[1]) = 'p:documentation' and not(./*[1]/@xd:target = 'following')"&gt;
          &lt;xsl:variable name="parentdoc" select="./*[1]"/&gt;
          &lt;xsl:call-template name="pipedoc"&gt;
            &lt;xsl:with-param name="doc" select="$parentdoc"/&gt;
            &lt;xsl:with-param name="code" select="."/&gt;
          &lt;/xsl:call-template&gt;
          &lt;xsl:call-template name="subdoc"&gt;
            &lt;xsl:with-param name="code" select="."/&gt;
            &lt;xsl:with-param name="parentdoc" select="$parentdoc"/&gt;
          &lt;/xsl:call-template&gt;
        &lt;/xsl:when&gt;

        &lt;!-- The root element is not documented. Create some empty documentation for it. --&gt;
        &lt;xsl:otherwise&gt;
          &lt;xsl:call-template name="pipedoc"&gt;
            &lt;xsl:with-param name="doc"&gt;
              &lt;p:documentation/&gt;
            &lt;/xsl:with-param&gt;
            &lt;xsl:with-param name="code" select="."/&gt;
          &lt;/xsl:call-template&gt;
          &lt;xsl:call-template name="subdoc"&gt;
            &lt;xsl:with-param name="code" select="."/&gt;
          &lt;/xsl:call-template&gt;
        &lt;/xsl:otherwise&gt;

      &lt;/xsl:choose&gt;
    &lt;/dita&gt;
  &lt;/xsl:template&gt;</codeblock>
   </section>
</reference>