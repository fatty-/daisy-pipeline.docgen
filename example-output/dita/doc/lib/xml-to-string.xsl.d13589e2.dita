<reference id="d13589e2">
   <title>xsl:stylesheet</title>
   <abstract>
      <shortdesc/>
   </abstract>
   <prolog>
      <metadata>
         <audience type="programmer" job="programming" experiencelevel="expert"/>
         <othermeta name="programming-language" content="XSLT"/>
         <othermeta name="xslt-version" content="1.0"/>
         <othermeta name="xpath-version" content="1.0"/>
      </metadata>
   </prolog>
   <refbody>
      <section>
         <apiname>xsl:stylesheet</apiname>
      </section>
      <section outputclass="parameters xslt-params">
         <title outputclass="io-header">Parameters (xsl:param / xsl:with-param)</title>
         <parml outputclass="xslt-params">
            <plentry>
               <pt>use-empty-syntax</pt>
               <pt>undefined</pt>
               <pt>false</pt>
               <pt>no</pt>
               <pd/>
            </plentry>
            <plentry>
               <pt>exclude-unused-prefixes</pt>
               <pt>undefined</pt>
               <pt>false</pt>
               <pt>no</pt>
               <pd/>
            </plentry>
            <plentry>
               <pt>force-exclude-all-namespaces</pt>
               <pt>undefined</pt>
               <pt>false</pt>
               <pt>no</pt>
               <pd/>
            </plentry>
            <plentry>
               <pt>namespaces-to-exclude</pt>
               <pt>undefined</pt>
               <pt>false</pt>
               <pt>no</pt>
               <pd/>
            </plentry>
            <plentry>
               <pt>start-tag-start</pt>
               <pt>undefined</pt>
               <pt>false</pt>
               <pt>no</pt>
               <pd/>
            </plentry>
            <plentry>
               <pt>start-tag-end</pt>
               <pt>undefined</pt>
               <pt>false</pt>
               <pt>no</pt>
               <pd/>
            </plentry>
            <plentry>
               <pt>empty-tag-end</pt>
               <pt>undefined</pt>
               <pt>false</pt>
               <pt>no</pt>
               <pd/>
            </plentry>
            <plentry>
               <pt>end-tag-start</pt>
               <pt>undefined</pt>
               <pt>false</pt>
               <pt>no</pt>
               <pd/>
            </plentry>
            <plentry>
               <pt>end-tag-end</pt>
               <pt>undefined</pt>
               <pt>false</pt>
               <pt>no</pt>
               <pd/>
            </plentry>
            <plentry>
               <pt>space</pt>
               <pt>undefined</pt>
               <pt>false</pt>
               <pt>no</pt>
               <pd/>
            </plentry>
            <plentry>
               <pt>ns-decl</pt>
               <pt>undefined</pt>
               <pt>false</pt>
               <pt>no</pt>
               <pd/>
            </plentry>
            <plentry>
               <pt>colon</pt>
               <pt>undefined</pt>
               <pt>false</pt>
               <pt>no</pt>
               <pd/>
            </plentry>
            <plentry>
               <pt>equals</pt>
               <pt>undefined</pt>
               <pt>false</pt>
               <pt>no</pt>
               <pd/>
            </plentry>
            <plentry>
               <pt>attribute-delimiter</pt>
               <pt>undefined</pt>
               <pt>false</pt>
               <pt>no</pt>
               <pd/>
            </plentry>
            <plentry>
               <pt>comment-start</pt>
               <pt>undefined</pt>
               <pt>false</pt>
               <pt>no</pt>
               <pd/>
            </plentry>
            <plentry>
               <pt>comment-end</pt>
               <pt>undefined</pt>
               <pt>false</pt>
               <pt>no</pt>
               <pd/>
            </plentry>
            <plentry>
               <pt>pi-start</pt>
               <pt>undefined</pt>
               <pt>false</pt>
               <pt>no</pt>
               <pd/>
            </plentry>
            <plentry>
               <pt>pi-end</pt>
               <pt>undefined</pt>
               <pt>false</pt>
               <pt>no</pt>
               <pd/>
            </plentry>
         </parml>
      </section>
      <section outputclass="parameters xslt-outputs">
         <title outputclass="io-header">Outputs (xsl:output)</title>
         <parml outputclass="xslt-outputs">
            <pt/>
            <pt/>
            <pt/>
            <pt/>
            <pt/>
            <pt>yes</pt>
            <pt/>
            <pt/>
            <pt>yes</pt>
            <pt>omit</pt>
            <pt/>
            <pd/>
         </parml>
      </section>
   </refbody>
   <section outputclass="sourcecode">
      <title outputclass="sourcecode-header">Source Code</title>
      <codeblock>&lt;xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0"&gt;

    &lt;xsl:output omit-xml-declaration="yes"/&gt;

    &lt;xsl:param name="use-empty-syntax" select="true()"/&gt;
    &lt;xsl:param name="exclude-unused-prefixes" select="true()"/&gt;

    &lt;xsl:param name="force-exclude-all-namespaces" select="false()"/&gt;

    &lt;!-- a node-set; each node's string-value
       will be interpreted as a namespace URI to be
       excluded from the serialization. --&gt;
    &lt;xsl:param name="namespaces-to-exclude" select="/.."/&gt;
    &lt;!-- initialized to empty node-set --&gt;

    &lt;xsl:param name="start-tag-start" select="'&amp;lt;'"/&gt;
    &lt;xsl:param name="start-tag-end" select="'&amp;gt;'"/&gt;
    &lt;xsl:param name="empty-tag-end" select="'/&amp;gt;'"/&gt;
    &lt;xsl:param name="end-tag-start" select="'&amp;lt;/'"/&gt;
    &lt;xsl:param name="end-tag-end" select="'&amp;gt;'"/&gt;
    &lt;xsl:param name="space" select="' '"/&gt;
    &lt;xsl:param name="ns-decl" select="'xmlns'"/&gt;
    &lt;xsl:param name="colon" select="':'"/&gt;
    &lt;xsl:param name="equals" select="'='"/&gt;
    &lt;xsl:param name="attribute-delimiter" select="'&amp;#34;'"/&gt;
    &lt;xsl:param name="comment-start" select="'&amp;lt;!--'"/&gt;
    &lt;xsl:param name="comment-end" select="'--&amp;gt;'"/&gt;
    &lt;xsl:param name="pi-start" select="'&amp;lt;?'"/&gt;
    &lt;xsl:param name="pi-end" select="'?&amp;gt;'"/&gt;

    &lt;xsl:template name="xml-to-string"&gt;
        &lt;xsl:param name="node-set" select="."/&gt;
        &lt;xsl:apply-templates select="$node-set" mode="xml-to-string"&gt;
            &lt;xsl:with-param name="depth" select="1"/&gt;
        &lt;/xsl:apply-templates&gt;
    &lt;/xsl:template&gt;

    &lt;xsl:template match="/" name="xml-to-string-root-rule"&gt;
        &lt;xsl:call-template name="xml-to-string"/&gt;
    &lt;/xsl:template&gt;

    &lt;xsl:template match="/" mode="xml-to-string"&gt;
        &lt;xsl:param name="depth"/&gt;
        &lt;xsl:apply-templates mode="xml-to-string"&gt;
            &lt;xsl:with-param name="depth" select="$depth"/&gt;
        &lt;/xsl:apply-templates&gt;
    &lt;/xsl:template&gt;

    &lt;xsl:template match="*" mode="xml-to-string"&gt;
        &lt;xsl:param name="depth"/&gt;
        &lt;xsl:variable name="element" select="."/&gt;
        &lt;xsl:value-of select="$start-tag-start"/&gt;
        &lt;xsl:call-template name="element-name"&gt;
            &lt;xsl:with-param name="text" select="name()"/&gt;
        &lt;/xsl:call-template&gt;
        &lt;xsl:apply-templates select="@*" mode="xml-to-string"/&gt;
        &lt;xsl:if test="not($force-exclude-all-namespaces)"&gt;
            &lt;xsl:for-each select="namespace::*"&gt;
                &lt;xsl:call-template name="process-namespace-node"&gt;
                    &lt;xsl:with-param name="element" select="$element"/&gt;
                    &lt;xsl:with-param name="depth" select="$depth"/&gt;
                &lt;/xsl:call-template&gt;
            &lt;/xsl:for-each&gt;
        &lt;/xsl:if&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="node() or not($use-empty-syntax)"&gt;
                &lt;xsl:value-of select="$start-tag-end"/&gt;
                &lt;xsl:apply-templates mode="xml-to-string"&gt;
                    &lt;xsl:with-param name="depth" select="$depth + 1"/&gt;
                &lt;/xsl:apply-templates&gt;
                &lt;xsl:value-of select="$end-tag-start"/&gt;
                &lt;xsl:call-template name="element-name"&gt;
                    &lt;xsl:with-param name="text" select="name()"/&gt;
                &lt;/xsl:call-template&gt;
                &lt;xsl:value-of select="$end-tag-end"/&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
                &lt;xsl:value-of select="$empty-tag-end"/&gt;
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xsl:template name="process-namespace-node"&gt;
        &lt;xsl:param name="element"/&gt;
        &lt;xsl:param name="depth"/&gt;
        &lt;xsl:variable name="declaredAbove"&gt;
            &lt;xsl:call-template name="isDeclaredAbove"&gt;
                &lt;xsl:with-param name="depth" select="$depth - 1"/&gt;
                &lt;xsl:with-param name="element" select="$element/.."/&gt;
            &lt;/xsl:call-template&gt;
        &lt;/xsl:variable&gt;

        &lt;xsl:variable name="is-used-on-this-element" select="($element    | $element/@*) [namespace-uri() = current()]"/&gt;
        &lt;xsl:variable name="is-used-on-a-descendant" select="($element//* | $element//@*)[namespace-uri() = current()]"/&gt;
        &lt;xsl:variable name="is-unused" select="not($is-used-on-this-element) and                                            not($is-used-on-a-descendant)"/&gt;
        &lt;xsl:variable name="exclude-ns" select="($is-unused and $exclude-unused-prefixes) or                                             (. = $namespaces-to-exclude)"/&gt;

        &lt;xsl:variable name="force-include" select="$is-used-on-this-element and (. = $namespaces-to-exclude)"/&gt;

        &lt;xsl:if test="(name() != 'xml') and ($force-include or (not($exclude-ns) and not(string($declaredAbove))))"&gt;
            &lt;xsl:value-of select="$space"/&gt;
            &lt;xsl:value-of select="$ns-decl"/&gt;
            &lt;xsl:if test="name()"&gt;
                &lt;xsl:value-of select="$colon"/&gt;
                &lt;xsl:call-template name="ns-prefix"&gt;
                    &lt;xsl:with-param name="text" select="name()"/&gt;
                &lt;/xsl:call-template&gt;
            &lt;/xsl:if&gt;
            &lt;xsl:value-of select="$equals"/&gt;
            &lt;xsl:value-of select="$attribute-delimiter"/&gt;
            &lt;xsl:call-template name="ns-uri"&gt;
                &lt;xsl:with-param name="text" select="string(.)"/&gt;
            &lt;/xsl:call-template&gt;
            &lt;xsl:value-of select="$attribute-delimiter"/&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xsl:template name="isDeclaredAbove"&gt;
        &lt;xsl:param name="element"/&gt;
        &lt;xsl:param name="depth"/&gt;
        &lt;xsl:if test="$depth &amp;gt; 0"&gt;
            &lt;xsl:choose&gt;
                &lt;xsl:when test="$element/namespace::*[name(.)=name(current()) and .=current()]"&gt;1&lt;/xsl:when&gt;
                &lt;xsl:when test="$element/namespace::*[name(.)=name(current())]"/&gt;
                &lt;xsl:otherwise&gt;
                    &lt;xsl:call-template name="isDeclaredAbove"&gt;
                        &lt;xsl:with-param name="depth" select="$depth - 1"/&gt;
                        &lt;xsl:with-param name="element" select="$element/.."/&gt;
                    &lt;/xsl:call-template&gt;
                &lt;/xsl:otherwise&gt;
            &lt;/xsl:choose&gt;
        &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;xsl:template match="@*" mode="xml-to-string" name="serialize-attribute"&gt;
        &lt;xsl:param name="att-value" select="string(.)"/&gt;
        &lt;xsl:value-of select="$space"/&gt;
        &lt;xsl:call-template name="attribute-name"&gt;
            &lt;xsl:with-param name="text" select="name()"/&gt;
        &lt;/xsl:call-template&gt;
        &lt;xsl:value-of select="$equals"/&gt;
        &lt;xsl:value-of select="$attribute-delimiter"/&gt;
        &lt;xsl:call-template name="attribute-value"&gt;
            &lt;xsl:with-param name="text" select="$att-value"/&gt;
        &lt;/xsl:call-template&gt;
        &lt;xsl:value-of select="$attribute-delimiter"/&gt;
    &lt;/xsl:template&gt;

    &lt;xsl:template match="comment()" mode="xml-to-string"&gt;
        &lt;xsl:value-of select="$comment-start"/&gt;
        &lt;xsl:call-template name="comment-text"&gt;
            &lt;xsl:with-param name="text" select="string(.)"/&gt;
        &lt;/xsl:call-template&gt;
        &lt;xsl:value-of select="$comment-end"/&gt;
    &lt;/xsl:template&gt;

    &lt;xsl:template match="processing-instruction()" mode="xml-to-string"&gt;
        &lt;xsl:value-of select="$pi-start"/&gt;
        &lt;xsl:call-template name="pi-target"&gt;
            &lt;xsl:with-param name="text" select="name()"/&gt;
        &lt;/xsl:call-template&gt;
        &lt;xsl:value-of select="$space"/&gt;
        &lt;xsl:call-template name="pi-text"&gt;
            &lt;xsl:with-param name="text" select="string(.)"/&gt;
        &lt;/xsl:call-template&gt;
        &lt;xsl:value-of select="$pi-end"/&gt;
    &lt;/xsl:template&gt;

    &lt;xsl:template match="text()" mode="xml-to-string"&gt;
        &lt;xsl:call-template name="text-content"&gt;
            &lt;xsl:with-param name="text" select="string(.)"/&gt;
        &lt;/xsl:call-template&gt;
    &lt;/xsl:template&gt;

    &lt;xsl:template name="element-name"&gt;
        &lt;xsl:param name="text"/&gt;
        &lt;xsl:value-of select="$text"/&gt;
    &lt;/xsl:template&gt;

    &lt;xsl:template name="attribute-name"&gt;
        &lt;xsl:param name="text"/&gt;
        &lt;xsl:value-of select="$text"/&gt;
    &lt;/xsl:template&gt;

    &lt;xsl:template name="attribute-value"&gt;
        &lt;xsl:param name="text"/&gt;
        &lt;xsl:variable name="escaped-markup"&gt;
            &lt;xsl:call-template name="escape-markup-characters"&gt;
                &lt;xsl:with-param name="text" select="$text"/&gt;
            &lt;/xsl:call-template&gt;
        &lt;/xsl:variable&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="$attribute-delimiter = &amp;#34;'&amp;#34;"&gt;
                &lt;xsl:call-template name="replace-string"&gt;
                    &lt;xsl:with-param name="text" select="$escaped-markup"/&gt;
                    &lt;xsl:with-param name="replace" select="&amp;#34;'&amp;#34;"/&gt;
                    &lt;xsl:with-param name="with" select="'&amp;amp;apos;'"/&gt;
                &lt;/xsl:call-template&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:when test="$attribute-delimiter = '&amp;#34;'"&gt;
                &lt;xsl:call-template name="replace-string"&gt;
                    &lt;xsl:with-param name="text" select="$escaped-markup"/&gt;
                    &lt;xsl:with-param name="replace" select="'&amp;#34;'"/&gt;
                    &lt;xsl:with-param name="with" select="'&amp;amp;quot;'"/&gt;
                &lt;/xsl:call-template&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
                &lt;xsl:call-template name="replace-string"&gt;
                    &lt;xsl:with-param name="text" select="$escaped-markup"/&gt;
                    &lt;xsl:with-param name="replace" select="$attribute-delimiter"/&gt;
                    &lt;xsl:with-param name="with" select="''"/&gt;
                &lt;/xsl:call-template&gt;
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

    &lt;xsl:template name="ns-prefix"&gt;
        &lt;xsl:param name="text"/&gt;
        &lt;xsl:value-of select="$text"/&gt;
    &lt;/xsl:template&gt;

    &lt;xsl:template name="ns-uri"&gt;
        &lt;xsl:param name="text"/&gt;
        &lt;xsl:call-template name="attribute-value"&gt;
            &lt;xsl:with-param name="text" select="$text"/&gt;
        &lt;/xsl:call-template&gt;
    &lt;/xsl:template&gt;

    &lt;xsl:template name="text-content"&gt;
        &lt;xsl:param name="text"/&gt;
        &lt;xsl:call-template name="escape-markup-characters"&gt;
            &lt;xsl:with-param name="text" select="$text"/&gt;
        &lt;/xsl:call-template&gt;
    &lt;/xsl:template&gt;

    &lt;xsl:template name="pi-target"&gt;
        &lt;xsl:param name="text"/&gt;
        &lt;xsl:value-of select="$text"/&gt;
    &lt;/xsl:template&gt;

    &lt;xsl:template name="pi-text"&gt;
        &lt;xsl:param name="text"/&gt;
        &lt;xsl:value-of select="$text"/&gt;
    &lt;/xsl:template&gt;

    &lt;xsl:template name="comment-text"&gt;
        &lt;xsl:param name="text"/&gt;
        &lt;xsl:value-of select="$text"/&gt;
    &lt;/xsl:template&gt;

    &lt;xsl:template name="escape-markup-characters"&gt;
        &lt;xsl:param name="text"/&gt;
        &lt;xsl:variable name="ampEscaped"&gt;
            &lt;xsl:call-template name="replace-string"&gt;
                &lt;xsl:with-param name="text" select="$text"/&gt;
                &lt;xsl:with-param name="replace" select="'&amp;amp;'"/&gt;
                &lt;xsl:with-param name="with" select="'&amp;amp;amp;'"/&gt;
            &lt;/xsl:call-template&gt;
        &lt;/xsl:variable&gt;
        &lt;xsl:variable name="ltEscaped"&gt;
            &lt;xsl:call-template name="replace-string"&gt;
                &lt;xsl:with-param name="text" select="$ampEscaped"/&gt;
                &lt;xsl:with-param name="replace" select="'&amp;lt;'"/&gt;
                &lt;xsl:with-param name="with" select="'&amp;amp;lt;'"/&gt;
            &lt;/xsl:call-template&gt;
        &lt;/xsl:variable&gt;
        &lt;xsl:call-template name="replace-string"&gt;
            &lt;xsl:with-param name="text" select="$ltEscaped"/&gt;
            &lt;xsl:with-param name="replace" select="']]&amp;gt;'"/&gt;
            &lt;xsl:with-param name="with" select="']]&amp;amp;gt;'"/&gt;
        &lt;/xsl:call-template&gt;
    &lt;/xsl:template&gt;

    &lt;xsl:template name="replace-string"&gt;
        &lt;xsl:param name="text"/&gt;
        &lt;xsl:param name="replace"/&gt;
        &lt;xsl:param name="with"/&gt;
        &lt;xsl:variable name="stringText" select="string($text)"/&gt;
        &lt;xsl:choose&gt;
            &lt;xsl:when test="contains($stringText,$replace)"&gt;
                &lt;xsl:value-of select="substring-before($stringText,$replace)"/&gt;
                &lt;xsl:value-of select="$with"/&gt;
                &lt;xsl:call-template name="replace-string"&gt;
                    &lt;xsl:with-param name="text" select="substring-after($stringText,$replace)"/&gt;
                    &lt;xsl:with-param name="replace" select="$replace"/&gt;
                    &lt;xsl:with-param name="with" select="$with"/&gt;
                &lt;/xsl:call-template&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
                &lt;xsl:value-of select="$stringText"/&gt;
            &lt;/xsl:otherwise&gt;
        &lt;/xsl:choose&gt;
    &lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;</codeblock>
   </section>
</reference>